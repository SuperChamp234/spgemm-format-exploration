// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module extract_col (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_csc_colptr_address0,
        inp_csc_colptr_ce0,
        inp_csc_colptr_q0,
        inp_csc_colptr_address1,
        inp_csc_colptr_ce1,
        inp_csc_colptr_q1,
        inp_csc_rowind_address0,
        inp_csc_rowind_ce0,
        inp_csc_rowind_q0,
        inp_csc_data_V_address0,
        inp_csc_data_V_ce0,
        inp_csc_data_V_q0,
        col,
        out_col_V_0,
        out_col_V_0_ap_vld,
        out_col_V_1,
        out_col_V_1_ap_vld,
        out_col_V_2,
        out_col_V_2_ap_vld,
        out_col_V_3,
        out_col_V_3_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] inp_csc_colptr_address0;
output   inp_csc_colptr_ce0;
input  [31:0] inp_csc_colptr_q0;
output  [2:0] inp_csc_colptr_address1;
output   inp_csc_colptr_ce1;
input  [31:0] inp_csc_colptr_q1;
output  [4:0] inp_csc_rowind_address0;
output   inp_csc_rowind_ce0;
input  [31:0] inp_csc_rowind_q0;
output  [4:0] inp_csc_data_V_address0;
output   inp_csc_data_V_ce0;
input  [31:0] inp_csc_data_V_q0;
input  [2:0] col;
output  [31:0] out_col_V_0;
output   out_col_V_0_ap_vld;
output  [31:0] out_col_V_1;
output   out_col_V_1_ap_vld;
output  [31:0] out_col_V_2;
output   out_col_V_2_ap_vld;
output  [31:0] out_col_V_3;
output   out_col_V_3_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inp_csc_colptr_ce0;
reg inp_csc_colptr_ce1;
reg inp_csc_rowind_ce0;
reg inp_csc_data_V_ce0;
reg[31:0] out_col_V_0;
reg out_col_V_0_ap_vld;
reg[31:0] out_col_V_1;
reg out_col_V_1_ap_vld;
reg[31:0] out_col_V_2;
reg out_col_V_2_ap_vld;
reg[31:0] out_col_V_3;
reg out_col_V_3_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] end_idx_reg_252;
wire    ap_CS_fsm_state2;
wire   [31:0] i_cast1_fu_137_p1;
reg   [31:0] i_cast1_reg_257;
wire    ap_CS_fsm_state3;
wire   [2:0] i_2_fu_147_p2;
reg   [2:0] i_2_reg_265;
wire   [0:0] tmp_3_fu_153_p2;
reg   [0:0] tmp_3_reg_270;
wire   [0:0] exitcond_fu_141_p2;
wire  signed [63:0] tmp_4_fu_158_p1;
reg  signed [63:0] tmp_4_reg_274;
wire   [0:0] tmp_5_fu_163_p2;
reg   [0:0] tmp_5_reg_284;
wire    ap_CS_fsm_state4;
wire   [1:0] tmp_6_fu_196_p1;
reg   [1:0] tmp_6_reg_296;
reg   [2:0] i_reg_101;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_s_fu_116_p1;
wire   [63:0] tmp_2_fu_127_p1;
reg   [31:0] j_fu_40;
wire   [31:0] j_2_fu_224_p2;
wire   [1:0] tmp_fu_168_p1;
wire   [2:0] tmp_1_fu_121_p2;
wire  signed [31:0] tmp_3_fu_153_p0;
wire  signed [31:0] tmp_4_fu_158_p0;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_101 <= i_2_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_101 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_fu_40 <= j_2_fu_224_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_fu_40 <= inp_csc_colptr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        end_idx_reg_252 <= inp_csc_colptr_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_265 <= i_2_fu_147_p2;
        i_cast1_reg_257[2 : 0] <= i_cast1_fu_137_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_270 <= tmp_3_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (tmp_3_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_4_reg_274 <= tmp_4_fu_158_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_5_reg_284 <= tmp_5_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_163_p2 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_6_reg_296 <= tmp_6_fu_196_p1;
    end
end

always @ (*) begin
    if ((((exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inp_csc_colptr_ce0 = 1'b1;
    end else begin
        inp_csc_colptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inp_csc_colptr_ce1 = 1'b1;
    end else begin
        inp_csc_colptr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inp_csc_data_V_ce0 = 1'b1;
    end else begin
        inp_csc_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inp_csc_rowind_ce0 = 1'b1;
    end else begin
        inp_csc_rowind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd0))) begin
        out_col_V_0 = inp_csc_data_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd0)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd0))))) begin
        out_col_V_0 = 32'd0;
    end else begin
        out_col_V_0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd0)) | ((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd0)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd0)))))) begin
        out_col_V_0_ap_vld = 1'b1;
    end else begin
        out_col_V_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd1))) begin
        out_col_V_1 = inp_csc_data_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd1)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd1))))) begin
        out_col_V_1 = 32'd0;
    end else begin
        out_col_V_1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd1)) | ((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd1)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd1)))))) begin
        out_col_V_1_ap_vld = 1'b1;
    end else begin
        out_col_V_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd2))) begin
        out_col_V_2 = inp_csc_data_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd2)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd2))))) begin
        out_col_V_2 = 32'd0;
    end else begin
        out_col_V_2 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd2)) | ((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd2)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd2)))))) begin
        out_col_V_2_ap_vld = 1'b1;
    end else begin
        out_col_V_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd3))) begin
        out_col_V_3 = inp_csc_data_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd3)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd3))))) begin
        out_col_V_3 = 32'd0;
    end else begin
        out_col_V_3 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_5_reg_284 == 1'd1) & (tmp_3_reg_270 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_6_reg_296 == 2'd3)) | ((1'b1 == ap_CS_fsm_state4) & (((tmp_3_reg_270 == 1'd0) & (tmp_fu_168_p1 == 2'd3)) | ((tmp_5_fu_163_p2 == 1'd0) & (tmp_fu_168_p1 == 2'd3)))))) begin
        out_col_V_3_ap_vld = 1'b1;
    end else begin
        out_col_V_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond_fu_141_p2 = ((i_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign i_2_fu_147_p2 = (i_reg_101 + 3'd1);

assign i_cast1_fu_137_p1 = i_reg_101;

assign inp_csc_colptr_address0 = tmp_s_fu_116_p1;

assign inp_csc_colptr_address1 = tmp_2_fu_127_p1;

assign inp_csc_data_V_address0 = tmp_4_reg_274;

assign inp_csc_rowind_address0 = tmp_4_fu_158_p1;

assign j_2_fu_224_p2 = (j_fu_40 + 32'd1);

assign tmp_1_fu_121_p2 = (col + 3'd1);

assign tmp_2_fu_127_p1 = tmp_1_fu_121_p2;

assign tmp_3_fu_153_p0 = j_fu_40;

assign tmp_3_fu_153_p2 = (($signed(tmp_3_fu_153_p0) < $signed(end_idx_reg_252)) ? 1'b1 : 1'b0);

assign tmp_4_fu_158_p0 = j_fu_40;

assign tmp_4_fu_158_p1 = tmp_4_fu_158_p0;

assign tmp_5_fu_163_p2 = ((inp_csc_rowind_q0 == i_cast1_reg_257) ? 1'b1 : 1'b0);

assign tmp_6_fu_196_p1 = i_reg_101[1:0];

assign tmp_fu_168_p1 = i_reg_101[1:0];

assign tmp_s_fu_116_p1 = col;

always @ (posedge ap_clk) begin
    i_cast1_reg_257[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //extract_col
