-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiplier is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matrix_multiplier is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_multiplier,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=118,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=1373,HLS_SYN_LUT=1687,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal matrix1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_matrix : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal exitcond2_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_545_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal exitcond2_reg_545_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond2_reg_545_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal j1_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_225_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_cast_reg_494 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_cast_fu_239_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_cast_reg_499 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_cast_fu_253_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_12_cast_reg_506 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_1_fu_263_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_514 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_11_cast_fu_295_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_cast_reg_519 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond4_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_1_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_534 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_addr_1_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond2_reg_545_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_361_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_549 : STD_LOGIC_VECTOR (1 downto 0);
    signal matrix24_sum_fu_371_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal matrix24_sum_reg_554 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state15_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state18_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state24_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state27_pp1_stage1_iter4 : BOOLEAN;
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal matrix24_sum8_fu_404_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal matrix24_sum8_reg_565 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_2_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_2_reg_570 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state16_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state19_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state22_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_state25_pp1_stage2_iter3 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal matrix24_sum9_fu_428_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal matrix24_sum9_reg_581 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem_addr_2_read_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_4_read_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_1_2_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_1_2_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal i_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_phi_fu_195_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j1_phi_fu_207_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal matrix12_sum_cast_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_matrix6_sum_c_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix24_sum_cast_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix24_sum8_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix24_sum9_cast_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_01001 : BOOLEAN;
    signal ap_block_pp1_stage2_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal row1_2_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal row1_2_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal row1_2_2_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_215_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_229_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_243_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl_fu_273_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_281_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast8_fu_269_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_285_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix12_sum_fu_299_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal output_matrix6_sum_fu_341_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_cast_fu_367_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal j1_cast_fu_380_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_1_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_1_cast_fu_400_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal j1_cast3_fu_376_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_2_cast_fu_425_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal result_fu_446_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_462_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_872 : BOOLEAN;
    signal ap_condition_547 : BOOLEAN;
    signal ap_condition_559 : BOOLEAN;
    signal ap_condition_572 : BOOLEAN;

    component matrix_multiplier_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        matrix1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matrix2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiplier_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    matrix_multiplier_control_s_axi_U : component matrix_multiplier_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        matrix1 => matrix1,
        matrix2 => matrix2,
        output_matrix => output_matrix);

    matrix_multiplier_gmem_m_axi_U : component matrix_multiplier_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_539,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_3,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => accumulator_1_2_reg_622,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (gmem_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_01001) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (gmem_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_872)) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage1_11001)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (gmem_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_reg_180 <= i_1_reg_514;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_180 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j1_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j1_reg_203 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0))) then 
                j1_reg_203 <= j_2_reg_549;
            end if; 
        end if;
    end process;

    j_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_530 = ap_const_lv1_0))) then 
                j_reg_191 <= j_1_reg_534;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_191 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0))) then
                accumulator_1_2_reg_622 <= accumulator_1_2_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond2_reg_545 <= exitcond2_fu_355_p2;
                exitcond2_reg_545_pp1_iter1_reg <= exitcond2_reg_545;
                exitcond2_reg_545_pp1_iter2_reg <= exitcond2_reg_545_pp1_iter1_reg;
                exitcond2_reg_545_pp1_iter3_reg <= exitcond2_reg_545_pp1_iter2_reg;
                exitcond2_reg_545_pp1_iter4_reg <= exitcond2_reg_545_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond3_reg_530 <= exitcond3_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem_addr_1_reg_539 <= output_matrix6_sum_c_fu_345_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0))) then
                gmem_addr_2_read_reg_592 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0))) then
                gmem_addr_3_read_reg_597 <= gmem_RDATA;
                result_reg_602 <= result_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_4_read_reg_607 <= gmem_RDATA;
                result_1_reg_612 <= result_1_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_257_p2 = ap_const_lv1_0))) then
                gmem_addr_reg_524 <= matrix12_sum_cast_fu_304_p1(32 - 1 downto 0);
                    tmp_11_cast_reg_519(31 downto 0) <= tmp_11_cast_fu_295_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_514 <= i_1_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_1_reg_534 <= j_1_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                j_2_reg_549 <= j_2_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0))) then
                matrix24_sum8_reg_565 <= matrix24_sum8_fu_404_p2;
                tmp_7_2_reg_570 <= tmp_7_2_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond2_reg_545 = ap_const_lv1_0))) then
                matrix24_sum9_reg_581 <= matrix24_sum9_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_fu_355_p2 = ap_const_lv1_0))) then
                matrix24_sum_reg_554 <= matrix24_sum_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0))) then
                result_2_reg_617 <= result_2_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (j_reg_191 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                row1_2_1_fu_90 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_reg_191 = ap_const_lv2_1)) and not((j_reg_191 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                row1_2_2_fu_94 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (j_reg_191 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                row1_2_fu_86 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_12_cast_reg_506(29 downto 0) <= tmp_12_cast_fu_253_p1(29 downto 0);
                    tmp_7_cast_reg_494(29 downto 0) <= tmp_7_cast_fu_225_p1(29 downto 0);
                    tmp_9_cast_reg_499(29 downto 0) <= tmp_9_cast_fu_239_p1(29 downto 0);
            end if;
        end if;
    end process;
    tmp_7_cast_reg_494(32 downto 30) <= "000";
    tmp_9_cast_reg_499(30) <= '0';
    tmp_12_cast_reg_506(32 downto 30) <= "000";
    tmp_11_cast_reg_519(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, ap_CS_fsm_state32, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, gmem_BVALID, ap_CS_fsm_state2, exitcond4_fu_257_p2, exitcond3_fu_314_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_355_p2, ap_sig_ioackin_gmem_ARREADY, ap_block_pp0_stage0_subdone, ap_sig_ioackin_gmem_AWREADY, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_fu_314_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond2_fu_355_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond2_fu_355_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accumulator_1_2_fu_471_p2 <= std_logic_vector(unsigned(result_reg_602) + unsigned(tmp1_fu_467_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(19);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(exitcond2_reg_545_pp1_iter2_reg, ap_enable_reg_pp1_iter3, gmem_RVALID)
    begin
                ap_block_pp1_stage0_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(exitcond2_reg_545_pp1_iter2_reg, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, gmem_RVALID, ap_block_state17_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(exitcond2_reg_545_pp1_iter2_reg, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, gmem_RVALID, ap_block_state17_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state17_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_01001_assign_proc : process(ap_enable_reg_pp1_iter3, exitcond2_reg_545_pp1_iter3_reg, gmem_RVALID)
    begin
                ap_block_pp1_stage1_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, exitcond2_reg_545_pp1_iter3_reg, gmem_RVALID, ap_block_state15_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage1_11001 <= (((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, exitcond2_reg_545_pp1_iter3_reg, gmem_RVALID, ap_block_state15_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage1_subdone <= (((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage2_01001_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond2_reg_545_pp1_iter2_reg, gmem_RVALID)
    begin
                ap_block_pp1_stage2_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage2_11001_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, exitcond2_reg_545_pp1_iter2_reg, gmem_RVALID, ap_block_state16_io)
    begin
                ap_block_pp1_stage2_11001 <= (((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, exitcond2_reg_545_pp1_iter2_reg, gmem_RVALID, ap_block_state16_io)
    begin
                ap_block_pp1_stage2_subdone <= (((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= (gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(exitcond2_reg_545, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;

        ap_block_state15_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(exitcond2_reg_545, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;

        ap_block_state16_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(exitcond2_reg_545, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state17_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;

        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage2_iter2_assign_proc : process(exitcond2_reg_545_pp1_iter2_reg, gmem_RVALID)
    begin
                ap_block_state22_pp1_stage2_iter2 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state23_pp1_stage0_iter3_assign_proc : process(exitcond2_reg_545_pp1_iter2_reg, gmem_RVALID)
    begin
                ap_block_state23_pp1_stage0_iter3 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state24_pp1_stage1_iter3_assign_proc : process(exitcond2_reg_545_pp1_iter3_reg, gmem_RVALID)
    begin
                ap_block_state24_pp1_stage1_iter3 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state25_pp1_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(exitcond2_reg_545_pp1_iter4_reg, ap_sig_ioackin_gmem_WREADY)
    begin
                ap_block_state27_io <= ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (exitcond2_reg_545_pp1_iter4_reg = ap_const_lv1_0));
    end process;

        ap_block_state27_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_547_assign_proc : process(ap_CS_fsm_pp1_stage1, exitcond2_reg_545, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_01001)
    begin
                ap_condition_547 <= ((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;


    ap_condition_559_assign_proc : process(exitcond2_reg_545, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_01001)
    begin
                ap_condition_559 <= ((ap_const_boolean_0 = ap_block_pp1_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;


    ap_condition_572_assign_proc : process(exitcond2_reg_545, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_01001)
    begin
                ap_condition_572 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0));
    end process;


    ap_condition_872_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, exitcond2_reg_545_pp1_iter4_reg)
    begin
                ap_condition_872 <= ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter4_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond3_fu_314_p2)
    begin
        if ((exitcond3_fu_314_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(exitcond2_fu_355_p2)
    begin
        if ((exitcond2_fu_355_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_257_p2)
    begin
        if (((exitcond4_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j1_phi_fu_207_p4_assign_proc : process(exitcond2_reg_545, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, j1_reg_203, j_2_reg_549)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0))) then 
            ap_phi_mux_j1_phi_fu_207_p4 <= j_2_reg_549;
        else 
            ap_phi_mux_j1_phi_fu_207_p4 <= j1_reg_203;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_195_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, j_reg_191, exitcond3_reg_530, j_1_reg_534)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_reg_530 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_195_p4 <= j_1_reg_534;
        else 
            ap_phi_mux_j_phi_fu_195_p4 <= j_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_257_p2)
    begin
        if (((exitcond4_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond2_fu_355_p2 <= "1" when (ap_phi_mux_j1_phi_fu_207_p4 = ap_const_lv2_3) else "0";
    exitcond3_fu_314_p2 <= "1" when (ap_phi_mux_j_phi_fu_195_p4 = ap_const_lv2_3) else "0";
    exitcond4_fu_257_p2 <= "1" when (i_reg_180 = ap_const_lv2_3) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state3, gmem_addr_reg_524, matrix24_sum_cast_fu_384_p1, matrix24_sum8_cast_fu_415_p1, matrix24_sum9_cast_fu_433_p1, ap_reg_ioackin_gmem_ARREADY, ap_condition_547, ap_condition_559, ap_condition_572)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_572)) then 
                gmem_ARADDR <= matrix24_sum9_cast_fu_433_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_559)) then 
                gmem_ARADDR <= matrix24_sum8_cast_fu_415_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_547)) then 
                gmem_ARADDR <= matrix24_sum_cast_fu_384_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                gmem_ARADDR <= gmem_addr_reg_524;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage1, exitcond2_reg_545, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_reg_ioackin_gmem_ARREADY, ap_block_pp1_stage1_01001, ap_block_pp1_stage2_01001, ap_block_pp1_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0)))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARLEN <= ap_const_lv32_3;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage1, exitcond2_reg_545, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_reg_ioackin_gmem_ARREADY, ap_block_pp1_stage1_01001, ap_block_pp1_stage2_01001, ap_block_pp1_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state13, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state32, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, exitcond2_reg_545_pp1_iter2_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, exitcond2_reg_545_pp1_iter3_reg, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, exitcond2_reg_545_pp1_iter4_reg, ap_block_pp1_stage1_01001, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_01001) and (ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter4_reg = ap_const_lv1_0))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, exitcond2_reg_545, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (exitcond2_reg_545 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage2, exitcond2_reg_545_pp1_iter2_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, exitcond2_reg_545_pp1_iter3_reg)
    begin
        if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (exitcond2_reg_545_pp1_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, ap_block_pp1_stage1, exitcond2_reg_545_pp1_iter4_reg)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond2_reg_545_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_263_p2 <= std_logic_vector(unsigned(i_reg_180) + unsigned(ap_const_lv2_1));
    i_cast8_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_180),5));
    j1_cast3_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_203),4));
    j1_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_203),3));
    j_1_fu_320_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_195_p4) + unsigned(ap_const_lv2_1));
    j_2_fu_361_p2 <= std_logic_vector(unsigned(ap_phi_mux_j1_phi_fu_207_p4) + unsigned(ap_const_lv2_1));
    matrix12_sum_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matrix12_sum_fu_299_p2),64));
    matrix12_sum_fu_299_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_295_p1) + unsigned(tmp_12_cast_reg_506));
    matrix24_sum8_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matrix24_sum8_reg_565),64));
    matrix24_sum8_fu_404_p2 <= std_logic_vector(unsigned(tmp_8_1_cast_fu_400_p1) + unsigned(tmp_9_cast_reg_499));
    matrix24_sum9_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matrix24_sum9_reg_581),64));
    matrix24_sum9_fu_428_p2 <= std_logic_vector(unsigned(tmp_8_2_cast_fu_425_p1) + unsigned(tmp_9_cast_reg_499));
    matrix24_sum_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matrix24_sum_reg_554),64));
    matrix24_sum_fu_371_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_367_p1) + unsigned(tmp_9_cast_reg_499));
    output_matrix6_sum_c_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_matrix6_sum_fu_341_p2),64));
    output_matrix6_sum_fu_341_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_494) + unsigned(tmp_11_cast_reg_519));
    p_shl_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_273_p3),5));
    p_shl_fu_273_p3 <= (i_reg_180 & ap_const_lv2_0);
    result_1_fu_454_p0 <= row1_2_1_fu_90;
    result_1_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_454_p0) * signed(gmem_addr_3_read_reg_597))), 32));
    result_2_fu_462_p0 <= row1_2_2_fu_94;
    result_2_fu_462_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_2_fu_462_p0) * signed(gmem_addr_4_read_reg_607))), 32));
    result_fu_446_p0 <= row1_2_fu_86;
    result_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_446_p0) * signed(gmem_addr_2_read_reg_592))), 32));
    tmp1_fu_467_p2 <= std_logic_vector(unsigned(result_2_reg_617) + unsigned(result_1_reg_612));
    tmp_11_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_291_p1),33));
    tmp_12_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_243_p4),33));
    tmp_1_fu_215_p4 <= output_matrix(31 downto 2);
    tmp_2_fu_229_p4 <= matrix2(31 downto 2);
    tmp_4_fu_243_p4 <= matrix1(31 downto 2);
    tmp_7_1_fu_394_p2 <= std_logic_vector(unsigned(j1_cast_fu_380_p1) + unsigned(ap_const_lv3_3));
    tmp_7_2_fu_409_p2 <= std_logic_vector(unsigned(j1_cast3_fu_376_p1) + unsigned(ap_const_lv4_6));
    tmp_7_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_215_p4),33));
    tmp_8_1_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_1_fu_394_p2),31));
    tmp_8_2_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_2_reg_570),31));
    tmp_8_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j1_phi_fu_207_p4),31));
    tmp_9_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_229_p4),31));
    tmp_fu_285_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_281_p1) - unsigned(i_cast8_fu_269_p1));
        tmp_s_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_285_p2),32));

end behav;
