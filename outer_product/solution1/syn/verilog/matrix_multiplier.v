// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_multiplier,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=118,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=1373,HLS_SYN_LUT=1687,HLS_VERSION=2018_3}" *)

module matrix_multiplier (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_pp0_stage0 = 20'd512;
parameter    ap_ST_fsm_state12 = 20'd1024;
parameter    ap_ST_fsm_state13 = 20'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 20'd4096;
parameter    ap_ST_fsm_pp1_stage1 = 20'd8192;
parameter    ap_ST_fsm_pp1_stage2 = 20'd16384;
parameter    ap_ST_fsm_state28 = 20'd32768;
parameter    ap_ST_fsm_state29 = 20'd65536;
parameter    ap_ST_fsm_state30 = 20'd131072;
parameter    ap_ST_fsm_state31 = 20'd262144;
parameter    ap_ST_fsm_state32 = 20'd524288;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] matrix1;
wire   [31:0] matrix2;
wire   [31:0] output_matrix;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state13;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond2_reg_545;
reg   [0:0] exitcond2_reg_545_pp1_iter4_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state32;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage2;
reg   [0:0] exitcond2_reg_545_pp1_iter2_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond2_reg_545_pp1_iter3_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [1:0] j_reg_191;
reg   [1:0] j1_reg_203;
wire   [32:0] tmp_7_cast_fu_225_p1;
reg   [32:0] tmp_7_cast_reg_494;
wire   [30:0] tmp_9_cast_fu_239_p1;
reg   [30:0] tmp_9_cast_reg_499;
wire   [32:0] tmp_12_cast_fu_253_p1;
reg   [32:0] tmp_12_cast_reg_506;
wire   [1:0] i_1_fu_263_p2;
reg   [1:0] i_1_reg_514;
wire    ap_CS_fsm_state2;
wire   [32:0] tmp_11_cast_fu_295_p1;
reg   [32:0] tmp_11_cast_reg_519;
wire   [0:0] exitcond4_fu_257_p2;
reg   [31:0] gmem_addr_reg_524;
wire   [0:0] exitcond3_fu_314_p2;
reg   [0:0] exitcond3_reg_530;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] j_1_fu_320_p2;
reg   [1:0] j_1_reg_534;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_1_reg_539;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond2_fu_355_p2;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state17_io;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_state23_pp1_stage0_iter3;
wire    ap_block_state26_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond2_reg_545_pp1_iter1_reg;
wire   [1:0] j_2_fu_361_p2;
reg   [1:0] j_2_reg_549;
wire   [30:0] matrix24_sum_fu_371_p2;
reg   [30:0] matrix24_sum_reg_554;
wire    ap_block_state15_pp1_stage1_iter0;
reg    ap_block_state15_io;
wire    ap_block_state18_pp1_stage1_iter1;
wire    ap_block_state21_pp1_stage1_iter2;
reg    ap_block_state24_pp1_stage1_iter3;
wire    ap_block_state27_pp1_stage1_iter4;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state27_io;
reg    ap_block_pp1_stage1_11001;
wire   [30:0] matrix24_sum8_fu_404_p2;
reg   [30:0] matrix24_sum8_reg_565;
wire   [3:0] tmp_7_2_fu_409_p2;
reg   [3:0] tmp_7_2_reg_570;
wire    ap_block_state16_pp1_stage2_iter0;
reg    ap_block_state16_io;
wire    ap_block_state19_pp1_stage2_iter1;
reg    ap_block_state22_pp1_stage2_iter2;
wire    ap_block_state25_pp1_stage2_iter3;
reg    ap_block_pp1_stage2_11001;
wire   [30:0] matrix24_sum9_fu_428_p2;
reg   [30:0] matrix24_sum9_reg_581;
reg  signed [31:0] gmem_addr_2_read_reg_592;
reg  signed [31:0] gmem_addr_3_read_reg_597;
wire   [31:0] result_fu_446_p2;
reg   [31:0] result_reg_602;
reg  signed [31:0] gmem_addr_4_read_reg_607;
wire   [31:0] result_1_fu_454_p2;
reg   [31:0] result_1_reg_612;
wire   [31:0] result_2_fu_462_p2;
reg   [31:0] result_2_reg_617;
wire   [31:0] accumulator_1_2_fu_471_p2;
reg   [31:0] accumulator_1_2_reg_622;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage1_subdone;
reg   [1:0] i_reg_180;
reg   [1:0] ap_phi_mux_j_phi_fu_195_p4;
reg   [1:0] ap_phi_mux_j1_phi_fu_207_p4;
wire   [63:0] matrix12_sum_cast_fu_304_p1;
wire   [63:0] output_matrix6_sum_c_fu_345_p1;
wire   [63:0] matrix24_sum_cast_fu_384_p1;
wire   [63:0] matrix24_sum8_cast_fu_415_p1;
wire   [63:0] matrix24_sum9_cast_fu_433_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_reg_ioackin_gmem_WREADY;
reg   [31:0] row1_2_fu_86;
reg   [31:0] row1_2_1_fu_90;
reg   [31:0] row1_2_2_fu_94;
wire   [29:0] tmp_1_fu_215_p4;
wire   [29:0] tmp_2_fu_229_p4;
wire   [29:0] tmp_4_fu_243_p4;
wire   [3:0] p_shl_fu_273_p3;
wire   [4:0] p_shl_cast_fu_281_p1;
wire   [4:0] i_cast8_fu_269_p1;
wire   [4:0] tmp_fu_285_p2;
wire  signed [31:0] tmp_s_fu_291_p1;
wire   [32:0] matrix12_sum_fu_299_p2;
wire   [32:0] output_matrix6_sum_fu_341_p2;
wire   [30:0] tmp_8_cast_fu_367_p1;
wire   [2:0] j1_cast_fu_380_p1;
wire   [2:0] tmp_7_1_fu_394_p2;
wire   [30:0] tmp_8_1_cast_fu_400_p1;
wire   [3:0] j1_cast3_fu_376_p1;
wire   [30:0] tmp_8_2_cast_fu_425_p1;
wire  signed [31:0] result_fu_446_p0;
wire  signed [31:0] result_1_fu_454_p0;
wire  signed [31:0] result_2_fu_462_p0;
wire   [31:0] tmp1_fu_467_p2;
reg   [19:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_872;
reg    ap_condition_547;
reg    ap_condition_559;
reg    ap_condition_572;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

matrix_multiplier_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
matrix_multiplier_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .matrix1(matrix1),
    .matrix2(matrix2),
    .output_matrix(output_matrix)
);

matrix_multiplier_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
matrix_multiplier_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_539),
    .I_AWID(1'd0),
    .I_AWLEN(32'd3),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(accumulator_1_2_reg_622),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp1_stage0_01001) & (gmem_ARREADY == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_01001) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_01001) & (gmem_ARREADY == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_872)) begin
            if ((1'b0 == ap_block_pp1_stage1_11001)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage1_01001) & (gmem_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        i_reg_180 <= i_1_reg_514;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_180 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        j1_reg_203 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0))) begin
        j1_reg_203 <= j_2_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_530 == 1'd0))) begin
        j_reg_191 <= j_1_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_191 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0))) begin
        accumulator_1_2_reg_622 <= accumulator_1_2_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond2_reg_545 <= exitcond2_fu_355_p2;
        exitcond2_reg_545_pp1_iter1_reg <= exitcond2_reg_545;
        exitcond2_reg_545_pp1_iter2_reg <= exitcond2_reg_545_pp1_iter1_reg;
        exitcond2_reg_545_pp1_iter3_reg <= exitcond2_reg_545_pp1_iter2_reg;
        exitcond2_reg_545_pp1_iter4_reg <= exitcond2_reg_545_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond3_reg_530 <= exitcond3_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_1_reg_539 <= output_matrix6_sum_c_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0))) begin
        gmem_addr_2_read_reg_592 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0))) begin
        gmem_addr_3_read_reg_597 <= gmem_RDATA;
        result_reg_602 <= result_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0))) begin
        gmem_addr_4_read_reg_607 <= gmem_RDATA;
        result_1_reg_612 <= result_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_257_p2 == 1'd0))) begin
        gmem_addr_reg_524 <= matrix12_sum_cast_fu_304_p1;
        tmp_11_cast_reg_519[31 : 0] <= tmp_11_cast_fu_295_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_514 <= i_1_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_1_reg_534 <= j_1_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_2_reg_549 <= j_2_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0))) begin
        matrix24_sum8_reg_565 <= matrix24_sum8_fu_404_p2;
        tmp_7_2_reg_570 <= tmp_7_2_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond2_reg_545 == 1'd0))) begin
        matrix24_sum9_reg_581 <= matrix24_sum9_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_fu_355_p2 == 1'd0))) begin
        matrix24_sum_reg_554 <= matrix24_sum_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0))) begin
        result_2_reg_617 <= result_2_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (j_reg_191 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row1_2_1_fu_90 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_reg_191 == 2'd1) & ~(j_reg_191 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row1_2_2_fu_94 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (j_reg_191 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row1_2_fu_86 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_12_cast_reg_506[29 : 0] <= tmp_12_cast_fu_253_p1[29 : 0];
        tmp_7_cast_reg_494[29 : 0] <= tmp_7_cast_fu_225_p1[29 : 0];
        tmp_9_cast_reg_499[29 : 0] <= tmp_9_cast_fu_239_p1[29 : 0];
    end
end

always @ (*) begin
    if ((exitcond3_fu_314_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_355_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_545 == 1'd0))) begin
        ap_phi_mux_j1_phi_fu_207_p4 = j_2_reg_549;
    end else begin
        ap_phi_mux_j1_phi_fu_207_p4 = j1_reg_203;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_530 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_195_p4 = j_1_reg_534;
    end else begin
        ap_phi_mux_j_phi_fu_195_p4 = j_reg_191;
    end
end

always @ (*) begin
    if (((exitcond4_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_572)) begin
            gmem_ARADDR = matrix24_sum9_cast_fu_433_p1;
        end else if ((1'b1 == ap_condition_559)) begin
            gmem_ARADDR = matrix24_sum8_cast_fu_415_p1;
        end else if ((1'b1 == ap_condition_547)) begin
            gmem_ARADDR = matrix24_sum_cast_fu_384_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_reg_524;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0)))) begin
        gmem_ARLEN = 32'd1;
    end else if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARLEN = 32'd3;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_reg_545 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_01001) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter4_reg == 1'd0))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_545 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2) & (exitcond2_reg_545 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0) & (1'b0 == ap_block_pp1_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_314_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_314_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond2_fu_355_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond2_fu_355_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_1_2_fu_471_p2 = (result_reg_602 + tmp1_fu_467_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp1_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp1_iter4 == 1'b1)));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = (((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = (((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (gmem_RVALID == 1'b0);
end

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_reg_545 == 1'd0));
end

assign ap_block_state15_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_reg_545 == 1'd0));
end

assign ap_block_state16_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_reg_545 == 1'd0));
end

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage2_iter2 = ((gmem_RVALID == 1'b0) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp1_stage0_iter3 = ((gmem_RVALID == 1'b0) & (exitcond2_reg_545_pp1_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp1_stage1_iter3 = ((gmem_RVALID == 1'b0) & (exitcond2_reg_545_pp1_iter3_reg == 1'd0));
end

assign ap_block_state25_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (exitcond2_reg_545_pp1_iter4_reg == 1'd0));
end

assign ap_block_state27_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_547 = ((1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545 == 1'd0));
end

always @ (*) begin
    ap_condition_559 = ((1'b0 == ap_block_pp1_stage2_01001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_reg_545 == 1'd0));
end

always @ (*) begin
    ap_condition_572 = ((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_545 == 1'd0));
end

always @ (*) begin
    ap_condition_872 = ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond2_reg_545_pp1_iter4_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_355_p2 = ((ap_phi_mux_j1_phi_fu_207_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_314_p2 = ((ap_phi_mux_j_phi_fu_195_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_257_p2 = ((i_reg_180 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_263_p2 = (i_reg_180 + 2'd1);

assign i_cast8_fu_269_p1 = i_reg_180;

assign j1_cast3_fu_376_p1 = j1_reg_203;

assign j1_cast_fu_380_p1 = j1_reg_203;

assign j_1_fu_320_p2 = (ap_phi_mux_j_phi_fu_195_p4 + 2'd1);

assign j_2_fu_361_p2 = (ap_phi_mux_j1_phi_fu_207_p4 + 2'd1);

assign matrix12_sum_cast_fu_304_p1 = matrix12_sum_fu_299_p2;

assign matrix12_sum_fu_299_p2 = (tmp_11_cast_fu_295_p1 + tmp_12_cast_reg_506);

assign matrix24_sum8_cast_fu_415_p1 = matrix24_sum8_reg_565;

assign matrix24_sum8_fu_404_p2 = (tmp_8_1_cast_fu_400_p1 + tmp_9_cast_reg_499);

assign matrix24_sum9_cast_fu_433_p1 = matrix24_sum9_reg_581;

assign matrix24_sum9_fu_428_p2 = (tmp_8_2_cast_fu_425_p1 + tmp_9_cast_reg_499);

assign matrix24_sum_cast_fu_384_p1 = matrix24_sum_reg_554;

assign matrix24_sum_fu_371_p2 = (tmp_8_cast_fu_367_p1 + tmp_9_cast_reg_499);

assign output_matrix6_sum_c_fu_345_p1 = output_matrix6_sum_fu_341_p2;

assign output_matrix6_sum_fu_341_p2 = (tmp_7_cast_reg_494 + tmp_11_cast_reg_519);

assign p_shl_cast_fu_281_p1 = p_shl_fu_273_p3;

assign p_shl_fu_273_p3 = {{i_reg_180}, {2'd0}};

assign result_1_fu_454_p0 = row1_2_1_fu_90;

assign result_1_fu_454_p2 = ($signed(result_1_fu_454_p0) * $signed(gmem_addr_3_read_reg_597));

assign result_2_fu_462_p0 = row1_2_2_fu_94;

assign result_2_fu_462_p2 = ($signed(result_2_fu_462_p0) * $signed(gmem_addr_4_read_reg_607));

assign result_fu_446_p0 = row1_2_fu_86;

assign result_fu_446_p2 = ($signed(result_fu_446_p0) * $signed(gmem_addr_2_read_reg_592));

assign tmp1_fu_467_p2 = (result_2_reg_617 + result_1_reg_612);

assign tmp_11_cast_fu_295_p1 = $unsigned(tmp_s_fu_291_p1);

assign tmp_12_cast_fu_253_p1 = tmp_4_fu_243_p4;

assign tmp_1_fu_215_p4 = {{output_matrix[31:2]}};

assign tmp_2_fu_229_p4 = {{matrix2[31:2]}};

assign tmp_4_fu_243_p4 = {{matrix1[31:2]}};

assign tmp_7_1_fu_394_p2 = (j1_cast_fu_380_p1 + 3'd3);

assign tmp_7_2_fu_409_p2 = (j1_cast3_fu_376_p1 + 4'd6);

assign tmp_7_cast_fu_225_p1 = tmp_1_fu_215_p4;

assign tmp_8_1_cast_fu_400_p1 = tmp_7_1_fu_394_p2;

assign tmp_8_2_cast_fu_425_p1 = tmp_7_2_reg_570;

assign tmp_8_cast_fu_367_p1 = ap_phi_mux_j1_phi_fu_207_p4;

assign tmp_9_cast_fu_239_p1 = tmp_2_fu_229_p4;

assign tmp_fu_285_p2 = (p_shl_cast_fu_281_p1 - i_cast8_fu_269_p1);

assign tmp_s_fu_291_p1 = $signed(tmp_fu_285_p2);

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_494[32:30] <= 3'b000;
    tmp_9_cast_reg_499[30] <= 1'b0;
    tmp_12_cast_reg_506[32:30] <= 3'b000;
    tmp_11_cast_reg_519[32] <= 1'b0;
end

endmodule //matrix_multiplier
