-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity outer_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    agg_result_rowptr_ce0 : OUT STD_LOGIC;
    agg_result_rowptr_we0 : OUT STD_LOGIC;
    agg_result_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    agg_result_rowptr_ce1 : OUT STD_LOGIC;
    agg_result_rowptr_we1 : OUT STD_LOGIC;
    agg_result_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_colind_ce0 : OUT STD_LOGIC;
    agg_result_colind_we0 : OUT STD_LOGIC;
    agg_result_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_colind_ce1 : OUT STD_LOGIC;
    agg_result_colind_we1 : OUT STD_LOGIC;
    agg_result_colind_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_data_V_ce0 : OUT STD_LOGIC;
    agg_result_data_V_we0 : OUT STD_LOGIC;
    agg_result_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_data_V_ce1 : OUT STD_LOGIC;
    agg_result_data_V_we1 : OUT STD_LOGIC;
    agg_result_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_colptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_csc_colptr_ce0 : OUT STD_LOGIC;
    x_csc_colptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_colptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_csc_colptr_ce1 : OUT STD_LOGIC;
    x_csc_colptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_rowind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_csc_rowind_ce0 : OUT STD_LOGIC;
    x_csc_rowind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_rowind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_csc_rowind_ce1 : OUT STD_LOGIC;
    x_csc_rowind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_csc_data_V_ce0 : OUT STD_LOGIC;
    x_csc_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_csc_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_csc_data_V_ce1 : OUT STD_LOGIC;
    x_csc_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    y_csr_rowptr_ce0 : OUT STD_LOGIC;
    y_csr_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    y_csr_rowptr_ce1 : OUT STD_LOGIC;
    y_csr_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_csr_colind_ce0 : OUT STD_LOGIC;
    y_csr_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_csr_colind_ce1 : OUT STD_LOGIC;
    y_csr_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_csr_data_V_ce0 : OUT STD_LOGIC;
    y_csr_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_csr_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_csr_data_V_ce1 : OUT STD_LOGIC;
    y_csr_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of outer_product is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "outer_product,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=23,HLS_SYN_DSP=4,HLS_SYN_FF=1865,HLS_SYN_LUT=4733,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_col_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_col_V_ce0 : STD_LOGIC;
    signal out_col_V_we0 : STD_LOGIC;
    signal out_col_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_col_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_row_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_row_V_ce0 : STD_LOGIC;
    signal out_row_V_we0 : STD_LOGIC;
    signal out_row_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_row_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_3813_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_6020 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_3819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_6026 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_2_i_fu_3824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_reg_6036 : STD_LOGIC_VECTOR (63 downto 0);
    signal inp_csc_colptr_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal inp_csc_colptr_assig_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_idx_reg_6051 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_i_fu_3828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_i_reg_6056 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_fu_3838_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_6064 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_i_fu_3844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_reg_6069 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_3832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_3849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_reg_6073 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_5_i_fu_3854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_3869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal inp_csr_rowptr_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_idx_1_reg_6106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal inp_csr_rowptr_assig_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_idx_1_reg_6111 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_i1_fu_3875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_i1_reg_6116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_1_fu_3885_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_6124 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_i1_fu_3891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i1_reg_6129 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_fu_3879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i1_fu_3896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i1_reg_6133 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_3901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_6143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_7_i1_fu_3907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_3922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal p_i0_0_i1_cast5_fu_3928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_i0_0_i1_cast5_reg_6160 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal p_i0_1_fu_3939_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_i0_1_reg_6168 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_3933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i0_0_i_cast6_fu_4045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_i0_0_i_cast6_reg_6178 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal p_i0_fu_4056_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_i0_reg_6186 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_4050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inp_csr_data_V_assig_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csr_data_V_assig_ce0 : STD_LOGIC;
    signal inp_csr_data_V_assig_we0 : STD_LOGIC;
    signal inp_csr_data_V_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_csr_data_V_assig_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csr_data_V_assig_ce1 : STD_LOGIC;
    signal inp_csr_data_V_assig_we1 : STD_LOGIC;
    signal inp_csr_colind_assig_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csr_colind_assig_ce0 : STD_LOGIC;
    signal inp_csr_colind_assig_we0 : STD_LOGIC;
    signal inp_csr_colind_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_csr_colind_assig_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csr_colind_assig_ce1 : STD_LOGIC;
    signal inp_csr_colind_assig_we1 : STD_LOGIC;
    signal inp_csr_rowptr_assig_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal inp_csr_rowptr_assig_ce0 : STD_LOGIC;
    signal inp_csr_rowptr_assig_we0 : STD_LOGIC;
    signal inp_csr_rowptr_assig_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal inp_csr_rowptr_assig_ce1 : STD_LOGIC;
    signal inp_csr_rowptr_assig_we1 : STD_LOGIC;
    signal inp_csc_data_V_assig_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csc_data_V_assig_ce0 : STD_LOGIC;
    signal inp_csc_data_V_assig_we0 : STD_LOGIC;
    signal inp_csc_data_V_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_csc_data_V_assig_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csc_data_V_assig_ce1 : STD_LOGIC;
    signal inp_csc_data_V_assig_we1 : STD_LOGIC;
    signal inp_csc_rowind_assig_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csc_rowind_assig_ce0 : STD_LOGIC;
    signal inp_csc_rowind_assig_we0 : STD_LOGIC;
    signal inp_csc_rowind_assig_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_csc_rowind_assig_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal inp_csc_rowind_assig_ce1 : STD_LOGIC;
    signal inp_csc_rowind_assig_we1 : STD_LOGIC;
    signal inp_csc_colptr_assig_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal inp_csc_colptr_assig_ce0 : STD_LOGIC;
    signal inp_csc_colptr_assig_we0 : STD_LOGIC;
    signal inp_csc_colptr_assig_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal inp_csc_colptr_assig_ce1 : STD_LOGIC;
    signal inp_csc_colptr_assig_we1 : STD_LOGIC;
    signal partial_z_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_rowptr_ce0 : STD_LOGIC;
    signal partial_z_rowptr_we0 : STD_LOGIC;
    signal partial_z_rowptr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_rowptr_ce1 : STD_LOGIC;
    signal partial_z_rowptr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_colind_ce0 : STD_LOGIC;
    signal partial_z_colind_we0 : STD_LOGIC;
    signal partial_z_colind_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_colind_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_colind_ce1 : STD_LOGIC;
    signal partial_z_colind_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_data_V_ce0 : STD_LOGIC;
    signal partial_z_data_V_we0 : STD_LOGIC;
    signal partial_z_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_data_V_ce1 : STD_LOGIC;
    signal partial_z_data_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_04_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_04_ce0 : STD_LOGIC;
    signal p_04_we0 : STD_LOGIC;
    signal p_04_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_04_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_04_ce1 : STD_LOGIC;
    signal p_04_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_15_ce0 : STD_LOGIC;
    signal p_15_we0 : STD_LOGIC;
    signal p_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_15_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_15_ce1 : STD_LOGIC;
    signal p_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_26_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_26_ce0 : STD_LOGIC;
    signal p_26_we0 : STD_LOGIC;
    signal p_26_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_07_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_07_ce0 : STD_LOGIC;
    signal p_07_we0 : STD_LOGIC;
    signal p_07_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_07_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_07_ce1 : STD_LOGIC;
    signal p_07_we1 : STD_LOGIC;
    signal p_07_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_18_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_18_ce0 : STD_LOGIC;
    signal p_18_we0 : STD_LOGIC;
    signal p_18_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_18_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_18_ce1 : STD_LOGIC;
    signal p_18_we1 : STD_LOGIC;
    signal p_29_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_29_ce0 : STD_LOGIC;
    signal p_29_we0 : STD_LOGIC;
    signal p_29_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_29_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_29_ce1 : STD_LOGIC;
    signal p_29_we1 : STD_LOGIC;
    signal p_010_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_010_ce0 : STD_LOGIC;
    signal p_010_we0 : STD_LOGIC;
    signal p_010_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_010_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_010_ce1 : STD_LOGIC;
    signal p_010_we1 : STD_LOGIC;
    signal p_010_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_111_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_111_ce0 : STD_LOGIC;
    signal p_111_we0 : STD_LOGIC;
    signal p_111_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_111_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_111_ce1 : STD_LOGIC;
    signal p_111_we1 : STD_LOGIC;
    signal p_212_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_212_ce0 : STD_LOGIC;
    signal p_212_we0 : STD_LOGIC;
    signal p_212_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_212_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_212_ce1 : STD_LOGIC;
    signal p_212_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_agg_result_rowptr_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_rowptr_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_agg_result_rowptr_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_rowptr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_rowptr_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_agg_result_colind_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_colind_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_colind_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_colind_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_agg_result_colind_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_colind_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_colind_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_agg_result_data_V_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_data_V_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_agg_result_data_V_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_agg_result_data_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_agg_result_data_V_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr1_rowptr_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_rowptr_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr1_rowptr_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_rowptr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_rowptr_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr1_colind_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_colind_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_colind_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_colind_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr1_colind_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_colind_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_colind_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr1_data_V_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_data_V_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr1_data_V_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr1_data_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr1_data_V_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr2_rowptr_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr2_rowptr_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr2_rowptr_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_rowptr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr2_rowptr_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr2_colind_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_colind_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr2_colind_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_colind_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr2_colind_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_colind_d1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_3783_csr2_colind_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr2_data_V_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr2_data_V_we0 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_data_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_3783_csr2_data_V_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_csr2_data_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_3783_csr2_data_V_we1 : STD_LOGIC;
    signal grp_accumulate_fu_3783_ap_start : STD_LOGIC;
    signal grp_accumulate_fu_3783_ap_done : STD_LOGIC;
    signal grp_accumulate_fu_3783_ap_ready : STD_LOGIC;
    signal grp_accumulate_fu_3783_ap_idle : STD_LOGIC;
    signal grp_accumulate_fu_3783_ap_continue : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_ap_start : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_ap_done : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_ap_idle : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_ap_ready : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_3796_agg_result_rowptr_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_rowptr_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multiply_row_col_fu_3796_agg_result_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_multiply_row_col_fu_3796_agg_result_colind_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_colind_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_colind_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_3796_agg_result_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_multiply_row_col_fu_3796_agg_result_data_V_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_data_V_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_agg_result_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multiply_row_col_fu_3796_row_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_3796_row_V_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_3796_col_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_multiply_row_col_fu_3796_col_V_ce0 : STD_LOGIC;
    signal col_assign_reg_3681 : STD_LOGIC_VECTOR (2 downto 0);
    signal j4_i_reg_3693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_i_reg_3703 : STD_LOGIC_VECTOR (2 downto 0);
    signal j4_i_be_reg_3715 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_i_reg_3727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_i1_reg_3737 : STD_LOGIC_VECTOR (2 downto 0);
    signal j2_i_be_reg_3749 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i0_0_i1_reg_3761 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal p_i0_0_i_reg_3772 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_accumulate_fu_3783_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_sync_grp_accumulate_fu_3783_ap_ready : STD_LOGIC;
    signal ap_sync_grp_accumulate_fu_3783_ap_done : STD_LOGIC;
    signal ap_block_state44_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_accumulate_fu_3783_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_accumulate_fu_3783_ap_done : STD_LOGIC := '0';
    signal grp_multiply_row_col_fu_3796_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_6_i_fu_3859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i_fu_3864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_fu_3912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_3917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal extLd_fu_3945_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_3950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd2_fu_3955_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd3_fu_3960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd4_fu_3965_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd5_fu_3970_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal extLd6_fu_3975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd7_fu_3980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal extLd8_fu_3985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd9_fu_3990_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal extLd10_fu_3995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd11_fu_4000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal extLd12_fu_4005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd13_fu_4010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal extLd14_fu_4015_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd15_fu_4020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal extLd16_fu_4025_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd17_fu_4030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd18_fu_4035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd19_fu_4040_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal exitcond_fu_3807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component accumulate IS
    port (
        agg_result_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        agg_result_rowptr_ce0 : OUT STD_LOGIC;
        agg_result_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_rowptr_we0 : OUT STD_LOGIC;
        agg_result_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        agg_result_rowptr_ce1 : OUT STD_LOGIC;
        agg_result_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_rowptr_we1 : OUT STD_LOGIC;
        agg_result_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_colind_ce0 : OUT STD_LOGIC;
        agg_result_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_we0 : OUT STD_LOGIC;
        agg_result_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_colind_ce1 : OUT STD_LOGIC;
        agg_result_colind_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_we1 : OUT STD_LOGIC;
        agg_result_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_data_V_ce0 : OUT STD_LOGIC;
        agg_result_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_data_V_we0 : OUT STD_LOGIC;
        agg_result_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_data_V_ce1 : OUT STD_LOGIC;
        agg_result_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_data_V_we1 : OUT STD_LOGIC;
        csr1_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr1_rowptr_ce0 : OUT STD_LOGIC;
        csr1_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_we0 : OUT STD_LOGIC;
        csr1_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr1_rowptr_ce1 : OUT STD_LOGIC;
        csr1_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_we1 : OUT STD_LOGIC;
        csr1_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_colind_ce0 : OUT STD_LOGIC;
        csr1_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_colind_we0 : OUT STD_LOGIC;
        csr1_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_colind_ce1 : OUT STD_LOGIC;
        csr1_colind_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_colind_we1 : OUT STD_LOGIC;
        csr1_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_data_V_ce0 : OUT STD_LOGIC;
        csr1_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_data_V_we0 : OUT STD_LOGIC;
        csr1_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_data_V_ce1 : OUT STD_LOGIC;
        csr1_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_data_V_we1 : OUT STD_LOGIC;
        csr2_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce0 : OUT STD_LOGIC;
        csr2_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_we0 : OUT STD_LOGIC;
        csr2_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce1 : OUT STD_LOGIC;
        csr2_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_we1 : OUT STD_LOGIC;
        csr2_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_colind_ce0 : OUT STD_LOGIC;
        csr2_colind_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_colind_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        csr2_colind_we0 : OUT STD_LOGIC;
        csr2_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_colind_ce1 : OUT STD_LOGIC;
        csr2_colind_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_colind_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
        csr2_colind_we1 : OUT STD_LOGIC;
        csr2_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_data_V_ce0 : OUT STD_LOGIC;
        csr2_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr2_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_data_V_we0 : OUT STD_LOGIC;
        csr2_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_data_V_ce1 : OUT STD_LOGIC;
        csr2_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr2_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_data_V_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component multiply_row_col IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        agg_result_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        agg_result_rowptr_ce0 : OUT STD_LOGIC;
        agg_result_rowptr_we0 : OUT STD_LOGIC;
        agg_result_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_colind_ce0 : OUT STD_LOGIC;
        agg_result_colind_we0 : OUT STD_LOGIC;
        agg_result_colind_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        agg_result_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_data_V_ce0 : OUT STD_LOGIC;
        agg_result_data_V_we0 : OUT STD_LOGIC;
        agg_result_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        row_V_ce0 : OUT STD_LOGIC;
        row_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        col_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        col_V_ce0 : OUT STD_LOGIC;
        col_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_out_col_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_out_row_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_inp_csr_data_V_assig IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_inp_csr_rowptr_assig IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_partial_z_rowptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_partial_z_colind IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component outer_product_partial_z_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_p_26 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_p_07 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_p_111 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    out_col_V_U : component outer_product_out_col_V
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_col_V_address0,
        ce0 => out_col_V_ce0,
        we0 => out_col_V_we0,
        d0 => out_col_V_d0,
        q0 => out_col_V_q0);

    out_row_V_U : component outer_product_out_row_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_row_V_address0,
        ce0 => out_row_V_ce0,
        we0 => out_row_V_we0,
        d0 => out_row_V_d0,
        q0 => out_row_V_q0);

    inp_csr_data_V_assig_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csr_data_V_assig_address0,
        ce0 => inp_csr_data_V_assig_ce0,
        we0 => inp_csr_data_V_assig_we0,
        d0 => y_csr_data_V_q0,
        q0 => inp_csr_data_V_assig_q0,
        address1 => inp_csr_data_V_assig_address1,
        ce1 => inp_csr_data_V_assig_ce1,
        we1 => inp_csr_data_V_assig_we1,
        d1 => y_csr_data_V_q1);

    inp_csr_colind_assig_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csr_colind_assig_address0,
        ce0 => inp_csr_colind_assig_ce0,
        we0 => inp_csr_colind_assig_we0,
        d0 => y_csr_colind_q0,
        q0 => inp_csr_colind_assig_q0,
        address1 => inp_csr_colind_assig_address1,
        ce1 => inp_csr_colind_assig_ce1,
        we1 => inp_csr_colind_assig_we1,
        d1 => y_csr_colind_q1);

    inp_csr_rowptr_assig_U : component outer_product_inp_csr_rowptr_assig
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csr_rowptr_assig_address0,
        ce0 => inp_csr_rowptr_assig_ce0,
        we0 => inp_csr_rowptr_assig_we0,
        d0 => y_csr_rowptr_q0,
        q0 => inp_csr_rowptr_assig_q0,
        address1 => inp_csr_rowptr_assig_address1,
        ce1 => inp_csr_rowptr_assig_ce1,
        we1 => inp_csr_rowptr_assig_we1,
        d1 => y_csr_rowptr_q1,
        q1 => inp_csr_rowptr_assig_q1);

    inp_csc_data_V_assig_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csc_data_V_assig_address0,
        ce0 => inp_csc_data_V_assig_ce0,
        we0 => inp_csc_data_V_assig_we0,
        d0 => x_csc_data_V_q0,
        q0 => inp_csc_data_V_assig_q0,
        address1 => inp_csc_data_V_assig_address1,
        ce1 => inp_csc_data_V_assig_ce1,
        we1 => inp_csc_data_V_assig_we1,
        d1 => x_csc_data_V_q1);

    inp_csc_rowind_assig_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csc_rowind_assig_address0,
        ce0 => inp_csc_rowind_assig_ce0,
        we0 => inp_csc_rowind_assig_we0,
        d0 => x_csc_rowind_q0,
        q0 => inp_csc_rowind_assig_q0,
        address1 => inp_csc_rowind_assig_address1,
        ce1 => inp_csc_rowind_assig_ce1,
        we1 => inp_csc_rowind_assig_we1,
        d1 => x_csc_rowind_q1);

    inp_csc_colptr_assig_U : component outer_product_inp_csr_rowptr_assig
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_csc_colptr_assig_address0,
        ce0 => inp_csc_colptr_assig_ce0,
        we0 => inp_csc_colptr_assig_we0,
        d0 => x_csc_colptr_q0,
        q0 => inp_csc_colptr_assig_q0,
        address1 => inp_csc_colptr_assig_address1,
        ce1 => inp_csc_colptr_assig_ce1,
        we1 => inp_csc_colptr_assig_we1,
        d1 => x_csc_colptr_q1,
        q1 => inp_csc_colptr_assig_q1);

    partial_z_rowptr_U : component outer_product_partial_z_rowptr
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_z_rowptr_address0,
        ce0 => partial_z_rowptr_ce0,
        we0 => partial_z_rowptr_we0,
        d0 => grp_multiply_row_col_fu_3796_agg_result_rowptr_d0,
        q0 => partial_z_rowptr_q0,
        address1 => partial_z_rowptr_address1,
        ce1 => partial_z_rowptr_ce1,
        q1 => partial_z_rowptr_q1);

    partial_z_colind_U : component outer_product_partial_z_colind
    generic map (
        DataWidth => 3,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_z_colind_address0,
        ce0 => partial_z_colind_ce0,
        we0 => partial_z_colind_we0,
        d0 => grp_multiply_row_col_fu_3796_agg_result_colind_d0,
        q0 => partial_z_colind_q0,
        address1 => partial_z_colind_address1,
        ce1 => partial_z_colind_ce1,
        q1 => partial_z_colind_q1);

    partial_z_data_V_U : component outer_product_partial_z_data_V
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_z_data_V_address0,
        ce0 => partial_z_data_V_ce0,
        we0 => partial_z_data_V_we0,
        d0 => grp_multiply_row_col_fu_3796_agg_result_data_V_d0,
        q0 => partial_z_data_V_q0,
        address1 => partial_z_data_V_address1,
        ce1 => partial_z_data_V_ce1,
        q1 => partial_z_data_V_q1);

    p_04_U : component outer_product_partial_z_rowptr
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_04_address0,
        ce0 => p_04_ce0,
        we0 => p_04_we0,
        d0 => grp_accumulate_fu_3783_agg_result_rowptr_d0,
        q0 => p_04_q0,
        address1 => p_04_address1,
        ce1 => p_04_ce1,
        q1 => p_04_q1);

    p_15_U : component outer_product_partial_z_data_V
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_15_address0,
        ce0 => p_15_ce0,
        we0 => p_15_we0,
        d0 => grp_accumulate_fu_3783_agg_result_colind_d0,
        q0 => p_15_q0,
        address1 => p_15_address1,
        ce1 => p_15_ce1,
        q1 => p_15_q1);

    p_26_U : component outer_product_p_26
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_26_address0,
        ce0 => p_26_ce0,
        we0 => p_26_we0,
        d0 => grp_accumulate_fu_3783_agg_result_data_V_d0,
        q0 => p_26_q0);

    p_07_U : component outer_product_p_07
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_07_address0,
        ce0 => p_07_ce0,
        we0 => p_07_we0,
        d0 => agg_result_rowptr_q0,
        q0 => p_07_q0,
        address1 => p_07_address1,
        ce1 => p_07_ce1,
        we1 => p_07_we1,
        d1 => agg_result_rowptr_q1,
        q1 => p_07_q1);

    p_18_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_18_address0,
        ce0 => p_18_ce0,
        we0 => p_18_we0,
        d0 => agg_result_colind_q0,
        q0 => p_18_q0,
        address1 => p_18_address1,
        ce1 => p_18_ce1,
        we1 => p_18_we1,
        d1 => agg_result_colind_q1);

    p_29_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_29_address0,
        ce0 => p_29_ce0,
        we0 => p_29_we0,
        d0 => agg_result_data_V_q0,
        q0 => p_29_q0,
        address1 => p_29_address1,
        ce1 => p_29_ce1,
        we1 => p_29_we1,
        d1 => agg_result_data_V_q1);

    p_010_U : component outer_product_p_07
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_010_address0,
        ce0 => p_010_ce0,
        we0 => p_010_we0,
        d0 => partial_z_rowptr_q0,
        q0 => p_010_q0,
        address1 => p_010_address1,
        ce1 => p_010_ce1,
        we1 => p_010_we1,
        d1 => partial_z_rowptr_q1,
        q1 => p_010_q1);

    p_111_U : component outer_product_p_111
    generic map (
        DataWidth => 3,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_111_address0,
        ce0 => p_111_ce0,
        we0 => p_111_we0,
        d0 => partial_z_colind_q0,
        q0 => p_111_q0,
        address1 => p_111_address1,
        ce1 => p_111_ce1,
        we1 => p_111_we1,
        d1 => partial_z_colind_q1);

    p_212_U : component outer_product_inp_csr_data_V_assig
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_212_address0,
        ce0 => p_212_ce0,
        we0 => p_212_we0,
        d0 => partial_z_data_V_q0,
        q0 => p_212_q0,
        address1 => p_212_address1,
        ce1 => p_212_ce1,
        we1 => p_212_we1,
        d1 => partial_z_data_V_q1);

    grp_accumulate_fu_3783 : component accumulate
    port map (
        agg_result_rowptr_address0 => grp_accumulate_fu_3783_agg_result_rowptr_address0,
        agg_result_rowptr_ce0 => grp_accumulate_fu_3783_agg_result_rowptr_ce0,
        agg_result_rowptr_d0 => grp_accumulate_fu_3783_agg_result_rowptr_d0,
        agg_result_rowptr_q0 => p_04_q0,
        agg_result_rowptr_we0 => grp_accumulate_fu_3783_agg_result_rowptr_we0,
        agg_result_rowptr_address1 => grp_accumulate_fu_3783_agg_result_rowptr_address1,
        agg_result_rowptr_ce1 => grp_accumulate_fu_3783_agg_result_rowptr_ce1,
        agg_result_rowptr_d1 => grp_accumulate_fu_3783_agg_result_rowptr_d1,
        agg_result_rowptr_q1 => ap_const_lv32_0,
        agg_result_rowptr_we1 => grp_accumulate_fu_3783_agg_result_rowptr_we1,
        agg_result_colind_address0 => grp_accumulate_fu_3783_agg_result_colind_address0,
        agg_result_colind_ce0 => grp_accumulate_fu_3783_agg_result_colind_ce0,
        agg_result_colind_d0 => grp_accumulate_fu_3783_agg_result_colind_d0,
        agg_result_colind_q0 => ap_const_lv32_0,
        agg_result_colind_we0 => grp_accumulate_fu_3783_agg_result_colind_we0,
        agg_result_colind_address1 => grp_accumulate_fu_3783_agg_result_colind_address1,
        agg_result_colind_ce1 => grp_accumulate_fu_3783_agg_result_colind_ce1,
        agg_result_colind_d1 => grp_accumulate_fu_3783_agg_result_colind_d1,
        agg_result_colind_q1 => ap_const_lv32_0,
        agg_result_colind_we1 => grp_accumulate_fu_3783_agg_result_colind_we1,
        agg_result_data_V_address0 => grp_accumulate_fu_3783_agg_result_data_V_address0,
        agg_result_data_V_ce0 => grp_accumulate_fu_3783_agg_result_data_V_ce0,
        agg_result_data_V_d0 => grp_accumulate_fu_3783_agg_result_data_V_d0,
        agg_result_data_V_q0 => ap_const_lv32_0,
        agg_result_data_V_we0 => grp_accumulate_fu_3783_agg_result_data_V_we0,
        agg_result_data_V_address1 => grp_accumulate_fu_3783_agg_result_data_V_address1,
        agg_result_data_V_ce1 => grp_accumulate_fu_3783_agg_result_data_V_ce1,
        agg_result_data_V_d1 => grp_accumulate_fu_3783_agg_result_data_V_d1,
        agg_result_data_V_q1 => ap_const_lv32_0,
        agg_result_data_V_we1 => grp_accumulate_fu_3783_agg_result_data_V_we1,
        csr1_rowptr_address0 => grp_accumulate_fu_3783_csr1_rowptr_address0,
        csr1_rowptr_ce0 => grp_accumulate_fu_3783_csr1_rowptr_ce0,
        csr1_rowptr_d0 => grp_accumulate_fu_3783_csr1_rowptr_d0,
        csr1_rowptr_q0 => p_07_q0,
        csr1_rowptr_we0 => grp_accumulate_fu_3783_csr1_rowptr_we0,
        csr1_rowptr_address1 => grp_accumulate_fu_3783_csr1_rowptr_address1,
        csr1_rowptr_ce1 => grp_accumulate_fu_3783_csr1_rowptr_ce1,
        csr1_rowptr_d1 => grp_accumulate_fu_3783_csr1_rowptr_d1,
        csr1_rowptr_q1 => p_07_q1,
        csr1_rowptr_we1 => grp_accumulate_fu_3783_csr1_rowptr_we1,
        csr1_colind_address0 => grp_accumulate_fu_3783_csr1_colind_address0,
        csr1_colind_ce0 => grp_accumulate_fu_3783_csr1_colind_ce0,
        csr1_colind_d0 => grp_accumulate_fu_3783_csr1_colind_d0,
        csr1_colind_q0 => p_18_q0,
        csr1_colind_we0 => grp_accumulate_fu_3783_csr1_colind_we0,
        csr1_colind_address1 => grp_accumulate_fu_3783_csr1_colind_address1,
        csr1_colind_ce1 => grp_accumulate_fu_3783_csr1_colind_ce1,
        csr1_colind_d1 => grp_accumulate_fu_3783_csr1_colind_d1,
        csr1_colind_q1 => ap_const_lv32_0,
        csr1_colind_we1 => grp_accumulate_fu_3783_csr1_colind_we1,
        csr1_data_V_address0 => grp_accumulate_fu_3783_csr1_data_V_address0,
        csr1_data_V_ce0 => grp_accumulate_fu_3783_csr1_data_V_ce0,
        csr1_data_V_d0 => grp_accumulate_fu_3783_csr1_data_V_d0,
        csr1_data_V_q0 => p_29_q0,
        csr1_data_V_we0 => grp_accumulate_fu_3783_csr1_data_V_we0,
        csr1_data_V_address1 => grp_accumulate_fu_3783_csr1_data_V_address1,
        csr1_data_V_ce1 => grp_accumulate_fu_3783_csr1_data_V_ce1,
        csr1_data_V_d1 => grp_accumulate_fu_3783_csr1_data_V_d1,
        csr1_data_V_q1 => ap_const_lv32_0,
        csr1_data_V_we1 => grp_accumulate_fu_3783_csr1_data_V_we1,
        csr2_rowptr_address0 => grp_accumulate_fu_3783_csr2_rowptr_address0,
        csr2_rowptr_ce0 => grp_accumulate_fu_3783_csr2_rowptr_ce0,
        csr2_rowptr_d0 => grp_accumulate_fu_3783_csr2_rowptr_d0,
        csr2_rowptr_q0 => p_010_q0,
        csr2_rowptr_we0 => grp_accumulate_fu_3783_csr2_rowptr_we0,
        csr2_rowptr_address1 => grp_accumulate_fu_3783_csr2_rowptr_address1,
        csr2_rowptr_ce1 => grp_accumulate_fu_3783_csr2_rowptr_ce1,
        csr2_rowptr_d1 => grp_accumulate_fu_3783_csr2_rowptr_d1,
        csr2_rowptr_q1 => p_010_q1,
        csr2_rowptr_we1 => grp_accumulate_fu_3783_csr2_rowptr_we1,
        csr2_colind_address0 => grp_accumulate_fu_3783_csr2_colind_address0,
        csr2_colind_ce0 => grp_accumulate_fu_3783_csr2_colind_ce0,
        csr2_colind_d0 => grp_accumulate_fu_3783_csr2_colind_d0,
        csr2_colind_q0 => p_111_q0,
        csr2_colind_we0 => grp_accumulate_fu_3783_csr2_colind_we0,
        csr2_colind_address1 => grp_accumulate_fu_3783_csr2_colind_address1,
        csr2_colind_ce1 => grp_accumulate_fu_3783_csr2_colind_ce1,
        csr2_colind_d1 => grp_accumulate_fu_3783_csr2_colind_d1,
        csr2_colind_q1 => ap_const_lv3_0,
        csr2_colind_we1 => grp_accumulate_fu_3783_csr2_colind_we1,
        csr2_data_V_address0 => grp_accumulate_fu_3783_csr2_data_V_address0,
        csr2_data_V_ce0 => grp_accumulate_fu_3783_csr2_data_V_ce0,
        csr2_data_V_d0 => grp_accumulate_fu_3783_csr2_data_V_d0,
        csr2_data_V_q0 => p_212_q0,
        csr2_data_V_we0 => grp_accumulate_fu_3783_csr2_data_V_we0,
        csr2_data_V_address1 => grp_accumulate_fu_3783_csr2_data_V_address1,
        csr2_data_V_ce1 => grp_accumulate_fu_3783_csr2_data_V_ce1,
        csr2_data_V_d1 => grp_accumulate_fu_3783_csr2_data_V_d1,
        csr2_data_V_q1 => ap_const_lv32_0,
        csr2_data_V_we1 => grp_accumulate_fu_3783_csr2_data_V_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_accumulate_fu_3783_ap_start,
        ap_done => grp_accumulate_fu_3783_ap_done,
        ap_ready => grp_accumulate_fu_3783_ap_ready,
        ap_idle => grp_accumulate_fu_3783_ap_idle,
        ap_continue => grp_accumulate_fu_3783_ap_continue);

    grp_multiply_row_col_fu_3796 : component multiply_row_col
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_multiply_row_col_fu_3796_ap_start,
        ap_done => grp_multiply_row_col_fu_3796_ap_done,
        ap_idle => grp_multiply_row_col_fu_3796_ap_idle,
        ap_ready => grp_multiply_row_col_fu_3796_ap_ready,
        agg_result_rowptr_address0 => grp_multiply_row_col_fu_3796_agg_result_rowptr_address0,
        agg_result_rowptr_ce0 => grp_multiply_row_col_fu_3796_agg_result_rowptr_ce0,
        agg_result_rowptr_we0 => grp_multiply_row_col_fu_3796_agg_result_rowptr_we0,
        agg_result_rowptr_d0 => grp_multiply_row_col_fu_3796_agg_result_rowptr_d0,
        agg_result_colind_address0 => grp_multiply_row_col_fu_3796_agg_result_colind_address0,
        agg_result_colind_ce0 => grp_multiply_row_col_fu_3796_agg_result_colind_ce0,
        agg_result_colind_we0 => grp_multiply_row_col_fu_3796_agg_result_colind_we0,
        agg_result_colind_d0 => grp_multiply_row_col_fu_3796_agg_result_colind_d0,
        agg_result_data_V_address0 => grp_multiply_row_col_fu_3796_agg_result_data_V_address0,
        agg_result_data_V_ce0 => grp_multiply_row_col_fu_3796_agg_result_data_V_ce0,
        agg_result_data_V_we0 => grp_multiply_row_col_fu_3796_agg_result_data_V_we0,
        agg_result_data_V_d0 => grp_multiply_row_col_fu_3796_agg_result_data_V_d0,
        row_V_address0 => grp_multiply_row_col_fu_3796_row_V_address0,
        row_V_ce0 => grp_multiply_row_col_fu_3796_row_V_ce0,
        row_V_q0 => out_row_V_q0,
        col_V_address0 => grp_multiply_row_col_fu_3796_col_V_address0,
        col_V_ce0 => grp_multiply_row_col_fu_3796_col_V_ce0,
        col_V_q0 => out_col_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_accumulate_fu_3783_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_accumulate_fu_3783_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_on_subcall_done))) then 
                    ap_sync_reg_grp_accumulate_fu_3783_ap_done <= ap_const_logic_0;
                elsif ((grp_accumulate_fu_3783_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_accumulate_fu_3783_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_accumulate_fu_3783_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_accumulate_fu_3783_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_on_subcall_done))) then 
                    ap_sync_reg_grp_accumulate_fu_3783_ap_ready <= ap_const_logic_0;
                elsif ((grp_accumulate_fu_3783_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_accumulate_fu_3783_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_accumulate_fu_3783_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_accumulate_fu_3783_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_sync_grp_accumulate_fu_3783_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                    grp_accumulate_fu_3783_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accumulate_fu_3783_ap_ready = ap_const_logic_1)) then 
                    grp_accumulate_fu_3783_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_multiply_row_col_fu_3796_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_multiply_row_col_fu_3796_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i1_fu_3879_p2 = ap_const_lv1_1))) then 
                    grp_multiply_row_col_fu_3796_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_multiply_row_col_fu_3796_ap_ready = ap_const_logic_1)) then 
                    grp_multiply_row_col_fu_3796_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_3681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and ((tmp_2_fu_3933_p2 = ap_const_lv1_1) or (tmp_reg_6143 = ap_const_lv1_1)))) then 
                col_assign_reg_3681 <= i_2_reg_6020;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_3681 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i1_reg_3737_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i1_reg_3737 <= i_1_reg_6124;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_i1_reg_3737 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i_reg_3703_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i_reg_3703 <= i_reg_6064;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_reg_3703 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j2_i_be_reg_3749_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((tmp_7_i1_fu_3907_p2 = ap_const_lv1_0) or (tmp_5_i1_reg_6129 = ap_const_lv1_0)))) then 
                j2_i_be_reg_3749 <= j2_i_reg_3727;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j2_i_be_reg_3749 <= j_3_fu_3922_p2;
            end if; 
        end if;
    end process;

    j2_i_reg_3727_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j2_i_reg_3727 <= j2_i_be_reg_3749;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j2_i_reg_3727 <= start_idx_1_reg_6106;
            end if; 
        end if;
    end process;

    j4_i_be_reg_3715_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((tmp_5_i_fu_3854_p2 = ap_const_lv1_0) or (tmp_3_i_reg_6069 = ap_const_lv1_0)))) then 
                j4_i_be_reg_3715 <= j4_i_reg_3693;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j4_i_be_reg_3715 <= j_2_fu_3869_p2;
            end if; 
        end if;
    end process;

    j4_i_reg_3693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j4_i_reg_3693 <= j4_i_be_reg_3715;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j4_i_reg_3693 <= inp_csc_colptr_assig_q0;
            end if; 
        end if;
    end process;

    p_i0_0_i1_reg_3761_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                p_i0_0_i1_reg_3761 <= p_i0_1_reg_6168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                p_i0_0_i1_reg_3761 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_i0_0_i_reg_3772_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                p_i0_0_i_reg_3772 <= p_i0_reg_6186;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                p_i0_0_i_reg_3772 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                end_idx_1_reg_6111 <= inp_csr_rowptr_assig_q1;
                start_idx_1_reg_6106 <= inp_csr_rowptr_assig_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                end_idx_reg_6051 <= inp_csc_colptr_assig_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_1_reg_6124 <= i_1_fu_3885_p2;
                    i_cast1_i1_reg_6116(2 downto 0) <= i_cast1_i1_fu_3875_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_6020 <= i_2_fu_3813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    i_cast1_i_reg_6056(2 downto 0) <= i_cast1_i_fu_3828_p1(2 downto 0);
                i_reg_6064 <= i_fu_3838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (tmp_reg_6143 = ap_const_lv1_0))) then
                    p_i0_0_i1_cast5_reg_6160(4 downto 0) <= p_i0_0_i1_cast5_fu_3928_p1(4 downto 0);
                p_i0_1_reg_6168 <= p_i0_1_fu_3939_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                    p_i0_0_i_cast6_reg_6178(4 downto 0) <= p_i0_0_i_cast6_fu_4045_p1(4 downto 0);
                p_i0_reg_6186 <= p_i0_fu_4056_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    tmp_2_i_reg_6036(2 downto 0) <= tmp_2_i_fu_3824_p1(2 downto 0);
                    tmp_i_reg_6026(2 downto 0) <= tmp_i_fu_3819_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_3832_p2 = ap_const_lv1_0))) then
                tmp_3_i_reg_6069 <= tmp_3_i_fu_3844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_3832_p2 = ap_const_lv1_0) and (tmp_3_i_fu_3844_p2 = ap_const_lv1_1))) then
                tmp_4_i_reg_6073 <= tmp_4_i_fu_3849_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i1_fu_3879_p2 = ap_const_lv1_0))) then
                tmp_5_i1_reg_6129 <= tmp_5_i1_fu_3891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_5_i1_fu_3891_p2 = ap_const_lv1_1) and (exitcond_i1_fu_3879_p2 = ap_const_lv1_0))) then
                tmp_6_i1_reg_6133 <= tmp_6_i1_fu_3896_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i1_fu_3879_p2 = ap_const_lv1_1))) then
                tmp_reg_6143 <= tmp_fu_3901_p2;
            end if;
        end if;
    end process;
    tmp_i_reg_6026(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_2_i_reg_6036(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_cast1_i_reg_6056(31 downto 3) <= "00000000000000000000000000000";
    i_cast1_i1_reg_6116(31 downto 3) <= "00000000000000000000000000000";
    p_i0_0_i1_cast5_reg_6160(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_i0_0_i_cast6_reg_6178(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state13, tmp_3_i_reg_6069, exitcond_i_fu_3832_p2, ap_CS_fsm_state14, tmp_5_i_fu_3854_p2, ap_CS_fsm_state27, tmp_5_i1_reg_6129, exitcond_i1_fu_3879_p2, tmp_reg_6143, ap_CS_fsm_state28, tmp_7_i1_fu_3907_p2, ap_CS_fsm_state56, tmp_2_fu_3933_p2, ap_CS_fsm_state69, tmp_1_fu_4050_p2, grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state44, ap_block_state44_on_subcall_done, ap_CS_fsm_state31, exitcond_fu_3807_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_3807_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_3832_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((tmp_5_i_fu_3854_p2 = ap_const_lv1_0) or (tmp_3_i_reg_6069 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i1_fu_3879_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((tmp_7_i1_fu_3907_p2 = ap_const_lv1_0) or (tmp_5_i1_reg_6129 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1) and (tmp_reg_6143 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1) and (tmp_reg_6143 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and ((tmp_2_fu_3933_p2 = ap_const_lv1_1) or (tmp_reg_6143 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (tmp_1_fu_4050_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    agg_result_colind_address0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            agg_result_colind_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            agg_result_colind_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            agg_result_colind_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            agg_result_colind_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            agg_result_colind_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            agg_result_colind_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            agg_result_colind_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            agg_result_colind_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            agg_result_colind_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            agg_result_colind_address0 <= "XXXXX";
        end if; 
    end process;


    agg_result_colind_address1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            agg_result_colind_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            agg_result_colind_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            agg_result_colind_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            agg_result_colind_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            agg_result_colind_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            agg_result_colind_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            agg_result_colind_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            agg_result_colind_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            agg_result_colind_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            agg_result_colind_address1 <= "XXXXX";
        end if; 
    end process;


    agg_result_colind_ce0_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_colind_ce0 <= ap_const_logic_1;
        else 
            agg_result_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_colind_ce1_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_colind_ce1 <= ap_const_logic_1;
        else 
            agg_result_colind_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_colind_d0_assign_proc : process(p_15_q0, ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, extLd_fu_3945_p1, extLd2_fu_3955_p1, extLd4_fu_3965_p1, ap_CS_fsm_state62, extLd6_fu_3975_p1, ap_CS_fsm_state63, extLd8_fu_3985_p1, ap_CS_fsm_state64, extLd10_fu_3995_p1, ap_CS_fsm_state65, extLd12_fu_4005_p1, ap_CS_fsm_state66, extLd14_fu_4015_p1, ap_CS_fsm_state67, extLd16_fu_4025_p1, extLd18_fu_4035_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            agg_result_colind_d0 <= extLd18_fu_4035_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            agg_result_colind_d0 <= extLd16_fu_4025_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            agg_result_colind_d0 <= extLd14_fu_4015_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            agg_result_colind_d0 <= extLd12_fu_4005_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            agg_result_colind_d0 <= extLd10_fu_3995_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            agg_result_colind_d0 <= extLd8_fu_3985_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            agg_result_colind_d0 <= extLd6_fu_3975_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            agg_result_colind_d0 <= extLd4_fu_3965_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            agg_result_colind_d0 <= extLd2_fu_3955_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            agg_result_colind_d0 <= extLd_fu_3945_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_d0 <= p_15_q0;
        else 
            agg_result_colind_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_colind_d1_assign_proc : process(p_15_q1, ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, extLd1_fu_3950_p1, extLd3_fu_3960_p1, extLd5_fu_3970_p1, ap_CS_fsm_state62, extLd7_fu_3980_p1, ap_CS_fsm_state63, extLd9_fu_3990_p1, ap_CS_fsm_state64, extLd11_fu_4000_p1, ap_CS_fsm_state65, extLd13_fu_4010_p1, ap_CS_fsm_state66, extLd15_fu_4020_p1, ap_CS_fsm_state67, extLd17_fu_4030_p1, extLd19_fu_4040_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            agg_result_colind_d1 <= extLd19_fu_4040_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            agg_result_colind_d1 <= extLd17_fu_4030_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            agg_result_colind_d1 <= extLd15_fu_4020_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            agg_result_colind_d1 <= extLd13_fu_4010_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            agg_result_colind_d1 <= extLd11_fu_4000_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            agg_result_colind_d1 <= extLd9_fu_3990_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            agg_result_colind_d1 <= extLd7_fu_3980_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            agg_result_colind_d1 <= extLd5_fu_3970_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            agg_result_colind_d1 <= extLd3_fu_3960_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            agg_result_colind_d1 <= extLd1_fu_3950_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_d1 <= p_15_q1;
        else 
            agg_result_colind_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_colind_we0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_we0 <= ap_const_logic_1;
        else 
            agg_result_colind_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_colind_we1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state68, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            agg_result_colind_we1 <= ap_const_logic_1;
        else 
            agg_result_colind_we1 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_data_V_address0_assign_proc : process(p_i0_0_i1_cast5_reg_6160, ap_CS_fsm_state57, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            agg_result_data_V_address0 <= p_i0_0_i1_cast5_reg_6160(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            agg_result_data_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            agg_result_data_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            agg_result_data_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            agg_result_data_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            agg_result_data_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            agg_result_data_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_data_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            agg_result_data_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            agg_result_data_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            agg_result_data_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            agg_result_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    agg_result_data_V_address1_assign_proc : process(p_i0_0_i_cast6_reg_6178, ap_CS_fsm_state70, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            agg_result_data_V_address1 <= p_i0_0_i_cast6_reg_6178(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            agg_result_data_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            agg_result_data_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            agg_result_data_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            agg_result_data_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            agg_result_data_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            agg_result_data_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_data_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            agg_result_data_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            agg_result_data_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            agg_result_data_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            agg_result_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    agg_result_data_V_ce0_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state57, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state57) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_data_V_ce0 <= ap_const_logic_1;
        else 
            agg_result_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_data_V_ce1_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state70, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state70) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_data_V_ce1 <= ap_const_logic_1;
        else 
            agg_result_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_data_V_d0 <= p_26_q0;
    agg_result_data_V_d1 <= partial_z_data_V_q0;

    agg_result_data_V_we0_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            agg_result_data_V_we0 <= ap_const_logic_1;
        else 
            agg_result_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_data_V_we1_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            agg_result_data_V_we1 <= ap_const_logic_1;
        else 
            agg_result_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_rowptr_address0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_rowptr_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            agg_result_rowptr_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            agg_result_rowptr_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            agg_result_rowptr_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            agg_result_rowptr_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            agg_result_rowptr_address0 <= "XXX";
        end if; 
    end process;


    agg_result_rowptr_address1_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            agg_result_rowptr_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            agg_result_rowptr_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            agg_result_rowptr_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            agg_result_rowptr_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            agg_result_rowptr_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            agg_result_rowptr_address1 <= "XXX";
        end if; 
    end process;


    agg_result_rowptr_ce0_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_rowptr_ce0 <= ap_const_logic_1;
        else 
            agg_result_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_rowptr_ce1_assign_proc : process(grp_multiply_row_col_fu_3796_ap_done, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_multiply_row_col_fu_3796_ap_done = ap_const_logic_1)))) then 
            agg_result_rowptr_ce1 <= ap_const_logic_1;
        else 
            agg_result_rowptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_rowptr_d0_assign_proc : process(partial_z_rowptr_q1, p_04_q1, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            agg_result_rowptr_d0 <= partial_z_rowptr_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            agg_result_rowptr_d0 <= p_04_q1;
        else 
            agg_result_rowptr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_rowptr_d1_assign_proc : process(partial_z_rowptr_q0, p_04_q0, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            agg_result_rowptr_d1 <= partial_z_rowptr_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            agg_result_rowptr_d1 <= p_04_q0;
        else 
            agg_result_rowptr_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_rowptr_we0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            agg_result_rowptr_we0 <= ap_const_logic_1;
        else 
            agg_result_rowptr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_rowptr_we1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            agg_result_rowptr_we1 <= ap_const_logic_1;
        else 
            agg_result_rowptr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state44_on_subcall_done_assign_proc : process(ap_sync_grp_accumulate_fu_3783_ap_ready, ap_sync_grp_accumulate_fu_3783_ap_done)
    begin
                ap_block_state44_on_subcall_done <= ((ap_sync_grp_accumulate_fu_3783_ap_ready and ap_sync_grp_accumulate_fu_3783_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_3807_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_3807_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_3807_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_3807_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_accumulate_fu_3783_ap_done <= (grp_accumulate_fu_3783_ap_done or ap_sync_reg_grp_accumulate_fu_3783_ap_done);
    ap_sync_grp_accumulate_fu_3783_ap_ready <= (grp_accumulate_fu_3783_ap_ready or ap_sync_reg_grp_accumulate_fu_3783_ap_ready);
    exitcond_fu_3807_p2 <= "1" when (col_assign_reg_3681 = ap_const_lv3_5) else "0";
    exitcond_i1_fu_3879_p2 <= "1" when (i_i1_reg_3737 = ap_const_lv3_5) else "0";
    exitcond_i_fu_3832_p2 <= "1" when (i_i_reg_3703 = ap_const_lv3_4) else "0";
    extLd10_fu_3995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd11_fu_4000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd12_fu_4005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd13_fu_4010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd14_fu_4015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd15_fu_4020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd16_fu_4025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd17_fu_4030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd18_fu_4035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd19_fu_4040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd1_fu_3950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd2_fu_3955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd3_fu_3960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd4_fu_3965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd5_fu_3970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd6_fu_3975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd7_fu_3980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd8_fu_3985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));
    extLd9_fu_3990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q1),32));
    extLd_fu_3945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_q0),32));

    grp_accumulate_fu_3783_ap_continue_assign_proc : process(ap_CS_fsm_state44, ap_block_state44_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_on_subcall_done))) then 
            grp_accumulate_fu_3783_ap_continue <= ap_const_logic_1;
        else 
            grp_accumulate_fu_3783_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_accumulate_fu_3783_ap_start <= grp_accumulate_fu_3783_ap_start_reg;
    grp_multiply_row_col_fu_3796_ap_start <= grp_multiply_row_col_fu_3796_ap_start_reg;
    i_1_fu_3885_p2 <= std_logic_vector(unsigned(i_i1_reg_3737) + unsigned(ap_const_lv3_1));
    i_2_fu_3813_p2 <= std_logic_vector(unsigned(col_assign_reg_3681) + unsigned(ap_const_lv3_1));
    i_cast1_i1_fu_3875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_3737),32));
    i_cast1_i_fu_3828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_3703),32));
    i_fu_3838_p2 <= std_logic_vector(unsigned(i_i_reg_3703) + unsigned(ap_const_lv3_1));

    inp_csc_colptr_assig_address0_assign_proc : process(tmp_i_fu_3819_p1, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_colptr_assig_address0 <= tmp_i_fu_3819_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_colptr_assig_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_colptr_assig_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_colptr_assig_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            inp_csc_colptr_assig_address0 <= "XXX";
        end if; 
    end process;


    inp_csc_colptr_assig_address1_assign_proc : process(ap_CS_fsm_state11, tmp_2_i_fu_3824_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_colptr_assig_address1 <= tmp_2_i_fu_3824_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_colptr_assig_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_colptr_assig_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_colptr_assig_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            inp_csc_colptr_assig_address1 <= "XXX";
        end if; 
    end process;


    inp_csc_colptr_assig_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inp_csc_colptr_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csc_colptr_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_colptr_assig_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inp_csc_colptr_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csc_colptr_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_colptr_assig_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inp_csc_colptr_assig_we0 <= ap_const_logic_1;
        else 
            inp_csc_colptr_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_colptr_assig_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inp_csc_colptr_assig_we1 <= ap_const_logic_1;
        else 
            inp_csc_colptr_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_data_V_assig_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_4_i_reg_6073, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            inp_csc_data_V_assig_address0 <= tmp_4_i_reg_6073(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_data_V_assig_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            inp_csc_data_V_assig_address0 <= "XXXXX";
        end if; 
    end process;


    inp_csc_data_V_assig_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_data_V_assig_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            inp_csc_data_V_assig_address1 <= "XXXXX";
        end if; 
    end process;


    inp_csc_data_V_assig_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_data_V_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csc_data_V_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_data_V_assig_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_data_V_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csc_data_V_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_data_V_assig_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_data_V_assig_we0 <= ap_const_logic_1;
        else 
            inp_csc_data_V_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_data_V_assig_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_data_V_assig_we1 <= ap_const_logic_1;
        else 
            inp_csc_data_V_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_rowind_assig_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, tmp_4_i_fu_3849_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            inp_csc_rowind_assig_address0 <= tmp_4_i_fu_3849_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_rowind_assig_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            inp_csc_rowind_assig_address0 <= "XXXXX";
        end if; 
    end process;


    inp_csc_rowind_assig_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inp_csc_rowind_assig_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            inp_csc_rowind_assig_address1 <= "XXXXX";
        end if; 
    end process;


    inp_csc_rowind_assig_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_rowind_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csc_rowind_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_rowind_assig_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_rowind_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csc_rowind_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_rowind_assig_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_rowind_assig_we0 <= ap_const_logic_1;
        else 
            inp_csc_rowind_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csc_rowind_assig_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            inp_csc_rowind_assig_we1 <= ap_const_logic_1;
        else 
            inp_csc_rowind_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_colind_assig_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state27, tmp_6_i1_fu_3896_p1, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            inp_csr_colind_assig_address0 <= tmp_6_i1_fu_3896_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_colind_assig_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            inp_csr_colind_assig_address0 <= "XXXXX";
        end if; 
    end process;


    inp_csr_colind_assig_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_colind_assig_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            inp_csr_colind_assig_address1 <= "XXXXX";
        end if; 
    end process;


    inp_csr_colind_assig_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_colind_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csr_colind_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_colind_assig_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_colind_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csr_colind_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_colind_assig_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_colind_assig_we0 <= ap_const_logic_1;
        else 
            inp_csr_colind_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_colind_assig_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_colind_assig_we1 <= ap_const_logic_1;
        else 
            inp_csr_colind_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_data_V_assig_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, tmp_6_i1_reg_6133, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            inp_csr_data_V_assig_address0 <= tmp_6_i1_reg_6133(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_data_V_assig_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            inp_csr_data_V_assig_address0 <= "XXXXX";
        end if; 
    end process;


    inp_csr_data_V_assig_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_data_V_assig_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            inp_csr_data_V_assig_address1 <= "XXXXX";
        end if; 
    end process;


    inp_csr_data_V_assig_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_data_V_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csr_data_V_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_data_V_assig_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_data_V_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csr_data_V_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_data_V_assig_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_data_V_assig_we0 <= ap_const_logic_1;
        else 
            inp_csr_data_V_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_data_V_assig_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_data_V_assig_we1 <= ap_const_logic_1;
        else 
            inp_csr_data_V_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_rowptr_assig_address0_assign_proc : process(tmp_i_reg_6026, ap_CS_fsm_state20, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_rowptr_assig_address0 <= tmp_i_reg_6026(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_rowptr_assig_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_rowptr_assig_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_rowptr_assig_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            inp_csr_rowptr_assig_address0 <= "XXX";
        end if; 
    end process;


    inp_csr_rowptr_assig_address1_assign_proc : process(tmp_2_i_reg_6036, ap_CS_fsm_state20, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_csr_rowptr_assig_address1 <= tmp_2_i_reg_6036(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inp_csr_rowptr_assig_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            inp_csr_rowptr_assig_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            inp_csr_rowptr_assig_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            inp_csr_rowptr_assig_address1 <= "XXX";
        end if; 
    end process;


    inp_csr_rowptr_assig_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_rowptr_assig_ce0 <= ap_const_logic_1;
        else 
            inp_csr_rowptr_assig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_rowptr_assig_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_csr_rowptr_assig_ce1 <= ap_const_logic_1;
        else 
            inp_csr_rowptr_assig_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_rowptr_assig_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            inp_csr_rowptr_assig_we0 <= ap_const_logic_1;
        else 
            inp_csr_rowptr_assig_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_csr_rowptr_assig_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            inp_csr_rowptr_assig_we1 <= ap_const_logic_1;
        else 
            inp_csr_rowptr_assig_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_3869_p2 <= std_logic_vector(signed(j4_i_reg_3693) + signed(ap_const_lv32_1));
    j_3_fu_3922_p2 <= std_logic_vector(signed(j2_i_reg_3727) + signed(ap_const_lv32_1));

    out_col_V_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, grp_multiply_row_col_fu_3796_col_V_address0, ap_CS_fsm_state31, tmp_6_i_fu_3859_p1, tmp_7_i_fu_3864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_col_V_address0 <= tmp_7_i_fu_3864_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_col_V_address0 <= tmp_6_i_fu_3859_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            out_col_V_address0 <= grp_multiply_row_col_fu_3796_col_V_address0;
        else 
            out_col_V_address0 <= "XX";
        end if; 
    end process;


    out_col_V_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, grp_multiply_row_col_fu_3796_col_V_ce0, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_col_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            out_col_V_ce0 <= grp_multiply_row_col_fu_3796_col_V_ce0;
        else 
            out_col_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_col_V_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, inp_csc_data_V_assig_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_col_V_d0 <= inp_csc_data_V_assig_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_col_V_d0 <= ap_const_lv32_0;
        else 
            out_col_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_col_V_we0_assign_proc : process(tmp_3_i_reg_6069, ap_CS_fsm_state14, tmp_5_i_fu_3854_p2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state14) and ((tmp_5_i_fu_3854_p2 = ap_const_lv1_0) or (tmp_3_i_reg_6069 = ap_const_lv1_0))))) then 
            out_col_V_we0 <= ap_const_logic_1;
        else 
            out_col_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_row_V_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, grp_multiply_row_col_fu_3796_row_V_address0, ap_CS_fsm_state31, tmp_8_i_fu_3912_p1, tmp_9_i_fu_3917_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            out_row_V_address0 <= tmp_9_i_fu_3917_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_row_V_address0 <= tmp_8_i_fu_3912_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            out_row_V_address0 <= grp_multiply_row_col_fu_3796_row_V_address0;
        else 
            out_row_V_address0 <= "XXX";
        end if; 
    end process;


    out_row_V_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, grp_multiply_row_col_fu_3796_row_V_ce0, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            out_row_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            out_row_V_ce0 <= grp_multiply_row_col_fu_3796_row_V_ce0;
        else 
            out_row_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_row_V_d0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state29, inp_csr_data_V_assig_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            out_row_V_d0 <= inp_csr_data_V_assig_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_row_V_d0 <= ap_const_lv32_0;
        else 
            out_row_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_row_V_we0_assign_proc : process(tmp_5_i1_reg_6129, ap_CS_fsm_state28, tmp_7_i1_fu_3907_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and ((tmp_7_i1_fu_3907_p2 = ap_const_lv1_0) or (tmp_5_i1_reg_6129 = ap_const_lv1_0))))) then 
            out_row_V_we0 <= ap_const_logic_1;
        else 
            out_row_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_010_address0_assign_proc : process(grp_accumulate_fu_3783_csr2_rowptr_address0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_010_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_010_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_010_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_010_address0 <= grp_accumulate_fu_3783_csr2_rowptr_address0;
        else 
            p_010_address0 <= "XXX";
        end if; 
    end process;


    p_010_address1_assign_proc : process(grp_accumulate_fu_3783_csr2_rowptr_address1, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_010_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_010_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_010_address1 <= grp_accumulate_fu_3783_csr2_rowptr_address1;
        else 
            p_010_address1 <= "XXX";
        end if; 
    end process;


    p_010_ce0_assign_proc : process(grp_accumulate_fu_3783_csr2_rowptr_ce0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_010_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_010_ce0 <= grp_accumulate_fu_3783_csr2_rowptr_ce0;
        else 
            p_010_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_010_ce1_assign_proc : process(grp_accumulate_fu_3783_csr2_rowptr_ce1, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_010_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_010_ce1 <= grp_accumulate_fu_3783_csr2_rowptr_ce1;
        else 
            p_010_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_010_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_010_we0 <= ap_const_logic_1;
        else 
            p_010_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_010_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_010_we1 <= ap_const_logic_1;
        else 
            p_010_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_04_address0_assign_proc : process(grp_accumulate_fu_3783_agg_result_rowptr_address0, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_04_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p_04_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_04_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_04_address0 <= grp_accumulate_fu_3783_agg_result_rowptr_address0;
        else 
            p_04_address0 <= "XXX";
        end if; 
    end process;


    p_04_address1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p_04_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_04_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            p_04_address1 <= "XXX";
        end if; 
    end process;


    p_04_ce0_assign_proc : process(grp_accumulate_fu_3783_agg_result_rowptr_ce0, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            p_04_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_04_ce0 <= grp_accumulate_fu_3783_agg_result_rowptr_ce0;
        else 
            p_04_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_04_ce1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            p_04_ce1 <= ap_const_logic_1;
        else 
            p_04_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_04_we0_assign_proc : process(grp_accumulate_fu_3783_agg_result_rowptr_we0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_04_we0 <= grp_accumulate_fu_3783_agg_result_rowptr_we0;
        else 
            p_04_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_07_address0_assign_proc : process(grp_accumulate_fu_3783_csr1_rowptr_address0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_07_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_07_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_07_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_07_address0 <= grp_accumulate_fu_3783_csr1_rowptr_address0;
        else 
            p_07_address0 <= "XXX";
        end if; 
    end process;


    p_07_address1_assign_proc : process(grp_accumulate_fu_3783_csr1_rowptr_address1, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_07_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_07_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_07_address1 <= grp_accumulate_fu_3783_csr1_rowptr_address1;
        else 
            p_07_address1 <= "XXX";
        end if; 
    end process;


    p_07_ce0_assign_proc : process(grp_accumulate_fu_3783_csr1_rowptr_ce0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_07_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_07_ce0 <= grp_accumulate_fu_3783_csr1_rowptr_ce0;
        else 
            p_07_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_07_ce1_assign_proc : process(grp_accumulate_fu_3783_csr1_rowptr_ce1, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_07_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_07_ce1 <= grp_accumulate_fu_3783_csr1_rowptr_ce1;
        else 
            p_07_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_07_we0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_07_we0 <= ap_const_logic_1;
        else 
            p_07_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_07_we1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_07_we1 <= ap_const_logic_1;
        else 
            p_07_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_111_address0_assign_proc : process(grp_accumulate_fu_3783_csr2_colind_address0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            p_111_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_111_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_111_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_111_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_111_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_111_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_111_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_111_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_111_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_111_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_111_address0 <= grp_accumulate_fu_3783_csr2_colind_address0;
        else 
            p_111_address0 <= "XXXXX";
        end if; 
    end process;


    p_111_address1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            p_111_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_111_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_111_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_111_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_111_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_111_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_111_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_111_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_111_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_111_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_111_address1 <= "XXXXX";
        end if; 
    end process;


    p_111_ce0_assign_proc : process(grp_accumulate_fu_3783_csr2_colind_ce0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_111_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_111_ce0 <= grp_accumulate_fu_3783_csr2_colind_ce0;
        else 
            p_111_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_111_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_111_ce1 <= ap_const_logic_1;
        else 
            p_111_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_111_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_111_we0 <= ap_const_logic_1;
        else 
            p_111_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_111_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_111_we1 <= ap_const_logic_1;
        else 
            p_111_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_15_address0_assign_proc : process(grp_accumulate_fu_3783_agg_result_colind_address0, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            p_15_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            p_15_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            p_15_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            p_15_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            p_15_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_15_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            p_15_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_15_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p_15_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_15_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_15_address0 <= grp_accumulate_fu_3783_agg_result_colind_address0;
        else 
            p_15_address0 <= "XXXXX";
        end if; 
    end process;


    p_15_address1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            p_15_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            p_15_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            p_15_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            p_15_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            p_15_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_15_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            p_15_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_15_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p_15_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_15_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_15_address1 <= "XXXXX";
        end if; 
    end process;


    p_15_ce0_assign_proc : process(grp_accumulate_fu_3783_agg_result_colind_ce0, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            p_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_15_ce0 <= grp_accumulate_fu_3783_agg_result_colind_ce0;
        else 
            p_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_15_ce1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            p_15_ce1 <= ap_const_logic_1;
        else 
            p_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_15_we0_assign_proc : process(grp_accumulate_fu_3783_agg_result_colind_we0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_15_we0 <= grp_accumulate_fu_3783_agg_result_colind_we0;
        else 
            p_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_18_address0_assign_proc : process(grp_accumulate_fu_3783_csr1_colind_address0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_18_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_18_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_18_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_18_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_18_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_18_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_18_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_18_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_18_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_18_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_18_address0 <= grp_accumulate_fu_3783_csr1_colind_address0;
        else 
            p_18_address0 <= "XXXXX";
        end if; 
    end process;


    p_18_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_18_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_18_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_18_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_18_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_18_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_18_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_18_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_18_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_18_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_18_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_18_address1 <= "XXXXX";
        end if; 
    end process;


    p_18_ce0_assign_proc : process(grp_accumulate_fu_3783_csr1_colind_ce0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_18_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_18_ce0 <= grp_accumulate_fu_3783_csr1_colind_ce0;
        else 
            p_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_18_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_18_ce1 <= ap_const_logic_1;
        else 
            p_18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_18_we0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_18_we0 <= ap_const_logic_1;
        else 
            p_18_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_18_we1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_18_we1 <= ap_const_logic_1;
        else 
            p_18_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_212_address0_assign_proc : process(grp_accumulate_fu_3783_csr2_data_V_address0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            p_212_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_212_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_212_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_212_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_212_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_212_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_212_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_212_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_212_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_212_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_212_address0 <= grp_accumulate_fu_3783_csr2_data_V_address0;
        else 
            p_212_address0 <= "XXXXX";
        end if; 
    end process;


    p_212_address1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            p_212_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_212_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_212_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_212_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_212_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_212_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_212_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_212_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_212_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_212_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_212_address1 <= "XXXXX";
        end if; 
    end process;


    p_212_ce0_assign_proc : process(grp_accumulate_fu_3783_csr2_data_V_ce0, ap_CS_fsm_state44, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_212_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_212_ce0 <= grp_accumulate_fu_3783_csr2_data_V_ce0;
        else 
            p_212_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_212_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_212_ce1 <= ap_const_logic_1;
        else 
            p_212_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_212_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_212_we0 <= ap_const_logic_1;
        else 
            p_212_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_212_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_212_we1 <= ap_const_logic_1;
        else 
            p_212_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_26_address0_assign_proc : process(p_i0_0_i1_cast5_fu_3928_p1, ap_CS_fsm_state56, grp_accumulate_fu_3783_agg_result_data_V_address0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            p_26_address0 <= p_i0_0_i1_cast5_fu_3928_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_26_address0 <= grp_accumulate_fu_3783_agg_result_data_V_address0;
        else 
            p_26_address0 <= "XXXXX";
        end if; 
    end process;


    p_26_ce0_assign_proc : process(ap_CS_fsm_state56, grp_accumulate_fu_3783_agg_result_data_V_ce0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            p_26_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_26_ce0 <= grp_accumulate_fu_3783_agg_result_data_V_ce0;
        else 
            p_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_26_we0_assign_proc : process(grp_accumulate_fu_3783_agg_result_data_V_we0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_26_we0 <= grp_accumulate_fu_3783_agg_result_data_V_we0;
        else 
            p_26_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_29_address0_assign_proc : process(grp_accumulate_fu_3783_csr1_data_V_address0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_29_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_29_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_29_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_29_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_29_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_29_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_29_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_29_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_29_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_29_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_29_address0 <= grp_accumulate_fu_3783_csr1_data_V_address0;
        else 
            p_29_address0 <= "XXXXX";
        end if; 
    end process;


    p_29_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            p_29_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            p_29_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            p_29_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            p_29_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            p_29_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            p_29_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_29_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            p_29_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            p_29_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            p_29_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_29_address1 <= "XXXXX";
        end if; 
    end process;


    p_29_ce0_assign_proc : process(grp_accumulate_fu_3783_csr1_data_V_ce0, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_29_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            p_29_ce0 <= grp_accumulate_fu_3783_csr1_data_V_ce0;
        else 
            p_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_29_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_29_ce1 <= ap_const_logic_1;
        else 
            p_29_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_29_we0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_29_we0 <= ap_const_logic_1;
        else 
            p_29_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_29_we1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            p_29_we1 <= ap_const_logic_1;
        else 
            p_29_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_i0_0_i1_cast5_fu_3928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_i0_0_i1_reg_3761),64));
    p_i0_0_i_cast6_fu_4045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_i0_0_i_reg_3772),64));
    p_i0_1_fu_3939_p2 <= std_logic_vector(unsigned(p_i0_0_i1_reg_3761) + unsigned(ap_const_lv5_1));
    p_i0_fu_4056_p2 <= std_logic_vector(unsigned(p_i0_0_i_reg_3772) + unsigned(ap_const_lv5_1));

    partial_z_colind_address0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_colind_address0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state41, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            partial_z_colind_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            partial_z_colind_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            partial_z_colind_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            partial_z_colind_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            partial_z_colind_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            partial_z_colind_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            partial_z_colind_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            partial_z_colind_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            partial_z_colind_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_colind_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_colind_address0 <= grp_multiply_row_col_fu_3796_agg_result_colind_address0;
        else 
            partial_z_colind_address0 <= "XXXXX";
        end if; 
    end process;


    partial_z_colind_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state41, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            partial_z_colind_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            partial_z_colind_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            partial_z_colind_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            partial_z_colind_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            partial_z_colind_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            partial_z_colind_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            partial_z_colind_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            partial_z_colind_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            partial_z_colind_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_colind_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            partial_z_colind_address1 <= "XXXXX";
        end if; 
    end process;


    partial_z_colind_ce0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_colind_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state41, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_colind_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_colind_ce0 <= grp_multiply_row_col_fu_3796_agg_result_colind_ce0;
        else 
            partial_z_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_colind_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state41, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_colind_ce1 <= ap_const_logic_1;
        else 
            partial_z_colind_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_colind_we0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_colind_we0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_colind_we0 <= grp_multiply_row_col_fu_3796_agg_result_colind_we0;
        else 
            partial_z_colind_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_data_V_address0_assign_proc : process(p_i0_0_i_cast6_fu_4045_p1, ap_CS_fsm_state69, grp_multiply_row_col_fu_3796_agg_result_data_V_address0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            partial_z_data_V_address0 <= p_i0_0_i_cast6_fu_4045_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            partial_z_data_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            partial_z_data_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            partial_z_data_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            partial_z_data_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            partial_z_data_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            partial_z_data_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            partial_z_data_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            partial_z_data_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            partial_z_data_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            partial_z_data_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_data_V_address0 <= grp_multiply_row_col_fu_3796_agg_result_data_V_address0;
        else 
            partial_z_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    partial_z_data_V_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            partial_z_data_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            partial_z_data_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            partial_z_data_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            partial_z_data_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            partial_z_data_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            partial_z_data_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            partial_z_data_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            partial_z_data_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            partial_z_data_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            partial_z_data_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            partial_z_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    partial_z_data_V_ce0_assign_proc : process(ap_CS_fsm_state69, grp_multiply_row_col_fu_3796_agg_result_data_V_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            partial_z_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_data_V_ce0 <= grp_multiply_row_col_fu_3796_agg_result_data_V_ce0;
        else 
            partial_z_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_data_V_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_data_V_ce1 <= ap_const_logic_1;
        else 
            partial_z_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_data_V_we0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_data_V_we0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_data_V_we0 <= grp_multiply_row_col_fu_3796_agg_result_data_V_we0;
        else 
            partial_z_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_address0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_rowptr_address0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state34, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_rowptr_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            partial_z_rowptr_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            partial_z_rowptr_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            partial_z_rowptr_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            partial_z_rowptr_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_rowptr_address0 <= grp_multiply_row_col_fu_3796_agg_result_rowptr_address0;
        else 
            partial_z_rowptr_address0 <= "XXX";
        end if; 
    end process;


    partial_z_rowptr_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            partial_z_rowptr_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_rowptr_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            partial_z_rowptr_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            partial_z_rowptr_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            partial_z_rowptr_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            partial_z_rowptr_address1 <= "XXX";
        end if; 
    end process;


    partial_z_rowptr_ce0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_rowptr_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state34, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_rowptr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_rowptr_ce0 <= grp_multiply_row_col_fu_3796_agg_result_rowptr_ce0;
        else 
            partial_z_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            partial_z_rowptr_ce1 <= ap_const_logic_1;
        else 
            partial_z_rowptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_we0_assign_proc : process(grp_multiply_row_col_fu_3796_agg_result_rowptr_we0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            partial_z_rowptr_we0 <= grp_multiply_row_col_fu_3796_agg_result_rowptr_we0;
        else 
            partial_z_rowptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_4050_p2 <= "1" when (p_i0_0_i_reg_3772 = ap_const_lv5_14) else "0";
    tmp_2_fu_3933_p2 <= "1" when (p_i0_0_i1_reg_3761 = ap_const_lv5_14) else "0";
    tmp_2_i_fu_3824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_6020),64));
    tmp_3_i_fu_3844_p2 <= "1" when (signed(j4_i_reg_3693) < signed(end_idx_reg_6051)) else "0";
        tmp_4_i_fu_3849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j4_i_reg_3693),64));

    tmp_5_i1_fu_3891_p2 <= "1" when (signed(j2_i_reg_3727) < signed(end_idx_1_reg_6111)) else "0";
    tmp_5_i_fu_3854_p2 <= "1" when (inp_csc_rowind_assig_q0 = i_cast1_i_reg_6056) else "0";
        tmp_6_i1_fu_3896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j2_i_reg_3727),64));

    tmp_6_i_fu_3859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_3703),64));
    tmp_7_i1_fu_3907_p2 <= "1" when (inp_csr_colind_assig_q0 = i_cast1_i1_reg_6116) else "0";
    tmp_7_i_fu_3864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_3703),64));
    tmp_8_i_fu_3912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_3737),64));
    tmp_9_i_fu_3917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_3737),64));
    tmp_fu_3901_p2 <= "1" when (col_assign_reg_3681 = ap_const_lv3_0) else "0";
    tmp_i_fu_3819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_3681),64));

    x_csc_colptr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_colptr_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_colptr_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_colptr_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            x_csc_colptr_address0 <= "XXX";
        end if; 
    end process;


    x_csc_colptr_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_colptr_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_colptr_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_colptr_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            x_csc_colptr_address1 <= "XXX";
        end if; 
    end process;


    x_csc_colptr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_colptr_ce0 <= ap_const_logic_1;
        else 
            x_csc_colptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_csc_colptr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_colptr_ce1 <= ap_const_logic_1;
        else 
            x_csc_colptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_csc_data_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_csc_data_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_csc_data_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_csc_data_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_csc_data_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_csc_data_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_csc_data_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_csc_data_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_data_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_data_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_data_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            x_csc_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    x_csc_data_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_csc_data_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_csc_data_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_csc_data_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_csc_data_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_csc_data_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_csc_data_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_csc_data_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_data_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_data_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_data_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            x_csc_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    x_csc_data_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_data_V_ce0 <= ap_const_logic_1;
        else 
            x_csc_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_csc_data_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_data_V_ce1 <= ap_const_logic_1;
        else 
            x_csc_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_csc_rowind_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_csc_rowind_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_csc_rowind_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_csc_rowind_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_csc_rowind_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_csc_rowind_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_csc_rowind_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_csc_rowind_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_rowind_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_rowind_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_rowind_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            x_csc_rowind_address0 <= "XXXXX";
        end if; 
    end process;


    x_csc_rowind_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_csc_rowind_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_csc_rowind_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_csc_rowind_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_csc_rowind_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_csc_rowind_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_csc_rowind_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_csc_rowind_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_csc_rowind_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_csc_rowind_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_csc_rowind_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            x_csc_rowind_address1 <= "XXXXX";
        end if; 
    end process;


    x_csc_rowind_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_rowind_ce0 <= ap_const_logic_1;
        else 
            x_csc_rowind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_csc_rowind_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_csc_rowind_ce1 <= ap_const_logic_1;
        else 
            x_csc_rowind_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_colind_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            y_csr_colind_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            y_csr_colind_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            y_csr_colind_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y_csr_colind_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_csr_colind_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_csr_colind_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            y_csr_colind_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_colind_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_colind_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_colind_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            y_csr_colind_address0 <= "XXXXX";
        end if; 
    end process;


    y_csr_colind_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            y_csr_colind_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            y_csr_colind_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            y_csr_colind_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y_csr_colind_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_csr_colind_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_csr_colind_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            y_csr_colind_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_colind_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_colind_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_colind_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            y_csr_colind_address1 <= "XXXXX";
        end if; 
    end process;


    y_csr_colind_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_colind_ce0 <= ap_const_logic_1;
        else 
            y_csr_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_colind_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_colind_ce1 <= ap_const_logic_1;
        else 
            y_csr_colind_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_data_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            y_csr_data_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            y_csr_data_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            y_csr_data_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y_csr_data_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_csr_data_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_csr_data_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            y_csr_data_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_data_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_data_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_data_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            y_csr_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    y_csr_data_V_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            y_csr_data_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            y_csr_data_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            y_csr_data_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y_csr_data_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_csr_data_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            y_csr_data_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            y_csr_data_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_data_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_data_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_data_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            y_csr_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    y_csr_data_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_data_V_ce0 <= ap_const_logic_1;
        else 
            y_csr_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_data_V_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_data_V_ce1 <= ap_const_logic_1;
        else 
            y_csr_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_rowptr_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_rowptr_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_rowptr_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_rowptr_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            y_csr_rowptr_address0 <= "XXX";
        end if; 
    end process;


    y_csr_rowptr_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            y_csr_rowptr_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_csr_rowptr_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_csr_rowptr_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            y_csr_rowptr_address1 <= "XXX";
        end if; 
    end process;


    y_csr_rowptr_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_rowptr_ce0 <= ap_const_logic_1;
        else 
            y_csr_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_csr_rowptr_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            y_csr_rowptr_ce1 <= ap_const_logic_1;
        else 
            y_csr_rowptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
