-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accumulate is
port (
    agg_result_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    agg_result_rowptr_ce0 : OUT STD_LOGIC;
    agg_result_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_we0 : OUT STD_LOGIC;
    agg_result_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    agg_result_rowptr_ce1 : OUT STD_LOGIC;
    agg_result_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_rowptr_we1 : OUT STD_LOGIC;
    agg_result_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_colind_ce0 : OUT STD_LOGIC;
    agg_result_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_we0 : OUT STD_LOGIC;
    agg_result_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_colind_ce1 : OUT STD_LOGIC;
    agg_result_colind_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_colind_we1 : OUT STD_LOGIC;
    agg_result_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_data_V_ce0 : OUT STD_LOGIC;
    agg_result_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_we0 : OUT STD_LOGIC;
    agg_result_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_data_V_ce1 : OUT STD_LOGIC;
    agg_result_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    agg_result_data_V_we1 : OUT STD_LOGIC;
    csr1_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr1_rowptr_ce0 : OUT STD_LOGIC;
    csr1_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_rowptr_we0 : OUT STD_LOGIC;
    csr1_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr1_rowptr_ce1 : OUT STD_LOGIC;
    csr1_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_rowptr_we1 : OUT STD_LOGIC;
    csr1_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr1_colind_ce0 : OUT STD_LOGIC;
    csr1_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_colind_we0 : OUT STD_LOGIC;
    csr1_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr1_colind_ce1 : OUT STD_LOGIC;
    csr1_colind_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_colind_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_colind_we1 : OUT STD_LOGIC;
    csr1_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr1_data_V_ce0 : OUT STD_LOGIC;
    csr1_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_data_V_we0 : OUT STD_LOGIC;
    csr1_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr1_data_V_ce1 : OUT STD_LOGIC;
    csr1_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr1_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr1_data_V_we1 : OUT STD_LOGIC;
    csr2_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_rowptr_ce0 : OUT STD_LOGIC;
    csr2_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr2_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_rowptr_we0 : OUT STD_LOGIC;
    csr2_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_rowptr_ce1 : OUT STD_LOGIC;
    csr2_rowptr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr2_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_rowptr_we1 : OUT STD_LOGIC;
    csr2_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_colind_ce0 : OUT STD_LOGIC;
    csr2_colind_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_colind_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    csr2_colind_we0 : OUT STD_LOGIC;
    csr2_colind_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_colind_ce1 : OUT STD_LOGIC;
    csr2_colind_d1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_colind_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    csr2_colind_we1 : OUT STD_LOGIC;
    csr2_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_data_V_ce0 : OUT STD_LOGIC;
    csr2_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr2_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_data_V_we0 : OUT STD_LOGIC;
    csr2_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_data_V_ce1 : OUT STD_LOGIC;
    csr2_data_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    csr2_data_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_data_V_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of accumulate is 
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal accumulate_Block_pr_U0_ap_start : STD_LOGIC;
    signal accumulate_Block_pr_U0_ap_done : STD_LOGIC;
    signal accumulate_Block_pr_U0_ap_continue : STD_LOGIC;
    signal accumulate_Block_pr_U0_ap_idle : STD_LOGIC;
    signal accumulate_Block_pr_U0_ap_ready : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal accumulate_Block_pr_U0_agg_result_rowptr_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_rowptr_we0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulate_Block_pr_U0_csr1_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal accumulate_Block_pr_U0_csr1_rowptr_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr1_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal accumulate_Block_pr_U0_csr1_rowptr_ce1 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr2_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal accumulate_Block_pr_U0_csr2_rowptr_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr2_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal accumulate_Block_pr_U0_csr2_rowptr_ce1 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr1_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_csr1_data_V_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr2_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_csr2_data_V_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_agg_result_data_V_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_data_V_we0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulate_Block_pr_U0_agg_result_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_agg_result_colind_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_colind_we0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_agg_result_colind_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulate_Block_pr_U0_csr1_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_csr1_colind_ce0 : STD_LOGIC;
    signal accumulate_Block_pr_U0_csr2_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal accumulate_Block_pr_U0_csr2_colind_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal accumulate_Block_pr_U0_start_full_n : STD_LOGIC;
    signal accumulate_Block_pr_U0_start_write : STD_LOGIC;

    component accumulate_Block_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        agg_result_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        agg_result_rowptr_ce0 : OUT STD_LOGIC;
        agg_result_rowptr_we0 : OUT STD_LOGIC;
        agg_result_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr1_rowptr_ce0 : OUT STD_LOGIC;
        csr1_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr1_rowptr_ce1 : OUT STD_LOGIC;
        csr1_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce0 : OUT STD_LOGIC;
        csr2_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce1 : OUT STD_LOGIC;
        csr2_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr1_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_data_V_ce0 : OUT STD_LOGIC;
        csr1_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_data_V_ce0 : OUT STD_LOGIC;
        csr2_data_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        agg_result_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_data_V_ce0 : OUT STD_LOGIC;
        agg_result_data_V_we0 : OUT STD_LOGIC;
        agg_result_data_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        agg_result_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        agg_result_colind_ce0 : OUT STD_LOGIC;
        agg_result_colind_we0 : OUT STD_LOGIC;
        agg_result_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        csr1_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr1_colind_ce0 : OUT STD_LOGIC;
        csr1_colind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_colind_ce0 : OUT STD_LOGIC;
        csr2_colind_q0 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    accumulate_Block_pr_U0 : component accumulate_Block_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => accumulate_Block_pr_U0_ap_start,
        ap_done => accumulate_Block_pr_U0_ap_done,
        ap_continue => accumulate_Block_pr_U0_ap_continue,
        ap_idle => accumulate_Block_pr_U0_ap_idle,
        ap_ready => accumulate_Block_pr_U0_ap_ready,
        agg_result_rowptr_address0 => accumulate_Block_pr_U0_agg_result_rowptr_address0,
        agg_result_rowptr_ce0 => accumulate_Block_pr_U0_agg_result_rowptr_ce0,
        agg_result_rowptr_we0 => accumulate_Block_pr_U0_agg_result_rowptr_we0,
        agg_result_rowptr_d0 => accumulate_Block_pr_U0_agg_result_rowptr_d0,
        agg_result_rowptr_q0 => agg_result_rowptr_q0,
        csr1_rowptr_address0 => accumulate_Block_pr_U0_csr1_rowptr_address0,
        csr1_rowptr_ce0 => accumulate_Block_pr_U0_csr1_rowptr_ce0,
        csr1_rowptr_q0 => csr1_rowptr_q0,
        csr1_rowptr_address1 => accumulate_Block_pr_U0_csr1_rowptr_address1,
        csr1_rowptr_ce1 => accumulate_Block_pr_U0_csr1_rowptr_ce1,
        csr1_rowptr_q1 => csr1_rowptr_q1,
        csr2_rowptr_address0 => accumulate_Block_pr_U0_csr2_rowptr_address0,
        csr2_rowptr_ce0 => accumulate_Block_pr_U0_csr2_rowptr_ce0,
        csr2_rowptr_q0 => csr2_rowptr_q0,
        csr2_rowptr_address1 => accumulate_Block_pr_U0_csr2_rowptr_address1,
        csr2_rowptr_ce1 => accumulate_Block_pr_U0_csr2_rowptr_ce1,
        csr2_rowptr_q1 => csr2_rowptr_q1,
        csr1_data_V_address0 => accumulate_Block_pr_U0_csr1_data_V_address0,
        csr1_data_V_ce0 => accumulate_Block_pr_U0_csr1_data_V_ce0,
        csr1_data_V_q0 => csr1_data_V_q0,
        csr2_data_V_address0 => accumulate_Block_pr_U0_csr2_data_V_address0,
        csr2_data_V_ce0 => accumulate_Block_pr_U0_csr2_data_V_ce0,
        csr2_data_V_q0 => csr2_data_V_q0,
        agg_result_data_V_address0 => accumulate_Block_pr_U0_agg_result_data_V_address0,
        agg_result_data_V_ce0 => accumulate_Block_pr_U0_agg_result_data_V_ce0,
        agg_result_data_V_we0 => accumulate_Block_pr_U0_agg_result_data_V_we0,
        agg_result_data_V_d0 => accumulate_Block_pr_U0_agg_result_data_V_d0,
        agg_result_colind_address0 => accumulate_Block_pr_U0_agg_result_colind_address0,
        agg_result_colind_ce0 => accumulate_Block_pr_U0_agg_result_colind_ce0,
        agg_result_colind_we0 => accumulate_Block_pr_U0_agg_result_colind_we0,
        agg_result_colind_d0 => accumulate_Block_pr_U0_agg_result_colind_d0,
        csr1_colind_address0 => accumulate_Block_pr_U0_csr1_colind_address0,
        csr1_colind_ce0 => accumulate_Block_pr_U0_csr1_colind_ce0,
        csr1_colind_q0 => csr1_colind_q0,
        csr2_colind_address0 => accumulate_Block_pr_U0_csr2_colind_address0,
        csr2_colind_ce0 => accumulate_Block_pr_U0_csr2_colind_ce0,
        csr2_colind_q0 => csr2_colind_q0);




    accumulate_Block_pr_U0_ap_continue <= ap_continue;
    accumulate_Block_pr_U0_ap_start <= ap_start;
    accumulate_Block_pr_U0_start_full_n <= ap_const_logic_1;
    accumulate_Block_pr_U0_start_write <= ap_const_logic_0;
    agg_result_colind_address0 <= accumulate_Block_pr_U0_agg_result_colind_address0;
    agg_result_colind_address1 <= ap_const_lv5_0;
    agg_result_colind_ce0 <= accumulate_Block_pr_U0_agg_result_colind_ce0;
    agg_result_colind_ce1 <= ap_const_logic_0;
    agg_result_colind_d0 <= accumulate_Block_pr_U0_agg_result_colind_d0;
    agg_result_colind_d1 <= ap_const_lv32_0;
    agg_result_colind_we0 <= accumulate_Block_pr_U0_agg_result_colind_we0;
    agg_result_colind_we1 <= ap_const_logic_0;
    agg_result_data_V_address0 <= accumulate_Block_pr_U0_agg_result_data_V_address0;
    agg_result_data_V_address1 <= ap_const_lv5_0;
    agg_result_data_V_ce0 <= accumulate_Block_pr_U0_agg_result_data_V_ce0;
    agg_result_data_V_ce1 <= ap_const_logic_0;
    agg_result_data_V_d0 <= accumulate_Block_pr_U0_agg_result_data_V_d0;
    agg_result_data_V_d1 <= ap_const_lv32_0;
    agg_result_data_V_we0 <= accumulate_Block_pr_U0_agg_result_data_V_we0;
    agg_result_data_V_we1 <= ap_const_logic_0;
    agg_result_rowptr_address0 <= accumulate_Block_pr_U0_agg_result_rowptr_address0;
    agg_result_rowptr_address1 <= ap_const_lv3_0;
    agg_result_rowptr_ce0 <= accumulate_Block_pr_U0_agg_result_rowptr_ce0;
    agg_result_rowptr_ce1 <= ap_const_logic_0;
    agg_result_rowptr_d0 <= accumulate_Block_pr_U0_agg_result_rowptr_d0;
    agg_result_rowptr_d1 <= ap_const_lv32_0;
    agg_result_rowptr_we0 <= accumulate_Block_pr_U0_agg_result_rowptr_we0;
    agg_result_rowptr_we1 <= ap_const_logic_0;
    ap_done <= accumulate_Block_pr_U0_ap_done;
    ap_idle <= accumulate_Block_pr_U0_ap_idle;
    ap_ready <= accumulate_Block_pr_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= accumulate_Block_pr_U0_ap_done;
    ap_sync_ready <= accumulate_Block_pr_U0_ap_ready;
    csr1_colind_address0 <= accumulate_Block_pr_U0_csr1_colind_address0;
    csr1_colind_address1 <= ap_const_lv5_0;
    csr1_colind_ce0 <= accumulate_Block_pr_U0_csr1_colind_ce0;
    csr1_colind_ce1 <= ap_const_logic_0;
    csr1_colind_d0 <= ap_const_lv32_0;
    csr1_colind_d1 <= ap_const_lv32_0;
    csr1_colind_we0 <= ap_const_logic_0;
    csr1_colind_we1 <= ap_const_logic_0;
    csr1_data_V_address0 <= accumulate_Block_pr_U0_csr1_data_V_address0;
    csr1_data_V_address1 <= ap_const_lv5_0;
    csr1_data_V_ce0 <= accumulate_Block_pr_U0_csr1_data_V_ce0;
    csr1_data_V_ce1 <= ap_const_logic_0;
    csr1_data_V_d0 <= ap_const_lv32_0;
    csr1_data_V_d1 <= ap_const_lv32_0;
    csr1_data_V_we0 <= ap_const_logic_0;
    csr1_data_V_we1 <= ap_const_logic_0;
    csr1_rowptr_address0 <= accumulate_Block_pr_U0_csr1_rowptr_address0;
    csr1_rowptr_address1 <= accumulate_Block_pr_U0_csr1_rowptr_address1;
    csr1_rowptr_ce0 <= accumulate_Block_pr_U0_csr1_rowptr_ce0;
    csr1_rowptr_ce1 <= accumulate_Block_pr_U0_csr1_rowptr_ce1;
    csr1_rowptr_d0 <= ap_const_lv32_0;
    csr1_rowptr_d1 <= ap_const_lv32_0;
    csr1_rowptr_we0 <= ap_const_logic_0;
    csr1_rowptr_we1 <= ap_const_logic_0;
    csr2_colind_address0 <= accumulate_Block_pr_U0_csr2_colind_address0;
    csr2_colind_address1 <= ap_const_lv5_0;
    csr2_colind_ce0 <= accumulate_Block_pr_U0_csr2_colind_ce0;
    csr2_colind_ce1 <= ap_const_logic_0;
    csr2_colind_d0 <= ap_const_lv3_0;
    csr2_colind_d1 <= ap_const_lv3_0;
    csr2_colind_we0 <= ap_const_logic_0;
    csr2_colind_we1 <= ap_const_logic_0;
    csr2_data_V_address0 <= accumulate_Block_pr_U0_csr2_data_V_address0;
    csr2_data_V_address1 <= ap_const_lv5_0;
    csr2_data_V_ce0 <= accumulate_Block_pr_U0_csr2_data_V_ce0;
    csr2_data_V_ce1 <= ap_const_logic_0;
    csr2_data_V_d0 <= ap_const_lv32_0;
    csr2_data_V_d1 <= ap_const_lv32_0;
    csr2_data_V_we0 <= ap_const_logic_0;
    csr2_data_V_we1 <= ap_const_logic_0;
    csr2_rowptr_address0 <= accumulate_Block_pr_U0_csr2_rowptr_address0;
    csr2_rowptr_address1 <= accumulate_Block_pr_U0_csr2_rowptr_address1;
    csr2_rowptr_ce0 <= accumulate_Block_pr_U0_csr2_rowptr_ce0;
    csr2_rowptr_ce1 <= accumulate_Block_pr_U0_csr2_rowptr_ce1;
    csr2_rowptr_d0 <= ap_const_lv32_0;
    csr2_rowptr_d1 <= ap_const_lv32_0;
    csr2_rowptr_we0 <= ap_const_logic_0;
    csr2_rowptr_we1 <= ap_const_logic_0;
end behav;
