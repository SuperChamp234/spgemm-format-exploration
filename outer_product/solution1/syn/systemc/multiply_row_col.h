// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiply_row_col_HH_
#define _multiply_row_col_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct multiply_row_col : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > agg_result_rowptr_address0;
    sc_out< sc_logic > agg_result_rowptr_ce0;
    sc_out< sc_logic > agg_result_rowptr_we0;
    sc_out< sc_lv<32> > agg_result_rowptr_d0;
    sc_out< sc_lv<5> > agg_result_colind_address0;
    sc_out< sc_logic > agg_result_colind_ce0;
    sc_out< sc_logic > agg_result_colind_we0;
    sc_out< sc_lv<3> > agg_result_colind_d0;
    sc_out< sc_lv<5> > agg_result_data_V_address0;
    sc_out< sc_logic > agg_result_data_V_ce0;
    sc_out< sc_logic > agg_result_data_V_we0;
    sc_out< sc_lv<32> > agg_result_data_V_d0;
    sc_out< sc_lv<3> > row_V_address0;
    sc_out< sc_logic > row_V_ce0;
    sc_in< sc_lv<32> > row_V_q0;
    sc_out< sc_lv<2> > col_V_address0;
    sc_out< sc_logic > col_V_ce0;
    sc_in< sc_lv<32> > col_V_q0;


    // Module declarations
    multiply_row_col(sc_module_name name);
    SC_HAS_PROCESS(multiply_row_col);

    ~multiply_row_col();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_2_fu_154_p2;
    sc_signal< sc_lv<3> > i_2_reg_240;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond1_fu_148_p2;
    sc_signal< sc_lv<48> > tmp_6_cast_fu_165_p1;
    sc_signal< sc_lv<48> > tmp_6_cast_reg_251;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > j_1_fu_175_p2;
    sc_signal< sc_lv<3> > j_1_reg_259;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_fu_169_p2;
    sc_signal< sc_lv<32> > row_V_load_reg_269;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > prod_V_reg_274;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > i_reg_115;
    sc_signal< sc_lv<3> > j_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_fu_160_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_181_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_186_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_213_p1;
    sc_signal< sc_lv<1> > tmp_1_fu_208_p2;
    sc_signal< sc_lv<32> > z_idx_fu_36;
    sc_signal< sc_lv<32> > z_idx_1_fu_219_p2;
    sc_signal< sc_lv<32> > r_V_fu_193_p0;
    sc_signal< sc_lv<32> > r_V_fu_193_p1;
    sc_signal< sc_lv<48> > r_V_fu_193_p2;
    sc_signal< sc_lv<32> > tmp_2_fu_213_p0;
    sc_signal< sc_lv<32> > z_idx_1_fu_219_p0;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_2F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_colind_address0();
    void thread_agg_result_colind_ce0();
    void thread_agg_result_colind_d0();
    void thread_agg_result_colind_we0();
    void thread_agg_result_data_V_address0();
    void thread_agg_result_data_V_ce0();
    void thread_agg_result_data_V_d0();
    void thread_agg_result_data_V_we0();
    void thread_agg_result_rowptr_address0();
    void thread_agg_result_rowptr_ce0();
    void thread_agg_result_rowptr_d0();
    void thread_agg_result_rowptr_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_V_address0();
    void thread_col_V_ce0();
    void thread_exitcond1_fu_148_p2();
    void thread_exitcond_fu_169_p2();
    void thread_i_2_fu_154_p2();
    void thread_j_1_fu_175_p2();
    void thread_r_V_fu_193_p0();
    void thread_r_V_fu_193_p1();
    void thread_r_V_fu_193_p2();
    void thread_row_V_address0();
    void thread_row_V_ce0();
    void thread_tmp_1_fu_208_p2();
    void thread_tmp_2_fu_213_p0();
    void thread_tmp_2_fu_213_p1();
    void thread_tmp_6_cast_fu_165_p1();
    void thread_tmp_8_fu_186_p1();
    void thread_tmp_9_fu_181_p1();
    void thread_tmp_fu_160_p1();
    void thread_z_idx_1_fu_219_p0();
    void thread_z_idx_1_fu_219_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
