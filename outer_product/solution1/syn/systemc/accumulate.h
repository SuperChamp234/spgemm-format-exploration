// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _accumulate_HH_
#define _accumulate_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "accumulate_Block_pr.h"

namespace ap_rtl {

struct accumulate : public sc_module {
    // Port declarations 97
    sc_out< sc_lv<3> > agg_result_rowptr_address0;
    sc_out< sc_logic > agg_result_rowptr_ce0;
    sc_out< sc_lv<32> > agg_result_rowptr_d0;
    sc_in< sc_lv<32> > agg_result_rowptr_q0;
    sc_out< sc_logic > agg_result_rowptr_we0;
    sc_out< sc_lv<3> > agg_result_rowptr_address1;
    sc_out< sc_logic > agg_result_rowptr_ce1;
    sc_out< sc_lv<32> > agg_result_rowptr_d1;
    sc_in< sc_lv<32> > agg_result_rowptr_q1;
    sc_out< sc_logic > agg_result_rowptr_we1;
    sc_out< sc_lv<5> > agg_result_colind_address0;
    sc_out< sc_logic > agg_result_colind_ce0;
    sc_out< sc_lv<32> > agg_result_colind_d0;
    sc_in< sc_lv<32> > agg_result_colind_q0;
    sc_out< sc_logic > agg_result_colind_we0;
    sc_out< sc_lv<5> > agg_result_colind_address1;
    sc_out< sc_logic > agg_result_colind_ce1;
    sc_out< sc_lv<32> > agg_result_colind_d1;
    sc_in< sc_lv<32> > agg_result_colind_q1;
    sc_out< sc_logic > agg_result_colind_we1;
    sc_out< sc_lv<5> > agg_result_data_V_address0;
    sc_out< sc_logic > agg_result_data_V_ce0;
    sc_out< sc_lv<32> > agg_result_data_V_d0;
    sc_in< sc_lv<32> > agg_result_data_V_q0;
    sc_out< sc_logic > agg_result_data_V_we0;
    sc_out< sc_lv<5> > agg_result_data_V_address1;
    sc_out< sc_logic > agg_result_data_V_ce1;
    sc_out< sc_lv<32> > agg_result_data_V_d1;
    sc_in< sc_lv<32> > agg_result_data_V_q1;
    sc_out< sc_logic > agg_result_data_V_we1;
    sc_out< sc_lv<3> > csr1_rowptr_address0;
    sc_out< sc_logic > csr1_rowptr_ce0;
    sc_out< sc_lv<32> > csr1_rowptr_d0;
    sc_in< sc_lv<32> > csr1_rowptr_q0;
    sc_out< sc_logic > csr1_rowptr_we0;
    sc_out< sc_lv<3> > csr1_rowptr_address1;
    sc_out< sc_logic > csr1_rowptr_ce1;
    sc_out< sc_lv<32> > csr1_rowptr_d1;
    sc_in< sc_lv<32> > csr1_rowptr_q1;
    sc_out< sc_logic > csr1_rowptr_we1;
    sc_out< sc_lv<5> > csr1_colind_address0;
    sc_out< sc_logic > csr1_colind_ce0;
    sc_out< sc_lv<32> > csr1_colind_d0;
    sc_in< sc_lv<32> > csr1_colind_q0;
    sc_out< sc_logic > csr1_colind_we0;
    sc_out< sc_lv<5> > csr1_colind_address1;
    sc_out< sc_logic > csr1_colind_ce1;
    sc_out< sc_lv<32> > csr1_colind_d1;
    sc_in< sc_lv<32> > csr1_colind_q1;
    sc_out< sc_logic > csr1_colind_we1;
    sc_out< sc_lv<5> > csr1_data_V_address0;
    sc_out< sc_logic > csr1_data_V_ce0;
    sc_out< sc_lv<32> > csr1_data_V_d0;
    sc_in< sc_lv<32> > csr1_data_V_q0;
    sc_out< sc_logic > csr1_data_V_we0;
    sc_out< sc_lv<5> > csr1_data_V_address1;
    sc_out< sc_logic > csr1_data_V_ce1;
    sc_out< sc_lv<32> > csr1_data_V_d1;
    sc_in< sc_lv<32> > csr1_data_V_q1;
    sc_out< sc_logic > csr1_data_V_we1;
    sc_out< sc_lv<3> > csr2_rowptr_address0;
    sc_out< sc_logic > csr2_rowptr_ce0;
    sc_out< sc_lv<32> > csr2_rowptr_d0;
    sc_in< sc_lv<32> > csr2_rowptr_q0;
    sc_out< sc_logic > csr2_rowptr_we0;
    sc_out< sc_lv<3> > csr2_rowptr_address1;
    sc_out< sc_logic > csr2_rowptr_ce1;
    sc_out< sc_lv<32> > csr2_rowptr_d1;
    sc_in< sc_lv<32> > csr2_rowptr_q1;
    sc_out< sc_logic > csr2_rowptr_we1;
    sc_out< sc_lv<5> > csr2_colind_address0;
    sc_out< sc_logic > csr2_colind_ce0;
    sc_out< sc_lv<3> > csr2_colind_d0;
    sc_in< sc_lv<3> > csr2_colind_q0;
    sc_out< sc_logic > csr2_colind_we0;
    sc_out< sc_lv<5> > csr2_colind_address1;
    sc_out< sc_logic > csr2_colind_ce1;
    sc_out< sc_lv<3> > csr2_colind_d1;
    sc_in< sc_lv<3> > csr2_colind_q1;
    sc_out< sc_logic > csr2_colind_we1;
    sc_out< sc_lv<5> > csr2_data_V_address0;
    sc_out< sc_logic > csr2_data_V_ce0;
    sc_out< sc_lv<32> > csr2_data_V_d0;
    sc_in< sc_lv<32> > csr2_data_V_q0;
    sc_out< sc_logic > csr2_data_V_we0;
    sc_out< sc_lv<5> > csr2_data_V_address1;
    sc_out< sc_logic > csr2_data_V_ce1;
    sc_out< sc_lv<32> > csr2_data_V_d1;
    sc_in< sc_lv<32> > csr2_data_V_q1;
    sc_out< sc_logic > csr2_data_V_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    accumulate(sc_module_name name);
    SC_HAS_PROCESS(accumulate);

    ~accumulate();

    sc_trace_file* mVcdFile;

    accumulate_Block_pr* accumulate_Block_pr_U0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_ap_start;
    sc_signal< sc_logic > accumulate_Block_pr_U0_ap_done;
    sc_signal< sc_logic > accumulate_Block_pr_U0_ap_continue;
    sc_signal< sc_logic > accumulate_Block_pr_U0_ap_idle;
    sc_signal< sc_logic > accumulate_Block_pr_U0_ap_ready;
    sc_signal< sc_lv<3> > accumulate_Block_pr_U0_agg_result_rowptr_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_rowptr_ce0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_rowptr_we0;
    sc_signal< sc_lv<32> > accumulate_Block_pr_U0_agg_result_rowptr_d0;
    sc_signal< sc_lv<3> > accumulate_Block_pr_U0_csr1_rowptr_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr1_rowptr_ce0;
    sc_signal< sc_lv<3> > accumulate_Block_pr_U0_csr1_rowptr_address1;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr1_rowptr_ce1;
    sc_signal< sc_lv<3> > accumulate_Block_pr_U0_csr2_rowptr_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr2_rowptr_ce0;
    sc_signal< sc_lv<3> > accumulate_Block_pr_U0_csr2_rowptr_address1;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr2_rowptr_ce1;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_csr1_data_V_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr1_data_V_ce0;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_csr2_data_V_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr2_data_V_ce0;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_agg_result_data_V_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_data_V_ce0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_data_V_we0;
    sc_signal< sc_lv<32> > accumulate_Block_pr_U0_agg_result_data_V_d0;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_agg_result_colind_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_colind_ce0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_agg_result_colind_we0;
    sc_signal< sc_lv<32> > accumulate_Block_pr_U0_agg_result_colind_d0;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_csr1_colind_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr1_colind_ce0;
    sc_signal< sc_lv<5> > accumulate_Block_pr_U0_csr2_colind_address0;
    sc_signal< sc_logic > accumulate_Block_pr_U0_csr2_colind_ce0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > accumulate_Block_pr_U0_start_full_n;
    sc_signal< sc_logic > accumulate_Block_pr_U0_start_write;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_accumulate_Block_pr_U0_ap_continue();
    void thread_accumulate_Block_pr_U0_ap_start();
    void thread_accumulate_Block_pr_U0_start_full_n();
    void thread_accumulate_Block_pr_U0_start_write();
    void thread_agg_result_colind_address0();
    void thread_agg_result_colind_address1();
    void thread_agg_result_colind_ce0();
    void thread_agg_result_colind_ce1();
    void thread_agg_result_colind_d0();
    void thread_agg_result_colind_d1();
    void thread_agg_result_colind_we0();
    void thread_agg_result_colind_we1();
    void thread_agg_result_data_V_address0();
    void thread_agg_result_data_V_address1();
    void thread_agg_result_data_V_ce0();
    void thread_agg_result_data_V_ce1();
    void thread_agg_result_data_V_d0();
    void thread_agg_result_data_V_d1();
    void thread_agg_result_data_V_we0();
    void thread_agg_result_data_V_we1();
    void thread_agg_result_rowptr_address0();
    void thread_agg_result_rowptr_address1();
    void thread_agg_result_rowptr_ce0();
    void thread_agg_result_rowptr_ce1();
    void thread_agg_result_rowptr_d0();
    void thread_agg_result_rowptr_d1();
    void thread_agg_result_rowptr_we0();
    void thread_agg_result_rowptr_we1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_csr1_colind_address0();
    void thread_csr1_colind_address1();
    void thread_csr1_colind_ce0();
    void thread_csr1_colind_ce1();
    void thread_csr1_colind_d0();
    void thread_csr1_colind_d1();
    void thread_csr1_colind_we0();
    void thread_csr1_colind_we1();
    void thread_csr1_data_V_address0();
    void thread_csr1_data_V_address1();
    void thread_csr1_data_V_ce0();
    void thread_csr1_data_V_ce1();
    void thread_csr1_data_V_d0();
    void thread_csr1_data_V_d1();
    void thread_csr1_data_V_we0();
    void thread_csr1_data_V_we1();
    void thread_csr1_rowptr_address0();
    void thread_csr1_rowptr_address1();
    void thread_csr1_rowptr_ce0();
    void thread_csr1_rowptr_ce1();
    void thread_csr1_rowptr_d0();
    void thread_csr1_rowptr_d1();
    void thread_csr1_rowptr_we0();
    void thread_csr1_rowptr_we1();
    void thread_csr2_colind_address0();
    void thread_csr2_colind_address1();
    void thread_csr2_colind_ce0();
    void thread_csr2_colind_ce1();
    void thread_csr2_colind_d0();
    void thread_csr2_colind_d1();
    void thread_csr2_colind_we0();
    void thread_csr2_colind_we1();
    void thread_csr2_data_V_address0();
    void thread_csr2_data_V_address1();
    void thread_csr2_data_V_ce0();
    void thread_csr2_data_V_ce1();
    void thread_csr2_data_V_d0();
    void thread_csr2_data_V_d1();
    void thread_csr2_data_V_we0();
    void thread_csr2_data_V_we1();
    void thread_csr2_rowptr_address0();
    void thread_csr2_rowptr_address1();
    void thread_csr2_rowptr_ce0();
    void thread_csr2_rowptr_ce1();
    void thread_csr2_rowptr_d0();
    void thread_csr2_rowptr_d1();
    void thread_csr2_rowptr_we0();
    void thread_csr2_rowptr_we1();
};

}

using namespace ap_rtl;

#endif
