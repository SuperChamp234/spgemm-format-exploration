// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_multiplier.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_multiplier::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_multiplier::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state1 = "1";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state2 = "10";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state3 = "100";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state4 = "1000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state5 = "10000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state6 = "100000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_pp0_stage0 = "1000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state12 = "10000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state13 = "100000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_pp1_stage0 = "1000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_pp1_stage1 = "10000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_pp1_stage2 = "100000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state28 = "1000000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state29 = "10000000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state30 = "100000000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state31 = "1000000000000000000";
const sc_lv<20> matrix_multiplier::ap_ST_fsm_state32 = "10000000000000000000";
const sc_lv<32> matrix_multiplier::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool matrix_multiplier::ap_const_boolean_1 = true;
const sc_lv<32> matrix_multiplier::ap_const_lv32_2 = "10";
const sc_lv<32> matrix_multiplier::ap_const_lv32_9 = "1001";
const bool matrix_multiplier::ap_const_boolean_0 = false;
const sc_lv<32> matrix_multiplier::ap_const_lv32_B = "1011";
const sc_lv<32> matrix_multiplier::ap_const_lv32_D = "1101";
const sc_lv<1> matrix_multiplier::ap_const_lv1_0 = "0";
const sc_lv<32> matrix_multiplier::ap_const_lv32_13 = "10011";
const sc_lv<32> matrix_multiplier::ap_const_lv32_E = "1110";
const sc_lv<32> matrix_multiplier::ap_const_lv32_C = "1100";
const int matrix_multiplier::C_S_AXI_DATA_WIDTH = "100000";
const int matrix_multiplier::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int matrix_multiplier::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int matrix_multiplier::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int matrix_multiplier::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> matrix_multiplier::ap_const_lv32_1 = "1";
const sc_lv<32> matrix_multiplier::ap_const_lv32_A = "1010";
const sc_lv<32> matrix_multiplier::ap_const_lv32_8 = "1000";
const sc_lv<1> matrix_multiplier::ap_const_lv1_1 = "1";
const sc_lv<2> matrix_multiplier::ap_const_lv2_0 = "00";
const sc_lv<32> matrix_multiplier::ap_const_lv32_3 = "11";
const sc_lv<3> matrix_multiplier::ap_const_lv3_0 = "000";
const sc_lv<4> matrix_multiplier::ap_const_lv4_0 = "0000";
const sc_lv<4> matrix_multiplier::ap_const_lv4_F = "1111";
const sc_lv<2> matrix_multiplier::ap_const_lv2_1 = "1";
const sc_lv<32> matrix_multiplier::ap_const_lv32_1F = "11111";
const sc_lv<2> matrix_multiplier::ap_const_lv2_3 = "11";
const sc_lv<3> matrix_multiplier::ap_const_lv3_3 = "11";
const sc_lv<4> matrix_multiplier::ap_const_lv4_6 = "110";

matrix_multiplier::matrix_multiplier(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrix_multiplier_control_s_axi_U = new matrix_multiplier_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("matrix_multiplier_control_s_axi_U");
    matrix_multiplier_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    matrix_multiplier_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    matrix_multiplier_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    matrix_multiplier_control_s_axi_U->WVALID(s_axi_control_WVALID);
    matrix_multiplier_control_s_axi_U->WREADY(s_axi_control_WREADY);
    matrix_multiplier_control_s_axi_U->WDATA(s_axi_control_WDATA);
    matrix_multiplier_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    matrix_multiplier_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    matrix_multiplier_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    matrix_multiplier_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    matrix_multiplier_control_s_axi_U->RVALID(s_axi_control_RVALID);
    matrix_multiplier_control_s_axi_U->RREADY(s_axi_control_RREADY);
    matrix_multiplier_control_s_axi_U->RDATA(s_axi_control_RDATA);
    matrix_multiplier_control_s_axi_U->RRESP(s_axi_control_RRESP);
    matrix_multiplier_control_s_axi_U->BVALID(s_axi_control_BVALID);
    matrix_multiplier_control_s_axi_U->BREADY(s_axi_control_BREADY);
    matrix_multiplier_control_s_axi_U->BRESP(s_axi_control_BRESP);
    matrix_multiplier_control_s_axi_U->ACLK(ap_clk);
    matrix_multiplier_control_s_axi_U->ARESET(ap_rst_n_inv);
    matrix_multiplier_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    matrix_multiplier_control_s_axi_U->ap_start(ap_start);
    matrix_multiplier_control_s_axi_U->interrupt(interrupt);
    matrix_multiplier_control_s_axi_U->ap_ready(ap_ready);
    matrix_multiplier_control_s_axi_U->ap_done(ap_done);
    matrix_multiplier_control_s_axi_U->ap_idle(ap_idle);
    matrix_multiplier_control_s_axi_U->matrix1(matrix1);
    matrix_multiplier_control_s_axi_U->matrix2(matrix2);
    matrix_multiplier_control_s_axi_U->output_matrix(output_matrix);
    matrix_multiplier_gmem_m_axi_U = new matrix_multiplier_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("matrix_multiplier_gmem_m_axi_U");
    matrix_multiplier_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    matrix_multiplier_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    matrix_multiplier_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    matrix_multiplier_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    matrix_multiplier_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    matrix_multiplier_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    matrix_multiplier_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    matrix_multiplier_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    matrix_multiplier_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    matrix_multiplier_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    matrix_multiplier_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    matrix_multiplier_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    matrix_multiplier_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    matrix_multiplier_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    matrix_multiplier_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    matrix_multiplier_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    matrix_multiplier_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    matrix_multiplier_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    matrix_multiplier_gmem_m_axi_U->WID(m_axi_gmem_WID);
    matrix_multiplier_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    matrix_multiplier_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    matrix_multiplier_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    matrix_multiplier_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    matrix_multiplier_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    matrix_multiplier_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    matrix_multiplier_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    matrix_multiplier_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    matrix_multiplier_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    matrix_multiplier_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    matrix_multiplier_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    matrix_multiplier_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    matrix_multiplier_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    matrix_multiplier_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    matrix_multiplier_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    matrix_multiplier_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    matrix_multiplier_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    matrix_multiplier_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    matrix_multiplier_gmem_m_axi_U->RID(m_axi_gmem_RID);
    matrix_multiplier_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    matrix_multiplier_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    matrix_multiplier_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    matrix_multiplier_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    matrix_multiplier_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    matrix_multiplier_gmem_m_axi_U->BID(m_axi_gmem_BID);
    matrix_multiplier_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    matrix_multiplier_gmem_m_axi_U->ACLK(ap_clk);
    matrix_multiplier_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    matrix_multiplier_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    matrix_multiplier_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    matrix_multiplier_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    matrix_multiplier_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    matrix_multiplier_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    matrix_multiplier_gmem_m_axi_U->I_ARSIZE(ap_var_for_const2);
    matrix_multiplier_gmem_m_axi_U->I_ARLOCK(ap_var_for_const3);
    matrix_multiplier_gmem_m_axi_U->I_ARCACHE(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_ARQOS(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_ARPROT(ap_var_for_const2);
    matrix_multiplier_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_ARBURST(ap_var_for_const3);
    matrix_multiplier_gmem_m_axi_U->I_ARREGION(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    matrix_multiplier_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    matrix_multiplier_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    matrix_multiplier_gmem_m_axi_U->I_RID(gmem_RID);
    matrix_multiplier_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    matrix_multiplier_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    matrix_multiplier_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    matrix_multiplier_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    matrix_multiplier_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    matrix_multiplier_gmem_m_axi_U->I_AWADDR(gmem_addr_1_reg_539);
    matrix_multiplier_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_AWLEN(ap_var_for_const5);
    matrix_multiplier_gmem_m_axi_U->I_AWSIZE(ap_var_for_const2);
    matrix_multiplier_gmem_m_axi_U->I_AWLOCK(ap_var_for_const3);
    matrix_multiplier_gmem_m_axi_U->I_AWCACHE(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_AWQOS(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_AWPROT(ap_var_for_const2);
    matrix_multiplier_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_AWBURST(ap_var_for_const3);
    matrix_multiplier_gmem_m_axi_U->I_AWREGION(ap_var_for_const4);
    matrix_multiplier_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    matrix_multiplier_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    matrix_multiplier_gmem_m_axi_U->I_WDATA(accumulator_1_2_reg_622);
    matrix_multiplier_gmem_m_axi_U->I_WID(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    matrix_multiplier_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    matrix_multiplier_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    matrix_multiplier_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    matrix_multiplier_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    matrix_multiplier_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    matrix_multiplier_gmem_m_axi_U->I_BID(gmem_BID);
    matrix_multiplier_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_accumulator_1_2_fu_471_p2);
    sensitive << ( result_reg_602 );
    sensitive << ( tmp1_fu_467_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_01001);
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage1_11001);
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state15_io );
    sensitive << ( ap_block_state27_io );

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state15_io );
    sensitive << ( ap_block_state27_io );

    SC_METHOD(thread_ap_block_pp1_stage2);

    SC_METHOD(thread_ap_block_pp1_stage2_01001);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage2_11001);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp1_stage2_subdone);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state15_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state16_pp1_stage2_iter0);

    SC_METHOD(thread_ap_block_state17_io);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state17_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state18_pp1_stage1_iter1);

    SC_METHOD(thread_ap_block_state19_pp1_stage2_iter1);

    SC_METHOD(thread_ap_block_state20_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state21_pp1_stage1_iter2);

    SC_METHOD(thread_ap_block_state22_pp1_stage2_iter2);
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state23_pp1_stage0_iter3);
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state24_pp1_stage1_iter3);
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state25_pp1_stage2_iter3);

    SC_METHOD(thread_ap_block_state26_pp1_stage0_iter4);

    SC_METHOD(thread_ap_block_state27_io);
    sensitive << ( exitcond2_reg_545_pp1_iter4_reg );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_METHOD(thread_ap_block_state27_pp1_stage1_iter4);

    SC_METHOD(thread_ap_condition_547);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage1_01001 );

    SC_METHOD(thread_ap_condition_559);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2_01001 );

    SC_METHOD(thread_ap_condition_572);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_ap_condition_872);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( exitcond2_reg_545_pp1_iter4_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state10);
    sensitive << ( exitcond3_fu_314_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state14);
    sensitive << ( exitcond2_fu_355_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_257_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_j1_phi_fu_207_p4);
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( j1_reg_203 );
    sensitive << ( j_2_reg_549 );

    SC_METHOD(thread_ap_phi_mux_j_phi_fu_195_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( j_reg_191 );
    sensitive << ( exitcond3_reg_530 );
    sensitive << ( j_1_reg_534 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_257_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_exitcond2_fu_355_p2);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_phi_mux_j1_phi_fu_207_p4 );

    SC_METHOD(thread_exitcond3_fu_314_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_j_phi_fu_195_p4 );

    SC_METHOD(thread_exitcond4_fu_257_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( gmem_addr_reg_524 );
    sensitive << ( matrix24_sum_cast_fu_384_p1 );
    sensitive << ( matrix24_sum8_cast_fu_415_p1 );
    sensitive << ( matrix24_sum9_cast_fu_433_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_condition_547 );
    sensitive << ( ap_condition_559 );
    sensitive << ( ap_condition_572 );

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_block_pp1_stage2_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_block_pp1_stage2_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_block_pp1_stage2_11001 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( exitcond2_reg_545_pp1_iter4_reg );
    sensitive << ( ap_block_pp1_stage1_01001 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( exitcond2_reg_545 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( exitcond2_reg_545_pp1_iter2_reg );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond2_reg_545_pp1_iter3_reg );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( exitcond2_reg_545_pp1_iter4_reg );

    SC_METHOD(thread_i_1_fu_263_p2);
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_i_cast8_fu_269_p1);
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_j1_cast3_fu_376_p1);
    sensitive << ( j1_reg_203 );

    SC_METHOD(thread_j1_cast_fu_380_p1);
    sensitive << ( j1_reg_203 );

    SC_METHOD(thread_j_1_fu_320_p2);
    sensitive << ( ap_phi_mux_j_phi_fu_195_p4 );

    SC_METHOD(thread_j_2_fu_361_p2);
    sensitive << ( ap_phi_mux_j1_phi_fu_207_p4 );

    SC_METHOD(thread_matrix12_sum_cast_fu_304_p1);
    sensitive << ( matrix12_sum_fu_299_p2 );

    SC_METHOD(thread_matrix12_sum_fu_299_p2);
    sensitive << ( tmp_12_cast_reg_506 );
    sensitive << ( tmp_11_cast_fu_295_p1 );

    SC_METHOD(thread_matrix24_sum8_cast_fu_415_p1);
    sensitive << ( matrix24_sum8_reg_565 );

    SC_METHOD(thread_matrix24_sum8_fu_404_p2);
    sensitive << ( tmp_9_cast_reg_499 );
    sensitive << ( tmp_8_1_cast_fu_400_p1 );

    SC_METHOD(thread_matrix24_sum9_cast_fu_433_p1);
    sensitive << ( matrix24_sum9_reg_581 );

    SC_METHOD(thread_matrix24_sum9_fu_428_p2);
    sensitive << ( tmp_9_cast_reg_499 );
    sensitive << ( tmp_8_2_cast_fu_425_p1 );

    SC_METHOD(thread_matrix24_sum_cast_fu_384_p1);
    sensitive << ( matrix24_sum_reg_554 );

    SC_METHOD(thread_matrix24_sum_fu_371_p2);
    sensitive << ( tmp_9_cast_reg_499 );
    sensitive << ( tmp_8_cast_fu_367_p1 );

    SC_METHOD(thread_output_matrix6_sum_c_fu_345_p1);
    sensitive << ( output_matrix6_sum_fu_341_p2 );

    SC_METHOD(thread_output_matrix6_sum_fu_341_p2);
    sensitive << ( tmp_7_cast_reg_494 );
    sensitive << ( tmp_11_cast_reg_519 );

    SC_METHOD(thread_p_shl_cast_fu_281_p1);
    sensitive << ( p_shl_fu_273_p3 );

    SC_METHOD(thread_p_shl_fu_273_p3);
    sensitive << ( i_reg_180 );

    SC_METHOD(thread_result_1_fu_454_p0);
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( row1_2_1_fu_90 );

    SC_METHOD(thread_result_1_fu_454_p2);
    sensitive << ( gmem_addr_3_read_reg_597 );
    sensitive << ( result_1_fu_454_p0 );

    SC_METHOD(thread_result_2_fu_462_p0);
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( row1_2_2_fu_94 );

    SC_METHOD(thread_result_2_fu_462_p2);
    sensitive << ( gmem_addr_4_read_reg_607 );
    sensitive << ( result_2_fu_462_p0 );

    SC_METHOD(thread_result_fu_446_p0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( row1_2_fu_86 );

    SC_METHOD(thread_result_fu_446_p2);
    sensitive << ( gmem_addr_2_read_reg_592 );
    sensitive << ( result_fu_446_p0 );

    SC_METHOD(thread_tmp1_fu_467_p2);
    sensitive << ( result_1_reg_612 );
    sensitive << ( result_2_reg_617 );

    SC_METHOD(thread_tmp_11_cast_fu_295_p1);
    sensitive << ( tmp_s_fu_291_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_253_p1);
    sensitive << ( tmp_4_fu_243_p4 );

    SC_METHOD(thread_tmp_1_fu_215_p4);
    sensitive << ( output_matrix );

    SC_METHOD(thread_tmp_2_fu_229_p4);
    sensitive << ( matrix2 );

    SC_METHOD(thread_tmp_4_fu_243_p4);
    sensitive << ( matrix1 );

    SC_METHOD(thread_tmp_7_1_fu_394_p2);
    sensitive << ( j1_cast_fu_380_p1 );

    SC_METHOD(thread_tmp_7_2_fu_409_p2);
    sensitive << ( j1_cast3_fu_376_p1 );

    SC_METHOD(thread_tmp_7_cast_fu_225_p1);
    sensitive << ( tmp_1_fu_215_p4 );

    SC_METHOD(thread_tmp_8_1_cast_fu_400_p1);
    sensitive << ( tmp_7_1_fu_394_p2 );

    SC_METHOD(thread_tmp_8_2_cast_fu_425_p1);
    sensitive << ( tmp_7_2_reg_570 );

    SC_METHOD(thread_tmp_8_cast_fu_367_p1);
    sensitive << ( ap_phi_mux_j1_phi_fu_207_p4 );

    SC_METHOD(thread_tmp_9_cast_fu_239_p1);
    sensitive << ( tmp_2_fu_229_p4 );

    SC_METHOD(thread_tmp_fu_285_p2);
    sensitive << ( p_shl_cast_fu_281_p1 );
    sensitive << ( i_cast8_fu_269_p1 );

    SC_METHOD(thread_tmp_s_fu_291_p1);
    sensitive << ( tmp_fu_285_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter4 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_257_p2 );
    sensitive << ( exitcond3_fu_314_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond2_fu_355_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp1_stage2_subdone );
    sensitive << ( ap_block_pp1_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_multiplier_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, matrix1, "matrix1");
    sc_trace(mVcdFile, matrix2, "matrix2");
    sc_trace(mVcdFile, output_matrix, "output_matrix");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter4, "ap_enable_reg_pp1_iter4");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, exitcond2_reg_545, "exitcond2_reg_545");
    sc_trace(mVcdFile, exitcond2_reg_545_pp1_iter4_reg, "exitcond2_reg_545_pp1_iter4_reg");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage2, "ap_CS_fsm_pp1_stage2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage2, "ap_block_pp1_stage2");
    sc_trace(mVcdFile, exitcond2_reg_545_pp1_iter2_reg, "exitcond2_reg_545_pp1_iter2_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, exitcond2_reg_545_pp1_iter3_reg, "exitcond2_reg_545_pp1_iter3_reg");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, j_reg_191, "j_reg_191");
    sc_trace(mVcdFile, j1_reg_203, "j1_reg_203");
    sc_trace(mVcdFile, tmp_7_cast_fu_225_p1, "tmp_7_cast_fu_225_p1");
    sc_trace(mVcdFile, tmp_7_cast_reg_494, "tmp_7_cast_reg_494");
    sc_trace(mVcdFile, tmp_9_cast_fu_239_p1, "tmp_9_cast_fu_239_p1");
    sc_trace(mVcdFile, tmp_9_cast_reg_499, "tmp_9_cast_reg_499");
    sc_trace(mVcdFile, tmp_12_cast_fu_253_p1, "tmp_12_cast_fu_253_p1");
    sc_trace(mVcdFile, tmp_12_cast_reg_506, "tmp_12_cast_reg_506");
    sc_trace(mVcdFile, i_1_fu_263_p2, "i_1_fu_263_p2");
    sc_trace(mVcdFile, i_1_reg_514, "i_1_reg_514");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_11_cast_fu_295_p1, "tmp_11_cast_fu_295_p1");
    sc_trace(mVcdFile, tmp_11_cast_reg_519, "tmp_11_cast_reg_519");
    sc_trace(mVcdFile, exitcond4_fu_257_p2, "exitcond4_fu_257_p2");
    sc_trace(mVcdFile, gmem_addr_reg_524, "gmem_addr_reg_524");
    sc_trace(mVcdFile, exitcond3_fu_314_p2, "exitcond3_fu_314_p2");
    sc_trace(mVcdFile, exitcond3_reg_530, "exitcond3_reg_530");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter0, "ap_block_state10_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_1_fu_320_p2, "j_1_fu_320_p2");
    sc_trace(mVcdFile, j_1_reg_534, "j_1_reg_534");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, gmem_addr_1_reg_539, "gmem_addr_1_reg_539");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, exitcond2_fu_355_p2, "exitcond2_fu_355_p2");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter0, "ap_block_state14_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state17_pp1_stage0_iter1, "ap_block_state17_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_block_state17_io, "ap_block_state17_io");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage0_iter2, "ap_block_state20_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage0_iter3, "ap_block_state23_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state26_pp1_stage0_iter4, "ap_block_state26_pp1_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, exitcond2_reg_545_pp1_iter1_reg, "exitcond2_reg_545_pp1_iter1_reg");
    sc_trace(mVcdFile, j_2_fu_361_p2, "j_2_fu_361_p2");
    sc_trace(mVcdFile, j_2_reg_549, "j_2_reg_549");
    sc_trace(mVcdFile, matrix24_sum_fu_371_p2, "matrix24_sum_fu_371_p2");
    sc_trace(mVcdFile, matrix24_sum_reg_554, "matrix24_sum_reg_554");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage1_iter0, "ap_block_state15_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_state18_pp1_stage1_iter1, "ap_block_state18_pp1_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage1_iter2, "ap_block_state21_pp1_stage1_iter2");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage1_iter3, "ap_block_state24_pp1_stage1_iter3");
    sc_trace(mVcdFile, ap_block_state27_pp1_stage1_iter4, "ap_block_state27_pp1_stage1_iter4");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_block_state27_io, "ap_block_state27_io");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, matrix24_sum8_fu_404_p2, "matrix24_sum8_fu_404_p2");
    sc_trace(mVcdFile, matrix24_sum8_reg_565, "matrix24_sum8_reg_565");
    sc_trace(mVcdFile, tmp_7_2_fu_409_p2, "tmp_7_2_fu_409_p2");
    sc_trace(mVcdFile, tmp_7_2_reg_570, "tmp_7_2_reg_570");
    sc_trace(mVcdFile, ap_block_state16_pp1_stage2_iter0, "ap_block_state16_pp1_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_state19_pp1_stage2_iter1, "ap_block_state19_pp1_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage2_iter2, "ap_block_state22_pp1_stage2_iter2");
    sc_trace(mVcdFile, ap_block_state25_pp1_stage2_iter3, "ap_block_state25_pp1_stage2_iter3");
    sc_trace(mVcdFile, ap_block_pp1_stage2_11001, "ap_block_pp1_stage2_11001");
    sc_trace(mVcdFile, matrix24_sum9_fu_428_p2, "matrix24_sum9_fu_428_p2");
    sc_trace(mVcdFile, matrix24_sum9_reg_581, "matrix24_sum9_reg_581");
    sc_trace(mVcdFile, gmem_addr_2_read_reg_592, "gmem_addr_2_read_reg_592");
    sc_trace(mVcdFile, gmem_addr_3_read_reg_597, "gmem_addr_3_read_reg_597");
    sc_trace(mVcdFile, result_fu_446_p2, "result_fu_446_p2");
    sc_trace(mVcdFile, result_reg_602, "result_reg_602");
    sc_trace(mVcdFile, gmem_addr_4_read_reg_607, "gmem_addr_4_read_reg_607");
    sc_trace(mVcdFile, result_1_fu_454_p2, "result_1_fu_454_p2");
    sc_trace(mVcdFile, result_1_reg_612, "result_1_reg_612");
    sc_trace(mVcdFile, result_2_fu_462_p2, "result_2_fu_462_p2");
    sc_trace(mVcdFile, result_2_reg_617, "result_2_reg_617");
    sc_trace(mVcdFile, accumulator_1_2_fu_471_p2, "accumulator_1_2_fu_471_p2");
    sc_trace(mVcdFile, accumulator_1_2_reg_622, "accumulator_1_2_reg_622");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state10, "ap_condition_pp0_exit_iter0_state10");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state14, "ap_condition_pp1_exit_iter0_state14");
    sc_trace(mVcdFile, ap_block_pp1_stage2_subdone, "ap_block_pp1_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, i_reg_180, "i_reg_180");
    sc_trace(mVcdFile, ap_phi_mux_j_phi_fu_195_p4, "ap_phi_mux_j_phi_fu_195_p4");
    sc_trace(mVcdFile, ap_phi_mux_j1_phi_fu_207_p4, "ap_phi_mux_j1_phi_fu_207_p4");
    sc_trace(mVcdFile, matrix12_sum_cast_fu_304_p1, "matrix12_sum_cast_fu_304_p1");
    sc_trace(mVcdFile, output_matrix6_sum_c_fu_345_p1, "output_matrix6_sum_c_fu_345_p1");
    sc_trace(mVcdFile, matrix24_sum_cast_fu_384_p1, "matrix24_sum_cast_fu_384_p1");
    sc_trace(mVcdFile, matrix24_sum8_cast_fu_415_p1, "matrix24_sum8_cast_fu_415_p1");
    sc_trace(mVcdFile, matrix24_sum9_cast_fu_433_p1, "matrix24_sum9_cast_fu_433_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_block_pp1_stage1_01001, "ap_block_pp1_stage1_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage2_01001, "ap_block_pp1_stage2_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, row1_2_fu_86, "row1_2_fu_86");
    sc_trace(mVcdFile, row1_2_1_fu_90, "row1_2_1_fu_90");
    sc_trace(mVcdFile, row1_2_2_fu_94, "row1_2_2_fu_94");
    sc_trace(mVcdFile, tmp_1_fu_215_p4, "tmp_1_fu_215_p4");
    sc_trace(mVcdFile, tmp_2_fu_229_p4, "tmp_2_fu_229_p4");
    sc_trace(mVcdFile, tmp_4_fu_243_p4, "tmp_4_fu_243_p4");
    sc_trace(mVcdFile, p_shl_fu_273_p3, "p_shl_fu_273_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_281_p1, "p_shl_cast_fu_281_p1");
    sc_trace(mVcdFile, i_cast8_fu_269_p1, "i_cast8_fu_269_p1");
    sc_trace(mVcdFile, tmp_fu_285_p2, "tmp_fu_285_p2");
    sc_trace(mVcdFile, tmp_s_fu_291_p1, "tmp_s_fu_291_p1");
    sc_trace(mVcdFile, matrix12_sum_fu_299_p2, "matrix12_sum_fu_299_p2");
    sc_trace(mVcdFile, output_matrix6_sum_fu_341_p2, "output_matrix6_sum_fu_341_p2");
    sc_trace(mVcdFile, tmp_8_cast_fu_367_p1, "tmp_8_cast_fu_367_p1");
    sc_trace(mVcdFile, j1_cast_fu_380_p1, "j1_cast_fu_380_p1");
    sc_trace(mVcdFile, tmp_7_1_fu_394_p2, "tmp_7_1_fu_394_p2");
    sc_trace(mVcdFile, tmp_8_1_cast_fu_400_p1, "tmp_8_1_cast_fu_400_p1");
    sc_trace(mVcdFile, j1_cast3_fu_376_p1, "j1_cast3_fu_376_p1");
    sc_trace(mVcdFile, tmp_8_2_cast_fu_425_p1, "tmp_8_2_cast_fu_425_p1");
    sc_trace(mVcdFile, result_fu_446_p0, "result_fu_446_p0");
    sc_trace(mVcdFile, result_1_fu_454_p0, "result_1_fu_454_p0");
    sc_trace(mVcdFile, result_2_fu_462_p0, "result_2_fu_462_p0");
    sc_trace(mVcdFile, tmp1_fu_467_p2, "tmp1_fu_467_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_condition_872, "ap_condition_872");
    sc_trace(mVcdFile, ap_condition_547, "ap_condition_547");
    sc_trace(mVcdFile, ap_condition_559, "ap_condition_559");
    sc_trace(mVcdFile, ap_condition_572, "ap_condition_572");
#endif

    }
    mHdltvinHandle.open("matrix_multiplier.hdltvin.dat");
    mHdltvoutHandle.open("matrix_multiplier.hdltvout.dat");
}

matrix_multiplier::~matrix_multiplier() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrix_multiplier_control_s_axi_U;
    delete matrix_multiplier_gmem_m_axi_U;
}

void matrix_multiplier::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrix_multiplier::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void matrix_multiplier::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void matrix_multiplier::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void matrix_multiplier::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv32_3;
}

void matrix_multiplier::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void matrix_multiplier::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void matrix_multiplier::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void matrix_multiplier::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state10.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state14.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter4 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp1_iter4 = ap_enable_reg_pp1_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp1_iter4 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
              esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
              esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                     esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                     esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp1_stage2_01001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_872.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read()))) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        i_reg_180 = i_1_reg_514.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_180 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
        j1_reg_203 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        j1_reg_203 = j_2_reg_549.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_reg_530.read()))) {
        j_reg_191 = j_1_reg_534.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_reg_191 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        accumulator_1_2_reg_622 = accumulator_1_2_fu_471_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond2_reg_545 = exitcond2_fu_355_p2.read();
        exitcond2_reg_545_pp1_iter1_reg = exitcond2_reg_545.read();
        exitcond2_reg_545_pp1_iter2_reg = exitcond2_reg_545_pp1_iter1_reg.read();
        exitcond2_reg_545_pp1_iter3_reg = exitcond2_reg_545_pp1_iter2_reg.read();
        exitcond2_reg_545_pp1_iter4_reg = exitcond2_reg_545_pp1_iter3_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond3_reg_530 = exitcond3_fu_314_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        gmem_addr_1_reg_539 =  (sc_lv<32>) (output_matrix6_sum_c_fu_345_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
        gmem_addr_2_read_reg_592 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_3_read_reg_597 = gmem_RDATA.read();
        result_reg_602 = result_fu_446_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0))) {
        gmem_addr_4_read_reg_607 = gmem_RDATA.read();
        result_1_reg_612 = result_1_fu_454_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_257_p2.read()))) {
        gmem_addr_reg_524 =  (sc_lv<32>) (matrix12_sum_cast_fu_304_p1.read());
        tmp_11_cast_reg_519 = tmp_11_cast_fu_295_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_514 = i_1_fu_263_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        j_1_reg_534 = j_1_fu_320_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        j_2_reg_549 = j_2_fu_361_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0))) {
        matrix24_sum8_reg_565 = matrix24_sum8_fu_404_p2.read();
        tmp_7_2_reg_570 = tmp_7_2_fu_409_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
        matrix24_sum9_reg_581 = matrix24_sum9_fu_428_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_355_p2.read()))) {
        matrix24_sum_reg_554 = matrix24_sum_fu_371_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0))) {
        result_2_reg_617 = result_2_fu_462_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(j_reg_191.read(), ap_const_lv2_1))) {
        row1_2_1_fu_90 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && !esl_seteq<1,2,2>(j_reg_191.read(), ap_const_lv2_0) && !esl_seteq<1,2,2>(j_reg_191.read(), ap_const_lv2_1))) {
        row1_2_2_fu_94 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(j_reg_191.read(), ap_const_lv2_0))) {
        row1_2_fu_86 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_12_cast_reg_506 = tmp_12_cast_fu_253_p1.read();
        tmp_7_cast_reg_494 = tmp_7_cast_fu_225_p1.read();
        tmp_9_cast_reg_499 = tmp_9_cast_fu_239_p1.read();
    }
}

void matrix_multiplier::thread_accumulator_1_2_fu_471_p2() {
    accumulator_1_2_fu_471_p2 = (!result_reg_602.read().is_01() || !tmp1_fu_467_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(result_reg_602.read()) + sc_biguint<32>(tmp1_fu_467_p2.read()));
}

void matrix_multiplier::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[9];
}

void matrix_multiplier::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[12];
}

void matrix_multiplier::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[13];
}

void matrix_multiplier::thread_ap_CS_fsm_pp1_stage2() {
    ap_CS_fsm_pp1_stage2 = ap_CS_fsm.read()[14];
}

void matrix_multiplier::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_multiplier::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void matrix_multiplier::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[11];
}

void matrix_multiplier::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_multiplier::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_multiplier::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[19];
}

void matrix_multiplier::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void matrix_multiplier::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state17_io.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void matrix_multiplier::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state17_io.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void matrix_multiplier::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_pp1_stage1_01001() {
    ap_block_pp1_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state27_io.read())));
}

void matrix_multiplier::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state27_io.read())));
}

void matrix_multiplier::thread_ap_block_pp1_stage2() {
    ap_block_pp1_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_pp1_stage2_01001() {
    ap_block_pp1_stage2_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_pp1_stage2_11001() {
    ap_block_pp1_stage2_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void matrix_multiplier::thread_ap_block_pp1_stage2_subdone() {
    ap_block_pp1_stage2_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void matrix_multiplier::thread_ap_block_state10_pp0_stage0_iter0() {
    ap_block_state10_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read());
}

void matrix_multiplier::thread_ap_block_state14_pp1_stage0_iter0() {
    ap_block_state14_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void matrix_multiplier::thread_ap_block_state15_pp1_stage1_iter0() {
    ap_block_state15_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void matrix_multiplier::thread_ap_block_state16_pp1_stage2_iter0() {
    ap_block_state16_pp1_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state17_io() {
    ap_block_state17_io = (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void matrix_multiplier::thread_ap_block_state17_pp1_stage0_iter1() {
    ap_block_state17_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state18_pp1_stage1_iter1() {
    ap_block_state18_pp1_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state19_pp1_stage2_iter1() {
    ap_block_state19_pp1_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state20_pp1_stage0_iter2() {
    ap_block_state20_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state21_pp1_stage1_iter2() {
    ap_block_state21_pp1_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state22_pp1_stage2_iter2() {
    ap_block_state22_pp1_stage2_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_state23_pp1_stage0_iter3() {
    ap_block_state23_pp1_stage0_iter3 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_state24_pp1_stage1_iter3() {
    ap_block_state24_pp1_stage1_iter3 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void matrix_multiplier::thread_ap_block_state25_pp1_stage2_iter3() {
    ap_block_state25_pp1_stage2_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state26_pp1_stage0_iter4() {
    ap_block_state26_pp1_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_block_state27_io() {
    ap_block_state27_io = (esl_seteq<1,1,1>(exitcond2_reg_545_pp1_iter4_reg.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()));
}

void matrix_multiplier::thread_ap_block_state27_pp1_stage1_iter4() {
    ap_block_state27_pp1_stage1_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiplier::thread_ap_condition_547() {
    ap_condition_547 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0));
}

void matrix_multiplier::thread_ap_condition_559() {
    ap_condition_559 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage2_01001.read(), ap_const_boolean_0));
}

void matrix_multiplier::thread_ap_condition_572() {
    ap_condition_572 = (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0));
}

void matrix_multiplier::thread_ap_condition_872() {
    ap_condition_872 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && esl_seteq<1,1,1>(exitcond2_reg_545_pp1_iter4_reg.read(), ap_const_lv1_0));
}

void matrix_multiplier::thread_ap_condition_pp0_exit_iter0_state10() {
    if (esl_seteq<1,1,1>(exitcond3_fu_314_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_condition_pp1_exit_iter0_state14() {
    if (esl_seteq<1,1,1>(exitcond2_fu_355_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_257_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrix_multiplier::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void matrix_multiplier::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter4.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_phi_mux_j1_phi_fu_207_p4() {
    if ((esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        ap_phi_mux_j1_phi_fu_207_p4 = j_2_reg_549.read();
    } else {
        ap_phi_mux_j1_phi_fu_207_p4 = j1_reg_203.read();
    }
}

void matrix_multiplier::thread_ap_phi_mux_j_phi_fu_195_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_reg_530.read()))) {
        ap_phi_mux_j_phi_fu_195_p4 = j_1_reg_534.read();
    } else {
        ap_phi_mux_j_phi_fu_195_p4 = j_reg_191.read();
    }
}

void matrix_multiplier::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_257_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void matrix_multiplier::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_exitcond2_fu_355_p2() {
    exitcond2_fu_355_p2 = (!ap_phi_mux_j1_phi_fu_207_p4.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_j1_phi_fu_207_p4.read() == ap_const_lv2_3);
}

void matrix_multiplier::thread_exitcond3_fu_314_p2() {
    exitcond3_fu_314_p2 = (!ap_phi_mux_j_phi_fu_195_p4.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_j_phi_fu_195_p4.read() == ap_const_lv2_3);
}

void matrix_multiplier::thread_exitcond4_fu_257_p2() {
    exitcond4_fu_257_p2 = (!i_reg_180.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_180.read() == ap_const_lv2_3);
}

void matrix_multiplier::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_condition_572.read(), ap_const_boolean_1)) {
            gmem_ARADDR =  (sc_lv<32>) (matrix24_sum9_cast_fu_433_p1.read());
        } else if (esl_seteq<1,1,1>(ap_condition_559.read(), ap_const_boolean_1)) {
            gmem_ARADDR =  (sc_lv<32>) (matrix24_sum8_cast_fu_415_p1.read());
        } else if (esl_seteq<1,1,1>(ap_condition_547.read(), ap_const_boolean_1)) {
            gmem_ARADDR =  (sc_lv<32>) (matrix24_sum_cast_fu_384_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            gmem_ARADDR = gmem_addr_reg_524.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matrix_multiplier::thread_gmem_ARLEN() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)))) {
        gmem_ARLEN = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        gmem_ARLEN = ap_const_lv32_3;
    } else {
        gmem_ARLEN = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matrix_multiplier::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && 
         esl_seteq<1,1,1>(exitcond2_reg_545_pp1_iter4_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void matrix_multiplier::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(exitcond2_reg_545.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_gmem_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter2_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_545_pp1_iter3_reg.read())))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond2_reg_545_pp1_iter4_reg.read(), ap_const_lv1_0))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void matrix_multiplier::thread_i_1_fu_263_p2() {
    i_1_fu_263_p2 = (!i_reg_180.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_180.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_multiplier::thread_i_cast8_fu_269_p1() {
    i_cast8_fu_269_p1 = esl_zext<5,2>(i_reg_180.read());
}

void matrix_multiplier::thread_j1_cast3_fu_376_p1() {
    j1_cast3_fu_376_p1 = esl_zext<4,2>(j1_reg_203.read());
}

void matrix_multiplier::thread_j1_cast_fu_380_p1() {
    j1_cast_fu_380_p1 = esl_zext<3,2>(j1_reg_203.read());
}

void matrix_multiplier::thread_j_1_fu_320_p2() {
    j_1_fu_320_p2 = (!ap_phi_mux_j_phi_fu_195_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_j_phi_fu_195_p4.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_multiplier::thread_j_2_fu_361_p2() {
    j_2_fu_361_p2 = (!ap_phi_mux_j1_phi_fu_207_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_j1_phi_fu_207_p4.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_multiplier::thread_matrix12_sum_cast_fu_304_p1() {
    matrix12_sum_cast_fu_304_p1 = esl_zext<64,33>(matrix12_sum_fu_299_p2.read());
}

void matrix_multiplier::thread_matrix12_sum_fu_299_p2() {
    matrix12_sum_fu_299_p2 = (!tmp_11_cast_fu_295_p1.read().is_01() || !tmp_12_cast_reg_506.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_11_cast_fu_295_p1.read()) + sc_biguint<33>(tmp_12_cast_reg_506.read()));
}

void matrix_multiplier::thread_matrix24_sum8_cast_fu_415_p1() {
    matrix24_sum8_cast_fu_415_p1 = esl_zext<64,31>(matrix24_sum8_reg_565.read());
}

void matrix_multiplier::thread_matrix24_sum8_fu_404_p2() {
    matrix24_sum8_fu_404_p2 = (!tmp_8_1_cast_fu_400_p1.read().is_01() || !tmp_9_cast_reg_499.read().is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_8_1_cast_fu_400_p1.read()) + sc_biguint<31>(tmp_9_cast_reg_499.read()));
}

void matrix_multiplier::thread_matrix24_sum9_cast_fu_433_p1() {
    matrix24_sum9_cast_fu_433_p1 = esl_zext<64,31>(matrix24_sum9_reg_581.read());
}

void matrix_multiplier::thread_matrix24_sum9_fu_428_p2() {
    matrix24_sum9_fu_428_p2 = (!tmp_8_2_cast_fu_425_p1.read().is_01() || !tmp_9_cast_reg_499.read().is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_8_2_cast_fu_425_p1.read()) + sc_biguint<31>(tmp_9_cast_reg_499.read()));
}

void matrix_multiplier::thread_matrix24_sum_cast_fu_384_p1() {
    matrix24_sum_cast_fu_384_p1 = esl_zext<64,31>(matrix24_sum_reg_554.read());
}

void matrix_multiplier::thread_matrix24_sum_fu_371_p2() {
    matrix24_sum_fu_371_p2 = (!tmp_8_cast_fu_367_p1.read().is_01() || !tmp_9_cast_reg_499.read().is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_8_cast_fu_367_p1.read()) + sc_biguint<31>(tmp_9_cast_reg_499.read()));
}

void matrix_multiplier::thread_output_matrix6_sum_c_fu_345_p1() {
    output_matrix6_sum_c_fu_345_p1 = esl_zext<64,33>(output_matrix6_sum_fu_341_p2.read());
}

void matrix_multiplier::thread_output_matrix6_sum_fu_341_p2() {
    output_matrix6_sum_fu_341_p2 = (!tmp_7_cast_reg_494.read().is_01() || !tmp_11_cast_reg_519.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_7_cast_reg_494.read()) + sc_biguint<33>(tmp_11_cast_reg_519.read()));
}

void matrix_multiplier::thread_p_shl_cast_fu_281_p1() {
    p_shl_cast_fu_281_p1 = esl_zext<5,4>(p_shl_fu_273_p3.read());
}

void matrix_multiplier::thread_p_shl_fu_273_p3() {
    p_shl_fu_273_p3 = esl_concat<2,2>(i_reg_180.read(), ap_const_lv2_0);
}

void matrix_multiplier::thread_result_1_fu_454_p0() {
    result_1_fu_454_p0 = row1_2_1_fu_90.read();
}

void matrix_multiplier::thread_result_1_fu_454_p2() {
    result_1_fu_454_p2 = (!result_1_fu_454_p0.read().is_01() || !gmem_addr_3_read_reg_597.read().is_01())? sc_lv<32>(): sc_bigint<32>(result_1_fu_454_p0.read()) * sc_bigint<32>(gmem_addr_3_read_reg_597.read());
}

void matrix_multiplier::thread_result_2_fu_462_p0() {
    result_2_fu_462_p0 = row1_2_2_fu_94.read();
}

void matrix_multiplier::thread_result_2_fu_462_p2() {
    result_2_fu_462_p2 = (!result_2_fu_462_p0.read().is_01() || !gmem_addr_4_read_reg_607.read().is_01())? sc_lv<32>(): sc_bigint<32>(result_2_fu_462_p0.read()) * sc_bigint<32>(gmem_addr_4_read_reg_607.read());
}

void matrix_multiplier::thread_result_fu_446_p0() {
    result_fu_446_p0 = row1_2_fu_86.read();
}

void matrix_multiplier::thread_result_fu_446_p2() {
    result_fu_446_p2 = (!result_fu_446_p0.read().is_01() || !gmem_addr_2_read_reg_592.read().is_01())? sc_lv<32>(): sc_bigint<32>(result_fu_446_p0.read()) * sc_bigint<32>(gmem_addr_2_read_reg_592.read());
}

void matrix_multiplier::thread_tmp1_fu_467_p2() {
    tmp1_fu_467_p2 = (!result_2_reg_617.read().is_01() || !result_1_reg_612.read().is_01())? sc_lv<32>(): (sc_biguint<32>(result_2_reg_617.read()) + sc_biguint<32>(result_1_reg_612.read()));
}

void matrix_multiplier::thread_tmp_11_cast_fu_295_p1() {
    tmp_11_cast_fu_295_p1 = esl_zext<33,32>(tmp_s_fu_291_p1.read());
}

void matrix_multiplier::thread_tmp_12_cast_fu_253_p1() {
    tmp_12_cast_fu_253_p1 = esl_zext<33,30>(tmp_4_fu_243_p4.read());
}

void matrix_multiplier::thread_tmp_1_fu_215_p4() {
    tmp_1_fu_215_p4 = output_matrix.read().range(31, 2);
}

void matrix_multiplier::thread_tmp_2_fu_229_p4() {
    tmp_2_fu_229_p4 = matrix2.read().range(31, 2);
}

void matrix_multiplier::thread_tmp_4_fu_243_p4() {
    tmp_4_fu_243_p4 = matrix1.read().range(31, 2);
}

void matrix_multiplier::thread_tmp_7_1_fu_394_p2() {
    tmp_7_1_fu_394_p2 = (!j1_cast_fu_380_p1.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<3>(): (sc_biguint<3>(j1_cast_fu_380_p1.read()) + sc_biguint<3>(ap_const_lv3_3));
}

void matrix_multiplier::thread_tmp_7_2_fu_409_p2() {
    tmp_7_2_fu_409_p2 = (!j1_cast3_fu_376_p1.read().is_01() || !ap_const_lv4_6.is_01())? sc_lv<4>(): (sc_biguint<4>(j1_cast3_fu_376_p1.read()) + sc_biguint<4>(ap_const_lv4_6));
}

void matrix_multiplier::thread_tmp_7_cast_fu_225_p1() {
    tmp_7_cast_fu_225_p1 = esl_zext<33,30>(tmp_1_fu_215_p4.read());
}

void matrix_multiplier::thread_tmp_8_1_cast_fu_400_p1() {
    tmp_8_1_cast_fu_400_p1 = esl_zext<31,3>(tmp_7_1_fu_394_p2.read());
}

void matrix_multiplier::thread_tmp_8_2_cast_fu_425_p1() {
    tmp_8_2_cast_fu_425_p1 = esl_zext<31,4>(tmp_7_2_reg_570.read());
}

void matrix_multiplier::thread_tmp_8_cast_fu_367_p1() {
    tmp_8_cast_fu_367_p1 = esl_zext<31,2>(ap_phi_mux_j1_phi_fu_207_p4.read());
}

void matrix_multiplier::thread_tmp_9_cast_fu_239_p1() {
    tmp_9_cast_fu_239_p1 = esl_zext<31,30>(tmp_2_fu_229_p4.read());
}

void matrix_multiplier::thread_tmp_fu_285_p2() {
    tmp_fu_285_p2 = (!p_shl_cast_fu_281_p1.read().is_01() || !i_cast8_fu_269_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_281_p1.read()) - sc_biguint<5>(i_cast8_fu_269_p1.read()));
}

void matrix_multiplier::thread_tmp_s_fu_291_p1() {
    tmp_s_fu_291_p1 = esl_sext<32,5>(tmp_fu_285_p2.read());
}

void matrix_multiplier::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_257_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 512 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond3_fu_314_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond3_fu_314_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond2_fu_355_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond2_fu_355_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 16384 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void matrix_multiplier::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

