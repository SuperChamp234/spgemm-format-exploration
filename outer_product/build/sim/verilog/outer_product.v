// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="outer_product_outer_product,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=8286,HLS_SYN_LUT=9830,HLS_VERSION=2020_2}" *)

module outer_product (
        ap_clk,
        ap_rst_n,
        m_axi_x_rowptr_AWVALID,
        m_axi_x_rowptr_AWREADY,
        m_axi_x_rowptr_AWADDR,
        m_axi_x_rowptr_AWID,
        m_axi_x_rowptr_AWLEN,
        m_axi_x_rowptr_AWSIZE,
        m_axi_x_rowptr_AWBURST,
        m_axi_x_rowptr_AWLOCK,
        m_axi_x_rowptr_AWCACHE,
        m_axi_x_rowptr_AWPROT,
        m_axi_x_rowptr_AWQOS,
        m_axi_x_rowptr_AWREGION,
        m_axi_x_rowptr_AWUSER,
        m_axi_x_rowptr_WVALID,
        m_axi_x_rowptr_WREADY,
        m_axi_x_rowptr_WDATA,
        m_axi_x_rowptr_WSTRB,
        m_axi_x_rowptr_WLAST,
        m_axi_x_rowptr_WID,
        m_axi_x_rowptr_WUSER,
        m_axi_x_rowptr_ARVALID,
        m_axi_x_rowptr_ARREADY,
        m_axi_x_rowptr_ARADDR,
        m_axi_x_rowptr_ARID,
        m_axi_x_rowptr_ARLEN,
        m_axi_x_rowptr_ARSIZE,
        m_axi_x_rowptr_ARBURST,
        m_axi_x_rowptr_ARLOCK,
        m_axi_x_rowptr_ARCACHE,
        m_axi_x_rowptr_ARPROT,
        m_axi_x_rowptr_ARQOS,
        m_axi_x_rowptr_ARREGION,
        m_axi_x_rowptr_ARUSER,
        m_axi_x_rowptr_RVALID,
        m_axi_x_rowptr_RREADY,
        m_axi_x_rowptr_RDATA,
        m_axi_x_rowptr_RLAST,
        m_axi_x_rowptr_RID,
        m_axi_x_rowptr_RUSER,
        m_axi_x_rowptr_RRESP,
        m_axi_x_rowptr_BVALID,
        m_axi_x_rowptr_BREADY,
        m_axi_x_rowptr_BRESP,
        m_axi_x_rowptr_BID,
        m_axi_x_rowptr_BUSER,
        m_axi_x_colind_AWVALID,
        m_axi_x_colind_AWREADY,
        m_axi_x_colind_AWADDR,
        m_axi_x_colind_AWID,
        m_axi_x_colind_AWLEN,
        m_axi_x_colind_AWSIZE,
        m_axi_x_colind_AWBURST,
        m_axi_x_colind_AWLOCK,
        m_axi_x_colind_AWCACHE,
        m_axi_x_colind_AWPROT,
        m_axi_x_colind_AWQOS,
        m_axi_x_colind_AWREGION,
        m_axi_x_colind_AWUSER,
        m_axi_x_colind_WVALID,
        m_axi_x_colind_WREADY,
        m_axi_x_colind_WDATA,
        m_axi_x_colind_WSTRB,
        m_axi_x_colind_WLAST,
        m_axi_x_colind_WID,
        m_axi_x_colind_WUSER,
        m_axi_x_colind_ARVALID,
        m_axi_x_colind_ARREADY,
        m_axi_x_colind_ARADDR,
        m_axi_x_colind_ARID,
        m_axi_x_colind_ARLEN,
        m_axi_x_colind_ARSIZE,
        m_axi_x_colind_ARBURST,
        m_axi_x_colind_ARLOCK,
        m_axi_x_colind_ARCACHE,
        m_axi_x_colind_ARPROT,
        m_axi_x_colind_ARQOS,
        m_axi_x_colind_ARREGION,
        m_axi_x_colind_ARUSER,
        m_axi_x_colind_RVALID,
        m_axi_x_colind_RREADY,
        m_axi_x_colind_RDATA,
        m_axi_x_colind_RLAST,
        m_axi_x_colind_RID,
        m_axi_x_colind_RUSER,
        m_axi_x_colind_RRESP,
        m_axi_x_colind_BVALID,
        m_axi_x_colind_BREADY,
        m_axi_x_colind_BRESP,
        m_axi_x_colind_BID,
        m_axi_x_colind_BUSER,
        m_axi_x_data_AWVALID,
        m_axi_x_data_AWREADY,
        m_axi_x_data_AWADDR,
        m_axi_x_data_AWID,
        m_axi_x_data_AWLEN,
        m_axi_x_data_AWSIZE,
        m_axi_x_data_AWBURST,
        m_axi_x_data_AWLOCK,
        m_axi_x_data_AWCACHE,
        m_axi_x_data_AWPROT,
        m_axi_x_data_AWQOS,
        m_axi_x_data_AWREGION,
        m_axi_x_data_AWUSER,
        m_axi_x_data_WVALID,
        m_axi_x_data_WREADY,
        m_axi_x_data_WDATA,
        m_axi_x_data_WSTRB,
        m_axi_x_data_WLAST,
        m_axi_x_data_WID,
        m_axi_x_data_WUSER,
        m_axi_x_data_ARVALID,
        m_axi_x_data_ARREADY,
        m_axi_x_data_ARADDR,
        m_axi_x_data_ARID,
        m_axi_x_data_ARLEN,
        m_axi_x_data_ARSIZE,
        m_axi_x_data_ARBURST,
        m_axi_x_data_ARLOCK,
        m_axi_x_data_ARCACHE,
        m_axi_x_data_ARPROT,
        m_axi_x_data_ARQOS,
        m_axi_x_data_ARREGION,
        m_axi_x_data_ARUSER,
        m_axi_x_data_RVALID,
        m_axi_x_data_RREADY,
        m_axi_x_data_RDATA,
        m_axi_x_data_RLAST,
        m_axi_x_data_RID,
        m_axi_x_data_RUSER,
        m_axi_x_data_RRESP,
        m_axi_x_data_BVALID,
        m_axi_x_data_BREADY,
        m_axi_x_data_BRESP,
        m_axi_x_data_BID,
        m_axi_x_data_BUSER,
        m_axi_y_colptr_AWVALID,
        m_axi_y_colptr_AWREADY,
        m_axi_y_colptr_AWADDR,
        m_axi_y_colptr_AWID,
        m_axi_y_colptr_AWLEN,
        m_axi_y_colptr_AWSIZE,
        m_axi_y_colptr_AWBURST,
        m_axi_y_colptr_AWLOCK,
        m_axi_y_colptr_AWCACHE,
        m_axi_y_colptr_AWPROT,
        m_axi_y_colptr_AWQOS,
        m_axi_y_colptr_AWREGION,
        m_axi_y_colptr_AWUSER,
        m_axi_y_colptr_WVALID,
        m_axi_y_colptr_WREADY,
        m_axi_y_colptr_WDATA,
        m_axi_y_colptr_WSTRB,
        m_axi_y_colptr_WLAST,
        m_axi_y_colptr_WID,
        m_axi_y_colptr_WUSER,
        m_axi_y_colptr_ARVALID,
        m_axi_y_colptr_ARREADY,
        m_axi_y_colptr_ARADDR,
        m_axi_y_colptr_ARID,
        m_axi_y_colptr_ARLEN,
        m_axi_y_colptr_ARSIZE,
        m_axi_y_colptr_ARBURST,
        m_axi_y_colptr_ARLOCK,
        m_axi_y_colptr_ARCACHE,
        m_axi_y_colptr_ARPROT,
        m_axi_y_colptr_ARQOS,
        m_axi_y_colptr_ARREGION,
        m_axi_y_colptr_ARUSER,
        m_axi_y_colptr_RVALID,
        m_axi_y_colptr_RREADY,
        m_axi_y_colptr_RDATA,
        m_axi_y_colptr_RLAST,
        m_axi_y_colptr_RID,
        m_axi_y_colptr_RUSER,
        m_axi_y_colptr_RRESP,
        m_axi_y_colptr_BVALID,
        m_axi_y_colptr_BREADY,
        m_axi_y_colptr_BRESP,
        m_axi_y_colptr_BID,
        m_axi_y_colptr_BUSER,
        m_axi_y_rowind_AWVALID,
        m_axi_y_rowind_AWREADY,
        m_axi_y_rowind_AWADDR,
        m_axi_y_rowind_AWID,
        m_axi_y_rowind_AWLEN,
        m_axi_y_rowind_AWSIZE,
        m_axi_y_rowind_AWBURST,
        m_axi_y_rowind_AWLOCK,
        m_axi_y_rowind_AWCACHE,
        m_axi_y_rowind_AWPROT,
        m_axi_y_rowind_AWQOS,
        m_axi_y_rowind_AWREGION,
        m_axi_y_rowind_AWUSER,
        m_axi_y_rowind_WVALID,
        m_axi_y_rowind_WREADY,
        m_axi_y_rowind_WDATA,
        m_axi_y_rowind_WSTRB,
        m_axi_y_rowind_WLAST,
        m_axi_y_rowind_WID,
        m_axi_y_rowind_WUSER,
        m_axi_y_rowind_ARVALID,
        m_axi_y_rowind_ARREADY,
        m_axi_y_rowind_ARADDR,
        m_axi_y_rowind_ARID,
        m_axi_y_rowind_ARLEN,
        m_axi_y_rowind_ARSIZE,
        m_axi_y_rowind_ARBURST,
        m_axi_y_rowind_ARLOCK,
        m_axi_y_rowind_ARCACHE,
        m_axi_y_rowind_ARPROT,
        m_axi_y_rowind_ARQOS,
        m_axi_y_rowind_ARREGION,
        m_axi_y_rowind_ARUSER,
        m_axi_y_rowind_RVALID,
        m_axi_y_rowind_RREADY,
        m_axi_y_rowind_RDATA,
        m_axi_y_rowind_RLAST,
        m_axi_y_rowind_RID,
        m_axi_y_rowind_RUSER,
        m_axi_y_rowind_RRESP,
        m_axi_y_rowind_BVALID,
        m_axi_y_rowind_BREADY,
        m_axi_y_rowind_BRESP,
        m_axi_y_rowind_BID,
        m_axi_y_rowind_BUSER,
        m_axi_y_data_AWVALID,
        m_axi_y_data_AWREADY,
        m_axi_y_data_AWADDR,
        m_axi_y_data_AWID,
        m_axi_y_data_AWLEN,
        m_axi_y_data_AWSIZE,
        m_axi_y_data_AWBURST,
        m_axi_y_data_AWLOCK,
        m_axi_y_data_AWCACHE,
        m_axi_y_data_AWPROT,
        m_axi_y_data_AWQOS,
        m_axi_y_data_AWREGION,
        m_axi_y_data_AWUSER,
        m_axi_y_data_WVALID,
        m_axi_y_data_WREADY,
        m_axi_y_data_WDATA,
        m_axi_y_data_WSTRB,
        m_axi_y_data_WLAST,
        m_axi_y_data_WID,
        m_axi_y_data_WUSER,
        m_axi_y_data_ARVALID,
        m_axi_y_data_ARREADY,
        m_axi_y_data_ARADDR,
        m_axi_y_data_ARID,
        m_axi_y_data_ARLEN,
        m_axi_y_data_ARSIZE,
        m_axi_y_data_ARBURST,
        m_axi_y_data_ARLOCK,
        m_axi_y_data_ARCACHE,
        m_axi_y_data_ARPROT,
        m_axi_y_data_ARQOS,
        m_axi_y_data_ARREGION,
        m_axi_y_data_ARUSER,
        m_axi_y_data_RVALID,
        m_axi_y_data_RREADY,
        m_axi_y_data_RDATA,
        m_axi_y_data_RLAST,
        m_axi_y_data_RID,
        m_axi_y_data_RUSER,
        m_axi_y_data_RRESP,
        m_axi_y_data_BVALID,
        m_axi_y_data_BREADY,
        m_axi_y_data_BRESP,
        m_axi_y_data_BID,
        m_axi_y_data_BUSER,
        m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY,
        m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY,
        m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST,
        m_axi_z_rowptr_RID,
        m_axi_z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID,
        m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP,
        m_axi_z_rowptr_BID,
        m_axi_z_rowptr_BUSER,
        m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY,
        m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY,
        m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST,
        m_axi_z_colind_WID,
        m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY,
        m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID,
        m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA,
        m_axi_z_colind_RLAST,
        m_axi_z_colind_RID,
        m_axi_z_colind_RUSER,
        m_axi_z_colind_RRESP,
        m_axi_z_colind_BVALID,
        m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP,
        m_axi_z_colind_BID,
        m_axi_z_colind_BUSER,
        m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY,
        m_axi_z_data_AWADDR,
        m_axi_z_data_AWID,
        m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID,
        m_axi_z_data_WREADY,
        m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST,
        m_axi_z_data_WID,
        m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY,
        m_axi_z_data_ARADDR,
        m_axi_z_data_ARID,
        m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID,
        m_axi_z_data_RREADY,
        m_axi_z_data_RDATA,
        m_axi_z_data_RLAST,
        m_axi_z_data_RID,
        m_axi_z_data_RUSER,
        m_axi_z_data_RRESP,
        m_axi_z_data_BVALID,
        m_axi_z_data_BREADY,
        m_axi_z_data_BRESP,
        m_axi_z_data_BID,
        m_axi_z_data_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 92'd1;
parameter    ap_ST_fsm_state2 = 92'd2;
parameter    ap_ST_fsm_state3 = 92'd4;
parameter    ap_ST_fsm_state4 = 92'd8;
parameter    ap_ST_fsm_state5 = 92'd16;
parameter    ap_ST_fsm_state6 = 92'd32;
parameter    ap_ST_fsm_state7 = 92'd64;
parameter    ap_ST_fsm_state8 = 92'd128;
parameter    ap_ST_fsm_state9 = 92'd256;
parameter    ap_ST_fsm_state10 = 92'd512;
parameter    ap_ST_fsm_state11 = 92'd1024;
parameter    ap_ST_fsm_state12 = 92'd2048;
parameter    ap_ST_fsm_state13 = 92'd4096;
parameter    ap_ST_fsm_state14 = 92'd8192;
parameter    ap_ST_fsm_state15 = 92'd16384;
parameter    ap_ST_fsm_state16 = 92'd32768;
parameter    ap_ST_fsm_state17 = 92'd65536;
parameter    ap_ST_fsm_state18 = 92'd131072;
parameter    ap_ST_fsm_state19 = 92'd262144;
parameter    ap_ST_fsm_state20 = 92'd524288;
parameter    ap_ST_fsm_state21 = 92'd1048576;
parameter    ap_ST_fsm_state22 = 92'd2097152;
parameter    ap_ST_fsm_state23 = 92'd4194304;
parameter    ap_ST_fsm_state24 = 92'd8388608;
parameter    ap_ST_fsm_state25 = 92'd16777216;
parameter    ap_ST_fsm_state26 = 92'd33554432;
parameter    ap_ST_fsm_state27 = 92'd67108864;
parameter    ap_ST_fsm_state28 = 92'd134217728;
parameter    ap_ST_fsm_state29 = 92'd268435456;
parameter    ap_ST_fsm_state30 = 92'd536870912;
parameter    ap_ST_fsm_state31 = 92'd1073741824;
parameter    ap_ST_fsm_state32 = 92'd2147483648;
parameter    ap_ST_fsm_state33 = 92'd4294967296;
parameter    ap_ST_fsm_state34 = 92'd8589934592;
parameter    ap_ST_fsm_state35 = 92'd17179869184;
parameter    ap_ST_fsm_state36 = 92'd34359738368;
parameter    ap_ST_fsm_state37 = 92'd68719476736;
parameter    ap_ST_fsm_state38 = 92'd137438953472;
parameter    ap_ST_fsm_state39 = 92'd274877906944;
parameter    ap_ST_fsm_state40 = 92'd549755813888;
parameter    ap_ST_fsm_state41 = 92'd1099511627776;
parameter    ap_ST_fsm_state42 = 92'd2199023255552;
parameter    ap_ST_fsm_state43 = 92'd4398046511104;
parameter    ap_ST_fsm_state44 = 92'd8796093022208;
parameter    ap_ST_fsm_state45 = 92'd17592186044416;
parameter    ap_ST_fsm_state46 = 92'd35184372088832;
parameter    ap_ST_fsm_state47 = 92'd70368744177664;
parameter    ap_ST_fsm_state48 = 92'd140737488355328;
parameter    ap_ST_fsm_state49 = 92'd281474976710656;
parameter    ap_ST_fsm_state50 = 92'd562949953421312;
parameter    ap_ST_fsm_state51 = 92'd1125899906842624;
parameter    ap_ST_fsm_state52 = 92'd2251799813685248;
parameter    ap_ST_fsm_state53 = 92'd4503599627370496;
parameter    ap_ST_fsm_state54 = 92'd9007199254740992;
parameter    ap_ST_fsm_state55 = 92'd18014398509481984;
parameter    ap_ST_fsm_state56 = 92'd36028797018963968;
parameter    ap_ST_fsm_state57 = 92'd72057594037927936;
parameter    ap_ST_fsm_state58 = 92'd144115188075855872;
parameter    ap_ST_fsm_state59 = 92'd288230376151711744;
parameter    ap_ST_fsm_state60 = 92'd576460752303423488;
parameter    ap_ST_fsm_state61 = 92'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 92'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 92'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 92'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 92'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 92'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 92'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 92'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 92'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 92'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 92'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 92'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 92'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 92'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 92'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 92'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 92'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 92'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 92'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 92'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 92'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 92'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 92'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 92'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 92'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 92'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 92'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 92'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 92'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 92'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 92'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 92'd2475880078570760549798248448;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_X_ROWPTR_ID_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_ROWPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_X_ROWPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_X_ROWPTR_USER_VALUE = 0;
parameter    C_M_AXI_X_ROWPTR_PROT_VALUE = 0;
parameter    C_M_AXI_X_ROWPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_X_COLIND_ID_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_COLIND_DATA_WIDTH = 32;
parameter    C_M_AXI_X_COLIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_TARGET_ADDR = 0;
parameter    C_M_AXI_X_COLIND_USER_VALUE = 0;
parameter    C_M_AXI_X_COLIND_PROT_VALUE = 0;
parameter    C_M_AXI_X_COLIND_CACHE_VALUE = 3;
parameter    C_M_AXI_X_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_X_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_X_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_X_DATA_USER_VALUE = 0;
parameter    C_M_AXI_X_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_X_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_COLPTR_ID_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_COLPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_COLPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_COLPTR_USER_VALUE = 0;
parameter    C_M_AXI_Y_COLPTR_PROT_VALUE = 0;
parameter    C_M_AXI_Y_COLPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_ROWIND_ID_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_ROWIND_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_ROWIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWIND_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_ROWIND_USER_VALUE = 0;
parameter    C_M_AXI_Y_ROWIND_PROT_VALUE = 0;
parameter    C_M_AXI_Y_ROWIND_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_DATA_USER_VALUE = 0;
parameter    C_M_AXI_Y_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_Y_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_ROWPTR_ID_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_ROWPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_ROWPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_ROWPTR_USER_VALUE = 0;
parameter    C_M_AXI_Z_ROWPTR_PROT_VALUE = 0;
parameter    C_M_AXI_Z_ROWPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_COLIND_ID_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_COLIND_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_COLIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_COLIND_USER_VALUE = 0;
parameter    C_M_AXI_Z_COLIND_PROT_VALUE = 0;
parameter    C_M_AXI_Z_COLIND_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_DATA_USER_VALUE = 0;
parameter    C_M_AXI_Z_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_Z_DATA_CACHE_VALUE = 3;

parameter C_M_AXI_Y_ROWIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_COLIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_ROWPTR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Y_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Y_COLPTR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_COLIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_ROWPTR_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_x_rowptr_AWVALID;
input   m_axi_x_rowptr_AWREADY;
output  [C_M_AXI_X_ROWPTR_ADDR_WIDTH - 1:0] m_axi_x_rowptr_AWADDR;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_AWID;
output  [7:0] m_axi_x_rowptr_AWLEN;
output  [2:0] m_axi_x_rowptr_AWSIZE;
output  [1:0] m_axi_x_rowptr_AWBURST;
output  [1:0] m_axi_x_rowptr_AWLOCK;
output  [3:0] m_axi_x_rowptr_AWCACHE;
output  [2:0] m_axi_x_rowptr_AWPROT;
output  [3:0] m_axi_x_rowptr_AWQOS;
output  [3:0] m_axi_x_rowptr_AWREGION;
output  [C_M_AXI_X_ROWPTR_AWUSER_WIDTH - 1:0] m_axi_x_rowptr_AWUSER;
output   m_axi_x_rowptr_WVALID;
input   m_axi_x_rowptr_WREADY;
output  [C_M_AXI_X_ROWPTR_DATA_WIDTH - 1:0] m_axi_x_rowptr_WDATA;
output  [C_M_AXI_X_ROWPTR_WSTRB_WIDTH - 1:0] m_axi_x_rowptr_WSTRB;
output   m_axi_x_rowptr_WLAST;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_WID;
output  [C_M_AXI_X_ROWPTR_WUSER_WIDTH - 1:0] m_axi_x_rowptr_WUSER;
output   m_axi_x_rowptr_ARVALID;
input   m_axi_x_rowptr_ARREADY;
output  [C_M_AXI_X_ROWPTR_ADDR_WIDTH - 1:0] m_axi_x_rowptr_ARADDR;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_ARID;
output  [7:0] m_axi_x_rowptr_ARLEN;
output  [2:0] m_axi_x_rowptr_ARSIZE;
output  [1:0] m_axi_x_rowptr_ARBURST;
output  [1:0] m_axi_x_rowptr_ARLOCK;
output  [3:0] m_axi_x_rowptr_ARCACHE;
output  [2:0] m_axi_x_rowptr_ARPROT;
output  [3:0] m_axi_x_rowptr_ARQOS;
output  [3:0] m_axi_x_rowptr_ARREGION;
output  [C_M_AXI_X_ROWPTR_ARUSER_WIDTH - 1:0] m_axi_x_rowptr_ARUSER;
input   m_axi_x_rowptr_RVALID;
output   m_axi_x_rowptr_RREADY;
input  [C_M_AXI_X_ROWPTR_DATA_WIDTH - 1:0] m_axi_x_rowptr_RDATA;
input   m_axi_x_rowptr_RLAST;
input  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_RID;
input  [C_M_AXI_X_ROWPTR_RUSER_WIDTH - 1:0] m_axi_x_rowptr_RUSER;
input  [1:0] m_axi_x_rowptr_RRESP;
input   m_axi_x_rowptr_BVALID;
output   m_axi_x_rowptr_BREADY;
input  [1:0] m_axi_x_rowptr_BRESP;
input  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_BID;
input  [C_M_AXI_X_ROWPTR_BUSER_WIDTH - 1:0] m_axi_x_rowptr_BUSER;
output   m_axi_x_colind_AWVALID;
input   m_axi_x_colind_AWREADY;
output  [C_M_AXI_X_COLIND_ADDR_WIDTH - 1:0] m_axi_x_colind_AWADDR;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_AWID;
output  [7:0] m_axi_x_colind_AWLEN;
output  [2:0] m_axi_x_colind_AWSIZE;
output  [1:0] m_axi_x_colind_AWBURST;
output  [1:0] m_axi_x_colind_AWLOCK;
output  [3:0] m_axi_x_colind_AWCACHE;
output  [2:0] m_axi_x_colind_AWPROT;
output  [3:0] m_axi_x_colind_AWQOS;
output  [3:0] m_axi_x_colind_AWREGION;
output  [C_M_AXI_X_COLIND_AWUSER_WIDTH - 1:0] m_axi_x_colind_AWUSER;
output   m_axi_x_colind_WVALID;
input   m_axi_x_colind_WREADY;
output  [C_M_AXI_X_COLIND_DATA_WIDTH - 1:0] m_axi_x_colind_WDATA;
output  [C_M_AXI_X_COLIND_WSTRB_WIDTH - 1:0] m_axi_x_colind_WSTRB;
output   m_axi_x_colind_WLAST;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_WID;
output  [C_M_AXI_X_COLIND_WUSER_WIDTH - 1:0] m_axi_x_colind_WUSER;
output   m_axi_x_colind_ARVALID;
input   m_axi_x_colind_ARREADY;
output  [C_M_AXI_X_COLIND_ADDR_WIDTH - 1:0] m_axi_x_colind_ARADDR;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_ARID;
output  [7:0] m_axi_x_colind_ARLEN;
output  [2:0] m_axi_x_colind_ARSIZE;
output  [1:0] m_axi_x_colind_ARBURST;
output  [1:0] m_axi_x_colind_ARLOCK;
output  [3:0] m_axi_x_colind_ARCACHE;
output  [2:0] m_axi_x_colind_ARPROT;
output  [3:0] m_axi_x_colind_ARQOS;
output  [3:0] m_axi_x_colind_ARREGION;
output  [C_M_AXI_X_COLIND_ARUSER_WIDTH - 1:0] m_axi_x_colind_ARUSER;
input   m_axi_x_colind_RVALID;
output   m_axi_x_colind_RREADY;
input  [C_M_AXI_X_COLIND_DATA_WIDTH - 1:0] m_axi_x_colind_RDATA;
input   m_axi_x_colind_RLAST;
input  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_RID;
input  [C_M_AXI_X_COLIND_RUSER_WIDTH - 1:0] m_axi_x_colind_RUSER;
input  [1:0] m_axi_x_colind_RRESP;
input   m_axi_x_colind_BVALID;
output   m_axi_x_colind_BREADY;
input  [1:0] m_axi_x_colind_BRESP;
input  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_BID;
input  [C_M_AXI_X_COLIND_BUSER_WIDTH - 1:0] m_axi_x_colind_BUSER;
output   m_axi_x_data_AWVALID;
input   m_axi_x_data_AWREADY;
output  [C_M_AXI_X_DATA_ADDR_WIDTH - 1:0] m_axi_x_data_AWADDR;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_AWID;
output  [7:0] m_axi_x_data_AWLEN;
output  [2:0] m_axi_x_data_AWSIZE;
output  [1:0] m_axi_x_data_AWBURST;
output  [1:0] m_axi_x_data_AWLOCK;
output  [3:0] m_axi_x_data_AWCACHE;
output  [2:0] m_axi_x_data_AWPROT;
output  [3:0] m_axi_x_data_AWQOS;
output  [3:0] m_axi_x_data_AWREGION;
output  [C_M_AXI_X_DATA_AWUSER_WIDTH - 1:0] m_axi_x_data_AWUSER;
output   m_axi_x_data_WVALID;
input   m_axi_x_data_WREADY;
output  [C_M_AXI_X_DATA_DATA_WIDTH - 1:0] m_axi_x_data_WDATA;
output  [C_M_AXI_X_DATA_WSTRB_WIDTH - 1:0] m_axi_x_data_WSTRB;
output   m_axi_x_data_WLAST;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_WID;
output  [C_M_AXI_X_DATA_WUSER_WIDTH - 1:0] m_axi_x_data_WUSER;
output   m_axi_x_data_ARVALID;
input   m_axi_x_data_ARREADY;
output  [C_M_AXI_X_DATA_ADDR_WIDTH - 1:0] m_axi_x_data_ARADDR;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_ARID;
output  [7:0] m_axi_x_data_ARLEN;
output  [2:0] m_axi_x_data_ARSIZE;
output  [1:0] m_axi_x_data_ARBURST;
output  [1:0] m_axi_x_data_ARLOCK;
output  [3:0] m_axi_x_data_ARCACHE;
output  [2:0] m_axi_x_data_ARPROT;
output  [3:0] m_axi_x_data_ARQOS;
output  [3:0] m_axi_x_data_ARREGION;
output  [C_M_AXI_X_DATA_ARUSER_WIDTH - 1:0] m_axi_x_data_ARUSER;
input   m_axi_x_data_RVALID;
output   m_axi_x_data_RREADY;
input  [C_M_AXI_X_DATA_DATA_WIDTH - 1:0] m_axi_x_data_RDATA;
input   m_axi_x_data_RLAST;
input  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_RID;
input  [C_M_AXI_X_DATA_RUSER_WIDTH - 1:0] m_axi_x_data_RUSER;
input  [1:0] m_axi_x_data_RRESP;
input   m_axi_x_data_BVALID;
output   m_axi_x_data_BREADY;
input  [1:0] m_axi_x_data_BRESP;
input  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_BID;
input  [C_M_AXI_X_DATA_BUSER_WIDTH - 1:0] m_axi_x_data_BUSER;
output   m_axi_y_colptr_AWVALID;
input   m_axi_y_colptr_AWREADY;
output  [C_M_AXI_Y_COLPTR_ADDR_WIDTH - 1:0] m_axi_y_colptr_AWADDR;
output  [C_M_AXI_Y_COLPTR_ID_WIDTH - 1:0] m_axi_y_colptr_AWID;
output  [7:0] m_axi_y_colptr_AWLEN;
output  [2:0] m_axi_y_colptr_AWSIZE;
output  [1:0] m_axi_y_colptr_AWBURST;
output  [1:0] m_axi_y_colptr_AWLOCK;
output  [3:0] m_axi_y_colptr_AWCACHE;
output  [2:0] m_axi_y_colptr_AWPROT;
output  [3:0] m_axi_y_colptr_AWQOS;
output  [3:0] m_axi_y_colptr_AWREGION;
output  [C_M_AXI_Y_COLPTR_AWUSER_WIDTH - 1:0] m_axi_y_colptr_AWUSER;
output   m_axi_y_colptr_WVALID;
input   m_axi_y_colptr_WREADY;
output  [C_M_AXI_Y_COLPTR_DATA_WIDTH - 1:0] m_axi_y_colptr_WDATA;
output  [C_M_AXI_Y_COLPTR_WSTRB_WIDTH - 1:0] m_axi_y_colptr_WSTRB;
output   m_axi_y_colptr_WLAST;
output  [C_M_AXI_Y_COLPTR_ID_WIDTH - 1:0] m_axi_y_colptr_WID;
output  [C_M_AXI_Y_COLPTR_WUSER_WIDTH - 1:0] m_axi_y_colptr_WUSER;
output   m_axi_y_colptr_ARVALID;
input   m_axi_y_colptr_ARREADY;
output  [C_M_AXI_Y_COLPTR_ADDR_WIDTH - 1:0] m_axi_y_colptr_ARADDR;
output  [C_M_AXI_Y_COLPTR_ID_WIDTH - 1:0] m_axi_y_colptr_ARID;
output  [7:0] m_axi_y_colptr_ARLEN;
output  [2:0] m_axi_y_colptr_ARSIZE;
output  [1:0] m_axi_y_colptr_ARBURST;
output  [1:0] m_axi_y_colptr_ARLOCK;
output  [3:0] m_axi_y_colptr_ARCACHE;
output  [2:0] m_axi_y_colptr_ARPROT;
output  [3:0] m_axi_y_colptr_ARQOS;
output  [3:0] m_axi_y_colptr_ARREGION;
output  [C_M_AXI_Y_COLPTR_ARUSER_WIDTH - 1:0] m_axi_y_colptr_ARUSER;
input   m_axi_y_colptr_RVALID;
output   m_axi_y_colptr_RREADY;
input  [C_M_AXI_Y_COLPTR_DATA_WIDTH - 1:0] m_axi_y_colptr_RDATA;
input   m_axi_y_colptr_RLAST;
input  [C_M_AXI_Y_COLPTR_ID_WIDTH - 1:0] m_axi_y_colptr_RID;
input  [C_M_AXI_Y_COLPTR_RUSER_WIDTH - 1:0] m_axi_y_colptr_RUSER;
input  [1:0] m_axi_y_colptr_RRESP;
input   m_axi_y_colptr_BVALID;
output   m_axi_y_colptr_BREADY;
input  [1:0] m_axi_y_colptr_BRESP;
input  [C_M_AXI_Y_COLPTR_ID_WIDTH - 1:0] m_axi_y_colptr_BID;
input  [C_M_AXI_Y_COLPTR_BUSER_WIDTH - 1:0] m_axi_y_colptr_BUSER;
output   m_axi_y_rowind_AWVALID;
input   m_axi_y_rowind_AWREADY;
output  [C_M_AXI_Y_ROWIND_ADDR_WIDTH - 1:0] m_axi_y_rowind_AWADDR;
output  [C_M_AXI_Y_ROWIND_ID_WIDTH - 1:0] m_axi_y_rowind_AWID;
output  [7:0] m_axi_y_rowind_AWLEN;
output  [2:0] m_axi_y_rowind_AWSIZE;
output  [1:0] m_axi_y_rowind_AWBURST;
output  [1:0] m_axi_y_rowind_AWLOCK;
output  [3:0] m_axi_y_rowind_AWCACHE;
output  [2:0] m_axi_y_rowind_AWPROT;
output  [3:0] m_axi_y_rowind_AWQOS;
output  [3:0] m_axi_y_rowind_AWREGION;
output  [C_M_AXI_Y_ROWIND_AWUSER_WIDTH - 1:0] m_axi_y_rowind_AWUSER;
output   m_axi_y_rowind_WVALID;
input   m_axi_y_rowind_WREADY;
output  [C_M_AXI_Y_ROWIND_DATA_WIDTH - 1:0] m_axi_y_rowind_WDATA;
output  [C_M_AXI_Y_ROWIND_WSTRB_WIDTH - 1:0] m_axi_y_rowind_WSTRB;
output   m_axi_y_rowind_WLAST;
output  [C_M_AXI_Y_ROWIND_ID_WIDTH - 1:0] m_axi_y_rowind_WID;
output  [C_M_AXI_Y_ROWIND_WUSER_WIDTH - 1:0] m_axi_y_rowind_WUSER;
output   m_axi_y_rowind_ARVALID;
input   m_axi_y_rowind_ARREADY;
output  [C_M_AXI_Y_ROWIND_ADDR_WIDTH - 1:0] m_axi_y_rowind_ARADDR;
output  [C_M_AXI_Y_ROWIND_ID_WIDTH - 1:0] m_axi_y_rowind_ARID;
output  [7:0] m_axi_y_rowind_ARLEN;
output  [2:0] m_axi_y_rowind_ARSIZE;
output  [1:0] m_axi_y_rowind_ARBURST;
output  [1:0] m_axi_y_rowind_ARLOCK;
output  [3:0] m_axi_y_rowind_ARCACHE;
output  [2:0] m_axi_y_rowind_ARPROT;
output  [3:0] m_axi_y_rowind_ARQOS;
output  [3:0] m_axi_y_rowind_ARREGION;
output  [C_M_AXI_Y_ROWIND_ARUSER_WIDTH - 1:0] m_axi_y_rowind_ARUSER;
input   m_axi_y_rowind_RVALID;
output   m_axi_y_rowind_RREADY;
input  [C_M_AXI_Y_ROWIND_DATA_WIDTH - 1:0] m_axi_y_rowind_RDATA;
input   m_axi_y_rowind_RLAST;
input  [C_M_AXI_Y_ROWIND_ID_WIDTH - 1:0] m_axi_y_rowind_RID;
input  [C_M_AXI_Y_ROWIND_RUSER_WIDTH - 1:0] m_axi_y_rowind_RUSER;
input  [1:0] m_axi_y_rowind_RRESP;
input   m_axi_y_rowind_BVALID;
output   m_axi_y_rowind_BREADY;
input  [1:0] m_axi_y_rowind_BRESP;
input  [C_M_AXI_Y_ROWIND_ID_WIDTH - 1:0] m_axi_y_rowind_BID;
input  [C_M_AXI_Y_ROWIND_BUSER_WIDTH - 1:0] m_axi_y_rowind_BUSER;
output   m_axi_y_data_AWVALID;
input   m_axi_y_data_AWREADY;
output  [C_M_AXI_Y_DATA_ADDR_WIDTH - 1:0] m_axi_y_data_AWADDR;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_AWID;
output  [7:0] m_axi_y_data_AWLEN;
output  [2:0] m_axi_y_data_AWSIZE;
output  [1:0] m_axi_y_data_AWBURST;
output  [1:0] m_axi_y_data_AWLOCK;
output  [3:0] m_axi_y_data_AWCACHE;
output  [2:0] m_axi_y_data_AWPROT;
output  [3:0] m_axi_y_data_AWQOS;
output  [3:0] m_axi_y_data_AWREGION;
output  [C_M_AXI_Y_DATA_AWUSER_WIDTH - 1:0] m_axi_y_data_AWUSER;
output   m_axi_y_data_WVALID;
input   m_axi_y_data_WREADY;
output  [C_M_AXI_Y_DATA_DATA_WIDTH - 1:0] m_axi_y_data_WDATA;
output  [C_M_AXI_Y_DATA_WSTRB_WIDTH - 1:0] m_axi_y_data_WSTRB;
output   m_axi_y_data_WLAST;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_WID;
output  [C_M_AXI_Y_DATA_WUSER_WIDTH - 1:0] m_axi_y_data_WUSER;
output   m_axi_y_data_ARVALID;
input   m_axi_y_data_ARREADY;
output  [C_M_AXI_Y_DATA_ADDR_WIDTH - 1:0] m_axi_y_data_ARADDR;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_ARID;
output  [7:0] m_axi_y_data_ARLEN;
output  [2:0] m_axi_y_data_ARSIZE;
output  [1:0] m_axi_y_data_ARBURST;
output  [1:0] m_axi_y_data_ARLOCK;
output  [3:0] m_axi_y_data_ARCACHE;
output  [2:0] m_axi_y_data_ARPROT;
output  [3:0] m_axi_y_data_ARQOS;
output  [3:0] m_axi_y_data_ARREGION;
output  [C_M_AXI_Y_DATA_ARUSER_WIDTH - 1:0] m_axi_y_data_ARUSER;
input   m_axi_y_data_RVALID;
output   m_axi_y_data_RREADY;
input  [C_M_AXI_Y_DATA_DATA_WIDTH - 1:0] m_axi_y_data_RDATA;
input   m_axi_y_data_RLAST;
input  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_RID;
input  [C_M_AXI_Y_DATA_RUSER_WIDTH - 1:0] m_axi_y_data_RUSER;
input  [1:0] m_axi_y_data_RRESP;
input   m_axi_y_data_BVALID;
output   m_axi_y_data_BREADY;
input  [1:0] m_axi_y_data_BRESP;
input  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_BID;
input  [C_M_AXI_Y_DATA_BUSER_WIDTH - 1:0] m_axi_y_data_BUSER;
output   m_axi_z_rowptr_AWVALID;
input   m_axi_z_rowptr_AWREADY;
output  [C_M_AXI_Z_ROWPTR_ADDR_WIDTH - 1:0] m_axi_z_rowptr_AWADDR;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_AWID;
output  [7:0] m_axi_z_rowptr_AWLEN;
output  [2:0] m_axi_z_rowptr_AWSIZE;
output  [1:0] m_axi_z_rowptr_AWBURST;
output  [1:0] m_axi_z_rowptr_AWLOCK;
output  [3:0] m_axi_z_rowptr_AWCACHE;
output  [2:0] m_axi_z_rowptr_AWPROT;
output  [3:0] m_axi_z_rowptr_AWQOS;
output  [3:0] m_axi_z_rowptr_AWREGION;
output  [C_M_AXI_Z_ROWPTR_AWUSER_WIDTH - 1:0] m_axi_z_rowptr_AWUSER;
output   m_axi_z_rowptr_WVALID;
input   m_axi_z_rowptr_WREADY;
output  [C_M_AXI_Z_ROWPTR_DATA_WIDTH - 1:0] m_axi_z_rowptr_WDATA;
output  [C_M_AXI_Z_ROWPTR_WSTRB_WIDTH - 1:0] m_axi_z_rowptr_WSTRB;
output   m_axi_z_rowptr_WLAST;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_WID;
output  [C_M_AXI_Z_ROWPTR_WUSER_WIDTH - 1:0] m_axi_z_rowptr_WUSER;
output   m_axi_z_rowptr_ARVALID;
input   m_axi_z_rowptr_ARREADY;
output  [C_M_AXI_Z_ROWPTR_ADDR_WIDTH - 1:0] m_axi_z_rowptr_ARADDR;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_ARID;
output  [7:0] m_axi_z_rowptr_ARLEN;
output  [2:0] m_axi_z_rowptr_ARSIZE;
output  [1:0] m_axi_z_rowptr_ARBURST;
output  [1:0] m_axi_z_rowptr_ARLOCK;
output  [3:0] m_axi_z_rowptr_ARCACHE;
output  [2:0] m_axi_z_rowptr_ARPROT;
output  [3:0] m_axi_z_rowptr_ARQOS;
output  [3:0] m_axi_z_rowptr_ARREGION;
output  [C_M_AXI_Z_ROWPTR_ARUSER_WIDTH - 1:0] m_axi_z_rowptr_ARUSER;
input   m_axi_z_rowptr_RVALID;
output   m_axi_z_rowptr_RREADY;
input  [C_M_AXI_Z_ROWPTR_DATA_WIDTH - 1:0] m_axi_z_rowptr_RDATA;
input   m_axi_z_rowptr_RLAST;
input  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_RID;
input  [C_M_AXI_Z_ROWPTR_RUSER_WIDTH - 1:0] m_axi_z_rowptr_RUSER;
input  [1:0] m_axi_z_rowptr_RRESP;
input   m_axi_z_rowptr_BVALID;
output   m_axi_z_rowptr_BREADY;
input  [1:0] m_axi_z_rowptr_BRESP;
input  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_BID;
input  [C_M_AXI_Z_ROWPTR_BUSER_WIDTH - 1:0] m_axi_z_rowptr_BUSER;
output   m_axi_z_colind_AWVALID;
input   m_axi_z_colind_AWREADY;
output  [C_M_AXI_Z_COLIND_ADDR_WIDTH - 1:0] m_axi_z_colind_AWADDR;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_AWID;
output  [7:0] m_axi_z_colind_AWLEN;
output  [2:0] m_axi_z_colind_AWSIZE;
output  [1:0] m_axi_z_colind_AWBURST;
output  [1:0] m_axi_z_colind_AWLOCK;
output  [3:0] m_axi_z_colind_AWCACHE;
output  [2:0] m_axi_z_colind_AWPROT;
output  [3:0] m_axi_z_colind_AWQOS;
output  [3:0] m_axi_z_colind_AWREGION;
output  [C_M_AXI_Z_COLIND_AWUSER_WIDTH - 1:0] m_axi_z_colind_AWUSER;
output   m_axi_z_colind_WVALID;
input   m_axi_z_colind_WREADY;
output  [C_M_AXI_Z_COLIND_DATA_WIDTH - 1:0] m_axi_z_colind_WDATA;
output  [C_M_AXI_Z_COLIND_WSTRB_WIDTH - 1:0] m_axi_z_colind_WSTRB;
output   m_axi_z_colind_WLAST;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_WID;
output  [C_M_AXI_Z_COLIND_WUSER_WIDTH - 1:0] m_axi_z_colind_WUSER;
output   m_axi_z_colind_ARVALID;
input   m_axi_z_colind_ARREADY;
output  [C_M_AXI_Z_COLIND_ADDR_WIDTH - 1:0] m_axi_z_colind_ARADDR;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_ARID;
output  [7:0] m_axi_z_colind_ARLEN;
output  [2:0] m_axi_z_colind_ARSIZE;
output  [1:0] m_axi_z_colind_ARBURST;
output  [1:0] m_axi_z_colind_ARLOCK;
output  [3:0] m_axi_z_colind_ARCACHE;
output  [2:0] m_axi_z_colind_ARPROT;
output  [3:0] m_axi_z_colind_ARQOS;
output  [3:0] m_axi_z_colind_ARREGION;
output  [C_M_AXI_Z_COLIND_ARUSER_WIDTH - 1:0] m_axi_z_colind_ARUSER;
input   m_axi_z_colind_RVALID;
output   m_axi_z_colind_RREADY;
input  [C_M_AXI_Z_COLIND_DATA_WIDTH - 1:0] m_axi_z_colind_RDATA;
input   m_axi_z_colind_RLAST;
input  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_RID;
input  [C_M_AXI_Z_COLIND_RUSER_WIDTH - 1:0] m_axi_z_colind_RUSER;
input  [1:0] m_axi_z_colind_RRESP;
input   m_axi_z_colind_BVALID;
output   m_axi_z_colind_BREADY;
input  [1:0] m_axi_z_colind_BRESP;
input  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_BID;
input  [C_M_AXI_Z_COLIND_BUSER_WIDTH - 1:0] m_axi_z_colind_BUSER;
output   m_axi_z_data_AWVALID;
input   m_axi_z_data_AWREADY;
output  [C_M_AXI_Z_DATA_ADDR_WIDTH - 1:0] m_axi_z_data_AWADDR;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_AWID;
output  [7:0] m_axi_z_data_AWLEN;
output  [2:0] m_axi_z_data_AWSIZE;
output  [1:0] m_axi_z_data_AWBURST;
output  [1:0] m_axi_z_data_AWLOCK;
output  [3:0] m_axi_z_data_AWCACHE;
output  [2:0] m_axi_z_data_AWPROT;
output  [3:0] m_axi_z_data_AWQOS;
output  [3:0] m_axi_z_data_AWREGION;
output  [C_M_AXI_Z_DATA_AWUSER_WIDTH - 1:0] m_axi_z_data_AWUSER;
output   m_axi_z_data_WVALID;
input   m_axi_z_data_WREADY;
output  [C_M_AXI_Z_DATA_DATA_WIDTH - 1:0] m_axi_z_data_WDATA;
output  [C_M_AXI_Z_DATA_WSTRB_WIDTH - 1:0] m_axi_z_data_WSTRB;
output   m_axi_z_data_WLAST;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_WID;
output  [C_M_AXI_Z_DATA_WUSER_WIDTH - 1:0] m_axi_z_data_WUSER;
output   m_axi_z_data_ARVALID;
input   m_axi_z_data_ARREADY;
output  [C_M_AXI_Z_DATA_ADDR_WIDTH - 1:0] m_axi_z_data_ARADDR;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_ARID;
output  [7:0] m_axi_z_data_ARLEN;
output  [2:0] m_axi_z_data_ARSIZE;
output  [1:0] m_axi_z_data_ARBURST;
output  [1:0] m_axi_z_data_ARLOCK;
output  [3:0] m_axi_z_data_ARCACHE;
output  [2:0] m_axi_z_data_ARPROT;
output  [3:0] m_axi_z_data_ARQOS;
output  [3:0] m_axi_z_data_ARREGION;
output  [C_M_AXI_Z_DATA_ARUSER_WIDTH - 1:0] m_axi_z_data_ARUSER;
input   m_axi_z_data_RVALID;
output   m_axi_z_data_RREADY;
input  [C_M_AXI_Z_DATA_DATA_WIDTH - 1:0] m_axi_z_data_RDATA;
input   m_axi_z_data_RLAST;
input  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_RID;
input  [C_M_AXI_Z_DATA_RUSER_WIDTH - 1:0] m_axi_z_data_RUSER;
input  [1:0] m_axi_z_data_RRESP;
input   m_axi_z_data_BVALID;
output   m_axi_z_data_BREADY;
input  [1:0] m_axi_z_data_BRESP;
input  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_BID;
input  [C_M_AXI_Z_DATA_BUSER_WIDTH - 1:0] m_axi_z_data_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [91:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    x_rowptr_blk_n_AR;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln399_reg_1130;
reg    x_rowptr_blk_n_R;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg    x_colind_blk_n_AR;
wire    ap_CS_fsm_state17;
reg    x_colind_blk_n_R;
wire    ap_CS_fsm_state24;
reg    x_data_blk_n_AR;
wire    ap_CS_fsm_state26;
reg    x_data_blk_n_R;
wire    ap_CS_fsm_state33;
reg    y_colptr_blk_n_AR;
wire    ap_CS_fsm_state36;
reg    y_colptr_blk_n_R;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
reg    y_rowind_blk_n_AR;
wire    ap_CS_fsm_state46;
reg    y_rowind_blk_n_R;
wire    ap_CS_fsm_state53;
reg    y_data_blk_n_AR;
reg    y_data_blk_n_R;
reg    z_rowptr_blk_n_AW;
wire    ap_CS_fsm_state57;
reg   [0:0] icmp_ln435_reg_1319;
reg    z_rowptr_blk_n_B;
wire    ap_CS_fsm_state84;
reg    z_rowptr_blk_n_W;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state63;
reg    z_colind_blk_n_AW;
wire    ap_CS_fsm_state80;
reg    z_colind_blk_n_W;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state71;
reg    z_colind_blk_n_B;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state92;
reg    z_data_blk_n_AW;
reg    z_data_blk_n_W;
reg    z_data_blk_n_B;
wire    x_rowptr_AWREADY;
wire    x_rowptr_WREADY;
reg    x_rowptr_ARVALID;
wire    x_rowptr_ARREADY;
wire    x_rowptr_RVALID;
reg    x_rowptr_RREADY;
wire   [31:0] x_rowptr_RDATA;
wire    x_rowptr_RLAST;
wire   [0:0] x_rowptr_RID;
wire   [0:0] x_rowptr_RUSER;
wire   [1:0] x_rowptr_RRESP;
wire    x_rowptr_BVALID;
wire   [1:0] x_rowptr_BRESP;
wire   [0:0] x_rowptr_BID;
wire   [0:0] x_rowptr_BUSER;
wire    x_colind_AWREADY;
wire    x_colind_WREADY;
reg    x_colind_ARVALID;
wire    x_colind_ARREADY;
wire    x_colind_RVALID;
reg    x_colind_RREADY;
wire   [31:0] x_colind_RDATA;
wire    x_colind_RLAST;
wire   [0:0] x_colind_RID;
wire   [0:0] x_colind_RUSER;
wire   [1:0] x_colind_RRESP;
wire    x_colind_BVALID;
wire   [1:0] x_colind_BRESP;
wire   [0:0] x_colind_BID;
wire   [0:0] x_colind_BUSER;
wire    x_data_AWREADY;
wire    x_data_WREADY;
reg    x_data_ARVALID;
wire    x_data_ARREADY;
wire    x_data_RVALID;
reg    x_data_RREADY;
wire   [31:0] x_data_RDATA;
wire    x_data_RLAST;
wire   [0:0] x_data_RID;
wire   [0:0] x_data_RUSER;
wire   [1:0] x_data_RRESP;
wire    x_data_BVALID;
wire   [1:0] x_data_BRESP;
wire   [0:0] x_data_BID;
wire   [0:0] x_data_BUSER;
wire    y_colptr_AWREADY;
wire    y_colptr_WREADY;
reg    y_colptr_ARVALID;
wire    y_colptr_ARREADY;
wire    y_colptr_RVALID;
reg    y_colptr_RREADY;
wire   [31:0] y_colptr_RDATA;
wire    y_colptr_RLAST;
wire   [0:0] y_colptr_RID;
wire   [0:0] y_colptr_RUSER;
wire   [1:0] y_colptr_RRESP;
wire    y_colptr_BVALID;
wire   [1:0] y_colptr_BRESP;
wire   [0:0] y_colptr_BID;
wire   [0:0] y_colptr_BUSER;
wire    y_rowind_AWREADY;
wire    y_rowind_WREADY;
reg    y_rowind_ARVALID;
wire    y_rowind_ARREADY;
wire    y_rowind_RVALID;
reg    y_rowind_RREADY;
wire   [31:0] y_rowind_RDATA;
wire    y_rowind_RLAST;
wire   [0:0] y_rowind_RID;
wire   [0:0] y_rowind_RUSER;
wire   [1:0] y_rowind_RRESP;
wire    y_rowind_BVALID;
wire   [1:0] y_rowind_BRESP;
wire   [0:0] y_rowind_BID;
wire   [0:0] y_rowind_BUSER;
wire    y_data_AWREADY;
wire    y_data_WREADY;
reg    y_data_ARVALID;
wire    y_data_ARREADY;
wire    y_data_RVALID;
reg    y_data_RREADY;
wire   [31:0] y_data_RDATA;
wire    y_data_RLAST;
wire   [0:0] y_data_RID;
wire   [0:0] y_data_RUSER;
wire   [1:0] y_data_RRESP;
wire    y_data_BVALID;
wire   [1:0] y_data_BRESP;
wire   [0:0] y_data_BID;
wire   [0:0] y_data_BUSER;
reg    z_rowptr_AWVALID;
wire    z_rowptr_AWREADY;
reg    z_rowptr_WVALID;
wire    z_rowptr_WREADY;
reg   [31:0] z_rowptr_WDATA;
reg    z_rowptr_ARVALID;
wire    z_rowptr_ARREADY;
wire    z_rowptr_RVALID;
reg    z_rowptr_RREADY;
wire   [31:0] z_rowptr_RDATA;
wire    z_rowptr_RLAST;
wire   [0:0] z_rowptr_RID;
wire   [0:0] z_rowptr_RUSER;
wire   [1:0] z_rowptr_RRESP;
wire    z_rowptr_BVALID;
reg    z_rowptr_BREADY;
wire   [1:0] z_rowptr_BRESP;
wire   [0:0] z_rowptr_BID;
wire   [0:0] z_rowptr_BUSER;
reg    z_colind_AWVALID;
wire    z_colind_AWREADY;
reg    z_colind_WVALID;
wire    z_colind_WREADY;
reg   [31:0] z_colind_WDATA;
reg    z_colind_ARVALID;
wire    z_colind_ARREADY;
wire    z_colind_RVALID;
reg    z_colind_RREADY;
wire   [31:0] z_colind_RDATA;
wire    z_colind_RLAST;
wire   [0:0] z_colind_RID;
wire   [0:0] z_colind_RUSER;
wire   [1:0] z_colind_RRESP;
wire    z_colind_BVALID;
reg    z_colind_BREADY;
wire   [1:0] z_colind_BRESP;
wire   [0:0] z_colind_BID;
wire   [0:0] z_colind_BUSER;
reg    z_data_AWVALID;
wire    z_data_AWREADY;
reg    z_data_WVALID;
wire    z_data_WREADY;
reg   [31:0] z_data_WDATA;
reg    z_data_ARVALID;
wire    z_data_ARREADY;
wire    z_data_RVALID;
reg    z_data_RREADY;
wire   [31:0] z_data_RDATA;
wire    z_data_RLAST;
wire   [0:0] z_data_RID;
wire   [0:0] z_data_RUSER;
wire   [1:0] z_data_RRESP;
wire    z_data_BVALID;
reg    z_data_BREADY;
wire   [1:0] z_data_BRESP;
wire   [0:0] z_data_BID;
wire   [0:0] z_data_BUSER;
wire   [2:0] add_ln325_fu_673_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln332_fu_690_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] add_ln25_fu_708_p2;
reg   [2:0] add_ln25_reg_1125;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln399_fu_714_p2;
wire   [63:0] zext_ln399_fu_720_p1;
reg   [63:0] zext_ln399_reg_1134;
reg   [31:0] start_idx_reg_1145;
reg   [31:0] end_idx_reg_1150;
wire   [2:0] add_ln28_fu_731_p2;
reg   [2:0] add_ln28_reg_1155;
wire    ap_CS_fsm_state16;
wire   [31:0] zext_ln28_fu_737_p1;
reg   [31:0] zext_ln28_reg_1160;
wire   [0:0] icmp_ln34_fu_747_p2;
reg   [0:0] icmp_ln34_reg_1168;
wire   [0:0] icmp_ln28_fu_741_p2;
reg   [63:0] y_colptr_addr_reg_1173;
wire   [63:0] sext_ln33_fu_757_p1;
reg  signed [63:0] sext_ln33_reg_1179;
reg   [31:0] compare_reg_1190;
wire   [0:0] and_ln34_fu_772_p2;
reg   [0:0] and_ln34_reg_1195;
wire    ap_CS_fsm_state25;
reg   [63:0] x_data_addr_reg_1200;
reg   [31:0] x_data_addr_read_reg_1206;
wire   [1:0] trunc_ln34_fu_782_p1;
reg   [1:0] trunc_ln34_reg_1211;
wire    ap_CS_fsm_state34;
wire   [31:0] j_5_fu_792_p3;
reg   [31:0] j_5_reg_1218;
reg   [31:0] start_idx_1_reg_1223;
reg   [31:0] end_idx_1_reg_1228;
wire   [2:0] add_ln9_fu_896_p2;
reg   [2:0] add_ln9_reg_1233;
wire    ap_CS_fsm_state45;
wire   [63:0] zext_ln9_fu_902_p1;
reg   [63:0] zext_ln9_reg_1238;
wire   [31:0] zext_ln9_1_fu_906_p1;
reg   [31:0] zext_ln9_1_reg_1243;
wire   [0:0] icmp_ln16_fu_916_p2;
reg   [0:0] icmp_ln16_reg_1251;
wire   [0:0] icmp_ln9_fu_910_p2;
reg   [31:0] col_idx_reg_1268;
reg   [31:0] y_data_addr_read_reg_1273;
wire   [31:0] j_7_fu_962_p3;
wire    ap_CS_fsm_state54;
wire   [2:0] add_ln325_1_fu_970_p2;
wire    ap_CS_fsm_state55;
wire   [4:0] add_ln332_1_fu_987_p2;
wire    ap_CS_fsm_state56;
reg   [31:0] col_V_3_1_load_1_reg_1299;
wire   [0:0] icmp_ln332_1_fu_999_p2;
reg   [31:0] col_V_3_2_load_1_reg_1304;
reg   [31:0] col_V_3_3_load_1_reg_1309;
reg   [31:0] col_V_3_4_load_1_reg_1314;
wire   [0:0] icmp_ln435_fu_1005_p2;
wire   [2:0] add_ln344_1_fu_1011_p2;
reg   [2:0] add_ln344_1_reg_1323;
wire    ap_CS_fsm_state61;
wire   [0:0] icmp_ln344_1_fu_1022_p2;
wire   [31:0] temp_rowptr_q0;
reg   [31:0] temp_rowptr_load_reg_1336;
wire    ap_CS_fsm_state62;
wire   [4:0] add_ln351_1_fu_1028_p2;
reg   [4:0] add_ln351_1_reg_1341;
wire    ap_CS_fsm_state69;
wire   [0:0] icmp_ln351_1_fu_1040_p2;
wire   [31:0] temp_colind_q0;
reg   [31:0] temp_colind_load_reg_1359;
wire    ap_CS_fsm_state70;
wire   [31:0] temp_data_V_q0;
reg   [31:0] temp_data_V_load_reg_1364;
wire   [2:0] add_ln344_fu_1046_p2;
reg   [2:0] add_ln344_reg_1369;
wire    ap_CS_fsm_state77;
wire   [0:0] icmp_ln344_fu_1057_p2;
wire   [31:0] partial_z_rowptr_q0;
reg   [31:0] partial_z_rowptr_load_reg_1382;
wire    ap_CS_fsm_state78;
wire   [4:0] add_ln351_fu_1063_p2;
reg   [4:0] add_ln351_reg_1387;
wire    ap_CS_fsm_state85;
wire   [0:0] icmp_ln351_fu_1075_p2;
wire   [2:0] partial_z_colind_q0;
reg   [2:0] partial_z_colind_load_reg_1405;
wire    ap_CS_fsm_state86;
wire   [31:0] partial_z_data_V_q0;
reg   [31:0] partial_z_data_V_load_reg_1410;
reg   [2:0] temp_rowptr_address0;
reg    temp_rowptr_ce0;
reg    temp_rowptr_we0;
reg   [31:0] temp_rowptr_d0;
reg   [4:0] temp_colind_address0;
reg    temp_colind_ce0;
reg    temp_colind_we0;
reg   [31:0] temp_colind_d0;
reg   [4:0] temp_data_V_address0;
reg    temp_data_V_ce0;
reg    temp_data_V_we0;
reg   [31:0] temp_data_V_d0;
reg   [2:0] row_V_address0;
reg    row_V_ce0;
reg    row_V_we0;
wire   [31:0] row_V_d0;
wire   [31:0] row_V_q0;
reg   [2:0] partial_z_rowptr_address0;
reg    partial_z_rowptr_ce0;
reg    partial_z_rowptr_we0;
reg   [31:0] partial_z_rowptr_d0;
reg    partial_z_rowptr_ce1;
wire   [31:0] partial_z_rowptr_q1;
reg   [4:0] partial_z_colind_address0;
reg    partial_z_colind_ce0;
reg    partial_z_colind_we0;
reg   [2:0] partial_z_colind_d0;
reg   [4:0] partial_z_data_V_address0;
reg    partial_z_data_V_ce0;
reg    partial_z_data_V_we0;
reg   [31:0] partial_z_data_V_d0;
wire    grp_accumulate_fu_629_ap_start;
wire    grp_accumulate_fu_629_ap_done;
wire    grp_accumulate_fu_629_ap_idle;
wire    grp_accumulate_fu_629_ap_ready;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_AWVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_AWUSER;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_WVALID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_rowptr_WDATA;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_WSTRB;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_WLAST;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_WID;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_WUSER;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_RREADY;
wire    grp_accumulate_fu_629_m_axi_z_rowptr_BREADY;
wire    grp_accumulate_fu_629_m_axi_z_colind_AWVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_colind_AWADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_AWID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_colind_AWLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_colind_AWSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_colind_AWBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_colind_AWLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_AWCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_colind_AWPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_AWQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_AWREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_AWUSER;
wire    grp_accumulate_fu_629_m_axi_z_colind_WVALID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_colind_WDATA;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_WSTRB;
wire    grp_accumulate_fu_629_m_axi_z_colind_WLAST;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_WID;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_WUSER;
wire    grp_accumulate_fu_629_m_axi_z_colind_ARVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_colind_ARADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_ARID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_colind_ARLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_colind_ARSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_colind_ARBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_colind_ARLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_ARCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_colind_ARPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_ARQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_colind_ARREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_colind_ARUSER;
wire    grp_accumulate_fu_629_m_axi_z_colind_RREADY;
wire    grp_accumulate_fu_629_m_axi_z_colind_BREADY;
wire    grp_accumulate_fu_629_m_axi_z_data_AWVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_data_AWADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_AWID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_data_AWLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_data_AWSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_data_AWBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_data_AWLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_AWCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_data_AWPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_AWQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_AWREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_AWUSER;
wire    grp_accumulate_fu_629_m_axi_z_data_WVALID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_data_WDATA;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_WSTRB;
wire    grp_accumulate_fu_629_m_axi_z_data_WLAST;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_WID;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_WUSER;
wire    grp_accumulate_fu_629_m_axi_z_data_ARVALID;
wire   [63:0] grp_accumulate_fu_629_m_axi_z_data_ARADDR;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_ARID;
wire   [31:0] grp_accumulate_fu_629_m_axi_z_data_ARLEN;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_data_ARSIZE;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_data_ARBURST;
wire   [1:0] grp_accumulate_fu_629_m_axi_z_data_ARLOCK;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_ARCACHE;
wire   [2:0] grp_accumulate_fu_629_m_axi_z_data_ARPROT;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_ARQOS;
wire   [3:0] grp_accumulate_fu_629_m_axi_z_data_ARREGION;
wire   [0:0] grp_accumulate_fu_629_m_axi_z_data_ARUSER;
wire    grp_accumulate_fu_629_m_axi_z_data_RREADY;
wire    grp_accumulate_fu_629_m_axi_z_data_BREADY;
wire   [2:0] grp_accumulate_fu_629_csr2_rowptr_address0;
wire    grp_accumulate_fu_629_csr2_rowptr_ce0;
wire   [2:0] grp_accumulate_fu_629_csr2_rowptr_address1;
wire    grp_accumulate_fu_629_csr2_rowptr_ce1;
wire   [4:0] grp_accumulate_fu_629_csr2_colind_address0;
wire    grp_accumulate_fu_629_csr2_colind_ce0;
wire   [4:0] grp_accumulate_fu_629_csr2_data_address0;
wire    grp_accumulate_fu_629_csr2_data_ce0;
wire   [2:0] grp_accumulate_fu_629_out_csr_rowptr_address0;
wire    grp_accumulate_fu_629_out_csr_rowptr_ce0;
wire    grp_accumulate_fu_629_out_csr_rowptr_we0;
wire   [31:0] grp_accumulate_fu_629_out_csr_rowptr_d0;
wire   [4:0] grp_accumulate_fu_629_out_csr_colind_address0;
wire    grp_accumulate_fu_629_out_csr_colind_ce0;
wire    grp_accumulate_fu_629_out_csr_colind_we0;
wire   [31:0] grp_accumulate_fu_629_out_csr_colind_d0;
wire   [4:0] grp_accumulate_fu_629_out_csr_data_address0;
wire    grp_accumulate_fu_629_out_csr_data_ce0;
wire    grp_accumulate_fu_629_out_csr_data_we0;
wire   [31:0] grp_accumulate_fu_629_out_csr_data_d0;
wire    grp_multiply_row_col_fu_645_ap_start;
wire    grp_multiply_row_col_fu_645_ap_done;
wire    grp_multiply_row_col_fu_645_ap_idle;
wire    grp_multiply_row_col_fu_645_ap_ready;
wire   [2:0] grp_multiply_row_col_fu_645_row_address0;
wire    grp_multiply_row_col_fu_645_row_ce0;
wire   [2:0] grp_multiply_row_col_fu_645_out_rowptr_address0;
wire    grp_multiply_row_col_fu_645_out_rowptr_ce0;
wire    grp_multiply_row_col_fu_645_out_rowptr_we0;
wire   [31:0] grp_multiply_row_col_fu_645_out_rowptr_d0;
wire   [4:0] grp_multiply_row_col_fu_645_out_colind_address0;
wire    grp_multiply_row_col_fu_645_out_colind_ce0;
wire    grp_multiply_row_col_fu_645_out_colind_we0;
wire   [2:0] grp_multiply_row_col_fu_645_out_colind_d0;
wire   [4:0] grp_multiply_row_col_fu_645_out_data_address0;
wire    grp_multiply_row_col_fu_645_out_data_ce0;
wire    grp_multiply_row_col_fu_645_out_data_we0;
wire   [31:0] grp_multiply_row_col_fu_645_out_data_d0;
reg   [2:0] i_reg_475;
wire   [0:0] icmp_ln325_fu_679_p2;
reg   [4:0] i_1_reg_486;
wire   [0:0] icmp_ln332_fu_696_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] i_11_reg_497;
reg    ap_block_state76;
wire    ap_CS_fsm_state5;
reg   [2:0] i_3_reg_509;
wire    ap_CS_fsm_state35;
reg  signed [31:0] j_2_reg_521;
reg   [31:0] col_V_0_reg_531;
reg   [2:0] i_4_reg_542;
reg  signed [31:0] j_3_reg_553;
reg   [2:0] i_5_reg_563;
wire   [0:0] icmp_ln325_1_fu_981_p2;
reg   [4:0] i_6_reg_574;
reg   [2:0] i_8_reg_585;
reg   [4:0] i_10_reg_596;
reg    ap_block_state71_io;
reg   [2:0] i_7_reg_607;
reg    ap_block_state57_io;
reg   [4:0] i_9_reg_618;
reg    ap_block_state87_io;
reg    grp_accumulate_fu_629_ap_start_reg;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg    grp_multiply_row_col_fu_645_ap_start_reg;
wire   [63:0] i_cast_fu_685_p1;
wire   [63:0] i_1_cast_fu_702_p1;
wire   [63:0] zext_ln325_fu_976_p1;
wire   [63:0] zext_ln332_fu_993_p1;
wire   [63:0] zext_ln344_1_fu_1017_p1;
wire   [63:0] zext_ln351_1_fu_1034_p1;
wire   [63:0] zext_ln344_fu_1052_p1;
wire   [63:0] zext_ln351_fu_1069_p1;
wire   [63:0] sext_ln14_fu_921_p1;
reg    ap_block_state7_io;
reg    ap_block_state46_io;
reg    ap_block_state53;
reg    ap_block_state64_io;
reg    ap_block_state80_io;
reg    ap_block_state92;
wire   [31:0] zext_ln356_fu_1081_p1;
reg   [31:0] col_V_3_1_fu_174;
wire   [31:0] col_V_3_9_fu_868_p3;
reg   [31:0] col_V_3_2_fu_178;
wire   [31:0] col_V_3_8_fu_860_p3;
reg   [31:0] col_V_3_3_fu_182;
wire   [31:0] col_V_3_6_fu_844_p3;
reg   [31:0] col_V_3_4_fu_186;
wire   [31:0] col_V_3_fu_828_p3;
wire   [0:0] icmp_ln34_1_fu_768_p2;
wire   [31:0] j_4_fu_786_p2;
wire   [0:0] icmp_ln34_4_fu_809_p2;
wire   [0:0] icmp_ln34_3_fu_804_p2;
wire   [0:0] icmp_ln34_2_fu_799_p2;
wire   [0:0] or_ln34_fu_814_p2;
wire   [31:0] select_ln34_fu_820_p3;
wire   [31:0] select_ln34_2_fu_836_p3;
wire   [31:0] col_V_3_7_fu_852_p3;
wire   [0:0] icmp_ln16_1_fu_939_p2;
wire   [0:0] and_ln16_fu_943_p2;
wire   [31:0] j_6_fu_956_p2;
reg   [91:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 92'd1;
#0 grp_accumulate_fu_629_ap_start_reg = 1'b0;
#0 grp_multiply_row_col_fu_645_ap_start_reg = 1'b0;
end

outer_product_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

outer_product_x_rowptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_ROWPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_ROWPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_ROWPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_ROWPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_ROWPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_ROWPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_ROWPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_ROWPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_ROWPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_ROWPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_ROWPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_ROWPTR_CACHE_VALUE ))
x_rowptr_m_axi_U(
    .AWVALID(m_axi_x_rowptr_AWVALID),
    .AWREADY(m_axi_x_rowptr_AWREADY),
    .AWADDR(m_axi_x_rowptr_AWADDR),
    .AWID(m_axi_x_rowptr_AWID),
    .AWLEN(m_axi_x_rowptr_AWLEN),
    .AWSIZE(m_axi_x_rowptr_AWSIZE),
    .AWBURST(m_axi_x_rowptr_AWBURST),
    .AWLOCK(m_axi_x_rowptr_AWLOCK),
    .AWCACHE(m_axi_x_rowptr_AWCACHE),
    .AWPROT(m_axi_x_rowptr_AWPROT),
    .AWQOS(m_axi_x_rowptr_AWQOS),
    .AWREGION(m_axi_x_rowptr_AWREGION),
    .AWUSER(m_axi_x_rowptr_AWUSER),
    .WVALID(m_axi_x_rowptr_WVALID),
    .WREADY(m_axi_x_rowptr_WREADY),
    .WDATA(m_axi_x_rowptr_WDATA),
    .WSTRB(m_axi_x_rowptr_WSTRB),
    .WLAST(m_axi_x_rowptr_WLAST),
    .WID(m_axi_x_rowptr_WID),
    .WUSER(m_axi_x_rowptr_WUSER),
    .ARVALID(m_axi_x_rowptr_ARVALID),
    .ARREADY(m_axi_x_rowptr_ARREADY),
    .ARADDR(m_axi_x_rowptr_ARADDR),
    .ARID(m_axi_x_rowptr_ARID),
    .ARLEN(m_axi_x_rowptr_ARLEN),
    .ARSIZE(m_axi_x_rowptr_ARSIZE),
    .ARBURST(m_axi_x_rowptr_ARBURST),
    .ARLOCK(m_axi_x_rowptr_ARLOCK),
    .ARCACHE(m_axi_x_rowptr_ARCACHE),
    .ARPROT(m_axi_x_rowptr_ARPROT),
    .ARQOS(m_axi_x_rowptr_ARQOS),
    .ARREGION(m_axi_x_rowptr_ARREGION),
    .ARUSER(m_axi_x_rowptr_ARUSER),
    .RVALID(m_axi_x_rowptr_RVALID),
    .RREADY(m_axi_x_rowptr_RREADY),
    .RDATA(m_axi_x_rowptr_RDATA),
    .RLAST(m_axi_x_rowptr_RLAST),
    .RID(m_axi_x_rowptr_RID),
    .RUSER(m_axi_x_rowptr_RUSER),
    .RRESP(m_axi_x_rowptr_RRESP),
    .BVALID(m_axi_x_rowptr_BVALID),
    .BREADY(m_axi_x_rowptr_BREADY),
    .BRESP(m_axi_x_rowptr_BRESP),
    .BID(m_axi_x_rowptr_BID),
    .BUSER(m_axi_x_rowptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_rowptr_ARVALID),
    .I_ARREADY(x_rowptr_ARREADY),
    .I_ARADDR(zext_ln399_fu_720_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_rowptr_RVALID),
    .I_RREADY(x_rowptr_RREADY),
    .I_RDATA(x_rowptr_RDATA),
    .I_RID(x_rowptr_RID),
    .I_RUSER(x_rowptr_RUSER),
    .I_RRESP(x_rowptr_RRESP),
    .I_RLAST(x_rowptr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_rowptr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_rowptr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_rowptr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_rowptr_BRESP),
    .I_BID(x_rowptr_BID),
    .I_BUSER(x_rowptr_BUSER)
);

outer_product_x_colind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_COLIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_COLIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_COLIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_COLIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_COLIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_COLIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_COLIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_COLIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_COLIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_COLIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_COLIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_COLIND_CACHE_VALUE ))
x_colind_m_axi_U(
    .AWVALID(m_axi_x_colind_AWVALID),
    .AWREADY(m_axi_x_colind_AWREADY),
    .AWADDR(m_axi_x_colind_AWADDR),
    .AWID(m_axi_x_colind_AWID),
    .AWLEN(m_axi_x_colind_AWLEN),
    .AWSIZE(m_axi_x_colind_AWSIZE),
    .AWBURST(m_axi_x_colind_AWBURST),
    .AWLOCK(m_axi_x_colind_AWLOCK),
    .AWCACHE(m_axi_x_colind_AWCACHE),
    .AWPROT(m_axi_x_colind_AWPROT),
    .AWQOS(m_axi_x_colind_AWQOS),
    .AWREGION(m_axi_x_colind_AWREGION),
    .AWUSER(m_axi_x_colind_AWUSER),
    .WVALID(m_axi_x_colind_WVALID),
    .WREADY(m_axi_x_colind_WREADY),
    .WDATA(m_axi_x_colind_WDATA),
    .WSTRB(m_axi_x_colind_WSTRB),
    .WLAST(m_axi_x_colind_WLAST),
    .WID(m_axi_x_colind_WID),
    .WUSER(m_axi_x_colind_WUSER),
    .ARVALID(m_axi_x_colind_ARVALID),
    .ARREADY(m_axi_x_colind_ARREADY),
    .ARADDR(m_axi_x_colind_ARADDR),
    .ARID(m_axi_x_colind_ARID),
    .ARLEN(m_axi_x_colind_ARLEN),
    .ARSIZE(m_axi_x_colind_ARSIZE),
    .ARBURST(m_axi_x_colind_ARBURST),
    .ARLOCK(m_axi_x_colind_ARLOCK),
    .ARCACHE(m_axi_x_colind_ARCACHE),
    .ARPROT(m_axi_x_colind_ARPROT),
    .ARQOS(m_axi_x_colind_ARQOS),
    .ARREGION(m_axi_x_colind_ARREGION),
    .ARUSER(m_axi_x_colind_ARUSER),
    .RVALID(m_axi_x_colind_RVALID),
    .RREADY(m_axi_x_colind_RREADY),
    .RDATA(m_axi_x_colind_RDATA),
    .RLAST(m_axi_x_colind_RLAST),
    .RID(m_axi_x_colind_RID),
    .RUSER(m_axi_x_colind_RUSER),
    .RRESP(m_axi_x_colind_RRESP),
    .BVALID(m_axi_x_colind_BVALID),
    .BREADY(m_axi_x_colind_BREADY),
    .BRESP(m_axi_x_colind_BRESP),
    .BID(m_axi_x_colind_BID),
    .BUSER(m_axi_x_colind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_colind_ARVALID),
    .I_ARREADY(x_colind_ARREADY),
    .I_ARADDR(sext_ln33_fu_757_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_colind_RVALID),
    .I_RREADY(x_colind_RREADY),
    .I_RDATA(x_colind_RDATA),
    .I_RID(x_colind_RID),
    .I_RUSER(x_colind_RUSER),
    .I_RRESP(x_colind_RRESP),
    .I_RLAST(x_colind_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_colind_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_colind_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_colind_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_colind_BRESP),
    .I_BID(x_colind_BID),
    .I_BUSER(x_colind_BUSER)
);

outer_product_x_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_DATA_CACHE_VALUE ))
x_data_m_axi_U(
    .AWVALID(m_axi_x_data_AWVALID),
    .AWREADY(m_axi_x_data_AWREADY),
    .AWADDR(m_axi_x_data_AWADDR),
    .AWID(m_axi_x_data_AWID),
    .AWLEN(m_axi_x_data_AWLEN),
    .AWSIZE(m_axi_x_data_AWSIZE),
    .AWBURST(m_axi_x_data_AWBURST),
    .AWLOCK(m_axi_x_data_AWLOCK),
    .AWCACHE(m_axi_x_data_AWCACHE),
    .AWPROT(m_axi_x_data_AWPROT),
    .AWQOS(m_axi_x_data_AWQOS),
    .AWREGION(m_axi_x_data_AWREGION),
    .AWUSER(m_axi_x_data_AWUSER),
    .WVALID(m_axi_x_data_WVALID),
    .WREADY(m_axi_x_data_WREADY),
    .WDATA(m_axi_x_data_WDATA),
    .WSTRB(m_axi_x_data_WSTRB),
    .WLAST(m_axi_x_data_WLAST),
    .WID(m_axi_x_data_WID),
    .WUSER(m_axi_x_data_WUSER),
    .ARVALID(m_axi_x_data_ARVALID),
    .ARREADY(m_axi_x_data_ARREADY),
    .ARADDR(m_axi_x_data_ARADDR),
    .ARID(m_axi_x_data_ARID),
    .ARLEN(m_axi_x_data_ARLEN),
    .ARSIZE(m_axi_x_data_ARSIZE),
    .ARBURST(m_axi_x_data_ARBURST),
    .ARLOCK(m_axi_x_data_ARLOCK),
    .ARCACHE(m_axi_x_data_ARCACHE),
    .ARPROT(m_axi_x_data_ARPROT),
    .ARQOS(m_axi_x_data_ARQOS),
    .ARREGION(m_axi_x_data_ARREGION),
    .ARUSER(m_axi_x_data_ARUSER),
    .RVALID(m_axi_x_data_RVALID),
    .RREADY(m_axi_x_data_RREADY),
    .RDATA(m_axi_x_data_RDATA),
    .RLAST(m_axi_x_data_RLAST),
    .RID(m_axi_x_data_RID),
    .RUSER(m_axi_x_data_RUSER),
    .RRESP(m_axi_x_data_RRESP),
    .BVALID(m_axi_x_data_BVALID),
    .BREADY(m_axi_x_data_BREADY),
    .BRESP(m_axi_x_data_BRESP),
    .BID(m_axi_x_data_BID),
    .BUSER(m_axi_x_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_data_ARVALID),
    .I_ARREADY(x_data_ARREADY),
    .I_ARADDR(x_data_addr_reg_1200),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_data_RVALID),
    .I_RREADY(x_data_RREADY),
    .I_RDATA(x_data_RDATA),
    .I_RID(x_data_RID),
    .I_RUSER(x_data_RUSER),
    .I_RRESP(x_data_RRESP),
    .I_RLAST(x_data_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_data_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_data_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_data_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_data_BRESP),
    .I_BID(x_data_BID),
    .I_BUSER(x_data_BUSER)
);

outer_product_y_colptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_COLPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_COLPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_COLPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_COLPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_COLPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_COLPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_COLPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_COLPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_COLPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_COLPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_COLPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_COLPTR_CACHE_VALUE ))
y_colptr_m_axi_U(
    .AWVALID(m_axi_y_colptr_AWVALID),
    .AWREADY(m_axi_y_colptr_AWREADY),
    .AWADDR(m_axi_y_colptr_AWADDR),
    .AWID(m_axi_y_colptr_AWID),
    .AWLEN(m_axi_y_colptr_AWLEN),
    .AWSIZE(m_axi_y_colptr_AWSIZE),
    .AWBURST(m_axi_y_colptr_AWBURST),
    .AWLOCK(m_axi_y_colptr_AWLOCK),
    .AWCACHE(m_axi_y_colptr_AWCACHE),
    .AWPROT(m_axi_y_colptr_AWPROT),
    .AWQOS(m_axi_y_colptr_AWQOS),
    .AWREGION(m_axi_y_colptr_AWREGION),
    .AWUSER(m_axi_y_colptr_AWUSER),
    .WVALID(m_axi_y_colptr_WVALID),
    .WREADY(m_axi_y_colptr_WREADY),
    .WDATA(m_axi_y_colptr_WDATA),
    .WSTRB(m_axi_y_colptr_WSTRB),
    .WLAST(m_axi_y_colptr_WLAST),
    .WID(m_axi_y_colptr_WID),
    .WUSER(m_axi_y_colptr_WUSER),
    .ARVALID(m_axi_y_colptr_ARVALID),
    .ARREADY(m_axi_y_colptr_ARREADY),
    .ARADDR(m_axi_y_colptr_ARADDR),
    .ARID(m_axi_y_colptr_ARID),
    .ARLEN(m_axi_y_colptr_ARLEN),
    .ARSIZE(m_axi_y_colptr_ARSIZE),
    .ARBURST(m_axi_y_colptr_ARBURST),
    .ARLOCK(m_axi_y_colptr_ARLOCK),
    .ARCACHE(m_axi_y_colptr_ARCACHE),
    .ARPROT(m_axi_y_colptr_ARPROT),
    .ARQOS(m_axi_y_colptr_ARQOS),
    .ARREGION(m_axi_y_colptr_ARREGION),
    .ARUSER(m_axi_y_colptr_ARUSER),
    .RVALID(m_axi_y_colptr_RVALID),
    .RREADY(m_axi_y_colptr_RREADY),
    .RDATA(m_axi_y_colptr_RDATA),
    .RLAST(m_axi_y_colptr_RLAST),
    .RID(m_axi_y_colptr_RID),
    .RUSER(m_axi_y_colptr_RUSER),
    .RRESP(m_axi_y_colptr_RRESP),
    .BVALID(m_axi_y_colptr_BVALID),
    .BREADY(m_axi_y_colptr_BREADY),
    .BRESP(m_axi_y_colptr_BRESP),
    .BID(m_axi_y_colptr_BID),
    .BUSER(m_axi_y_colptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_colptr_ARVALID),
    .I_ARREADY(y_colptr_ARREADY),
    .I_ARADDR(y_colptr_addr_reg_1173),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_colptr_RVALID),
    .I_RREADY(y_colptr_RREADY),
    .I_RDATA(y_colptr_RDATA),
    .I_RID(y_colptr_RID),
    .I_RUSER(y_colptr_RUSER),
    .I_RRESP(y_colptr_RRESP),
    .I_RLAST(y_colptr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_colptr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_colptr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_colptr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_colptr_BRESP),
    .I_BID(y_colptr_BID),
    .I_BUSER(y_colptr_BUSER)
);

outer_product_y_rowind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_ROWIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_ROWIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_ROWIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_ROWIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_ROWIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_ROWIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_ROWIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_ROWIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_ROWIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_ROWIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_ROWIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_ROWIND_CACHE_VALUE ))
y_rowind_m_axi_U(
    .AWVALID(m_axi_y_rowind_AWVALID),
    .AWREADY(m_axi_y_rowind_AWREADY),
    .AWADDR(m_axi_y_rowind_AWADDR),
    .AWID(m_axi_y_rowind_AWID),
    .AWLEN(m_axi_y_rowind_AWLEN),
    .AWSIZE(m_axi_y_rowind_AWSIZE),
    .AWBURST(m_axi_y_rowind_AWBURST),
    .AWLOCK(m_axi_y_rowind_AWLOCK),
    .AWCACHE(m_axi_y_rowind_AWCACHE),
    .AWPROT(m_axi_y_rowind_AWPROT),
    .AWQOS(m_axi_y_rowind_AWQOS),
    .AWREGION(m_axi_y_rowind_AWREGION),
    .AWUSER(m_axi_y_rowind_AWUSER),
    .WVALID(m_axi_y_rowind_WVALID),
    .WREADY(m_axi_y_rowind_WREADY),
    .WDATA(m_axi_y_rowind_WDATA),
    .WSTRB(m_axi_y_rowind_WSTRB),
    .WLAST(m_axi_y_rowind_WLAST),
    .WID(m_axi_y_rowind_WID),
    .WUSER(m_axi_y_rowind_WUSER),
    .ARVALID(m_axi_y_rowind_ARVALID),
    .ARREADY(m_axi_y_rowind_ARREADY),
    .ARADDR(m_axi_y_rowind_ARADDR),
    .ARID(m_axi_y_rowind_ARID),
    .ARLEN(m_axi_y_rowind_ARLEN),
    .ARSIZE(m_axi_y_rowind_ARSIZE),
    .ARBURST(m_axi_y_rowind_ARBURST),
    .ARLOCK(m_axi_y_rowind_ARLOCK),
    .ARCACHE(m_axi_y_rowind_ARCACHE),
    .ARPROT(m_axi_y_rowind_ARPROT),
    .ARQOS(m_axi_y_rowind_ARQOS),
    .ARREGION(m_axi_y_rowind_ARREGION),
    .ARUSER(m_axi_y_rowind_ARUSER),
    .RVALID(m_axi_y_rowind_RVALID),
    .RREADY(m_axi_y_rowind_RREADY),
    .RDATA(m_axi_y_rowind_RDATA),
    .RLAST(m_axi_y_rowind_RLAST),
    .RID(m_axi_y_rowind_RID),
    .RUSER(m_axi_y_rowind_RUSER),
    .RRESP(m_axi_y_rowind_RRESP),
    .BVALID(m_axi_y_rowind_BVALID),
    .BREADY(m_axi_y_rowind_BREADY),
    .BRESP(m_axi_y_rowind_BRESP),
    .BID(m_axi_y_rowind_BID),
    .BUSER(m_axi_y_rowind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_rowind_ARVALID),
    .I_ARREADY(y_rowind_ARREADY),
    .I_ARADDR(sext_ln14_fu_921_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_rowind_RVALID),
    .I_RREADY(y_rowind_RREADY),
    .I_RDATA(y_rowind_RDATA),
    .I_RID(y_rowind_RID),
    .I_RUSER(y_rowind_RUSER),
    .I_RRESP(y_rowind_RRESP),
    .I_RLAST(y_rowind_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_rowind_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_rowind_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_rowind_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_rowind_BRESP),
    .I_BID(y_rowind_BID),
    .I_BUSER(y_rowind_BUSER)
);

outer_product_y_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_DATA_CACHE_VALUE ))
y_data_m_axi_U(
    .AWVALID(m_axi_y_data_AWVALID),
    .AWREADY(m_axi_y_data_AWREADY),
    .AWADDR(m_axi_y_data_AWADDR),
    .AWID(m_axi_y_data_AWID),
    .AWLEN(m_axi_y_data_AWLEN),
    .AWSIZE(m_axi_y_data_AWSIZE),
    .AWBURST(m_axi_y_data_AWBURST),
    .AWLOCK(m_axi_y_data_AWLOCK),
    .AWCACHE(m_axi_y_data_AWCACHE),
    .AWPROT(m_axi_y_data_AWPROT),
    .AWQOS(m_axi_y_data_AWQOS),
    .AWREGION(m_axi_y_data_AWREGION),
    .AWUSER(m_axi_y_data_AWUSER),
    .WVALID(m_axi_y_data_WVALID),
    .WREADY(m_axi_y_data_WREADY),
    .WDATA(m_axi_y_data_WDATA),
    .WSTRB(m_axi_y_data_WSTRB),
    .WLAST(m_axi_y_data_WLAST),
    .WID(m_axi_y_data_WID),
    .WUSER(m_axi_y_data_WUSER),
    .ARVALID(m_axi_y_data_ARVALID),
    .ARREADY(m_axi_y_data_ARREADY),
    .ARADDR(m_axi_y_data_ARADDR),
    .ARID(m_axi_y_data_ARID),
    .ARLEN(m_axi_y_data_ARLEN),
    .ARSIZE(m_axi_y_data_ARSIZE),
    .ARBURST(m_axi_y_data_ARBURST),
    .ARLOCK(m_axi_y_data_ARLOCK),
    .ARCACHE(m_axi_y_data_ARCACHE),
    .ARPROT(m_axi_y_data_ARPROT),
    .ARQOS(m_axi_y_data_ARQOS),
    .ARREGION(m_axi_y_data_ARREGION),
    .ARUSER(m_axi_y_data_ARUSER),
    .RVALID(m_axi_y_data_RVALID),
    .RREADY(m_axi_y_data_RREADY),
    .RDATA(m_axi_y_data_RDATA),
    .RLAST(m_axi_y_data_RLAST),
    .RID(m_axi_y_data_RID),
    .RUSER(m_axi_y_data_RUSER),
    .RRESP(m_axi_y_data_RRESP),
    .BVALID(m_axi_y_data_BVALID),
    .BREADY(m_axi_y_data_BREADY),
    .BRESP(m_axi_y_data_BRESP),
    .BID(m_axi_y_data_BID),
    .BUSER(m_axi_y_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_data_ARVALID),
    .I_ARREADY(y_data_ARREADY),
    .I_ARADDR(sext_ln14_fu_921_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_data_RVALID),
    .I_RREADY(y_data_RREADY),
    .I_RDATA(y_data_RDATA),
    .I_RID(y_data_RID),
    .I_RUSER(y_data_RUSER),
    .I_RRESP(y_data_RRESP),
    .I_RLAST(y_data_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_data_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_data_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_data_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_data_BRESP),
    .I_BID(y_data_BID),
    .I_BUSER(y_data_BUSER)
);

outer_product_z_rowptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_ROWPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_ROWPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_ROWPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_ROWPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_ROWPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_ROWPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_ROWPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_ROWPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_ROWPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_ROWPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_ROWPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_ROWPTR_CACHE_VALUE ))
z_rowptr_m_axi_U(
    .AWVALID(m_axi_z_rowptr_AWVALID),
    .AWREADY(m_axi_z_rowptr_AWREADY),
    .AWADDR(m_axi_z_rowptr_AWADDR),
    .AWID(m_axi_z_rowptr_AWID),
    .AWLEN(m_axi_z_rowptr_AWLEN),
    .AWSIZE(m_axi_z_rowptr_AWSIZE),
    .AWBURST(m_axi_z_rowptr_AWBURST),
    .AWLOCK(m_axi_z_rowptr_AWLOCK),
    .AWCACHE(m_axi_z_rowptr_AWCACHE),
    .AWPROT(m_axi_z_rowptr_AWPROT),
    .AWQOS(m_axi_z_rowptr_AWQOS),
    .AWREGION(m_axi_z_rowptr_AWREGION),
    .AWUSER(m_axi_z_rowptr_AWUSER),
    .WVALID(m_axi_z_rowptr_WVALID),
    .WREADY(m_axi_z_rowptr_WREADY),
    .WDATA(m_axi_z_rowptr_WDATA),
    .WSTRB(m_axi_z_rowptr_WSTRB),
    .WLAST(m_axi_z_rowptr_WLAST),
    .WID(m_axi_z_rowptr_WID),
    .WUSER(m_axi_z_rowptr_WUSER),
    .ARVALID(m_axi_z_rowptr_ARVALID),
    .ARREADY(m_axi_z_rowptr_ARREADY),
    .ARADDR(m_axi_z_rowptr_ARADDR),
    .ARID(m_axi_z_rowptr_ARID),
    .ARLEN(m_axi_z_rowptr_ARLEN),
    .ARSIZE(m_axi_z_rowptr_ARSIZE),
    .ARBURST(m_axi_z_rowptr_ARBURST),
    .ARLOCK(m_axi_z_rowptr_ARLOCK),
    .ARCACHE(m_axi_z_rowptr_ARCACHE),
    .ARPROT(m_axi_z_rowptr_ARPROT),
    .ARQOS(m_axi_z_rowptr_ARQOS),
    .ARREGION(m_axi_z_rowptr_ARREGION),
    .ARUSER(m_axi_z_rowptr_ARUSER),
    .RVALID(m_axi_z_rowptr_RVALID),
    .RREADY(m_axi_z_rowptr_RREADY),
    .RDATA(m_axi_z_rowptr_RDATA),
    .RLAST(m_axi_z_rowptr_RLAST),
    .RID(m_axi_z_rowptr_RID),
    .RUSER(m_axi_z_rowptr_RUSER),
    .RRESP(m_axi_z_rowptr_RRESP),
    .BVALID(m_axi_z_rowptr_BVALID),
    .BREADY(m_axi_z_rowptr_BREADY),
    .BRESP(m_axi_z_rowptr_BRESP),
    .BID(m_axi_z_rowptr_BID),
    .BUSER(m_axi_z_rowptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(z_rowptr_ARVALID),
    .I_ARREADY(z_rowptr_ARREADY),
    .I_ARADDR(grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR),
    .I_ARID(grp_accumulate_fu_629_m_axi_z_rowptr_ARID),
    .I_ARLEN(grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN),
    .I_ARSIZE(grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE),
    .I_ARLOCK(grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK),
    .I_ARCACHE(grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE),
    .I_ARQOS(grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS),
    .I_ARPROT(grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT),
    .I_ARUSER(grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER),
    .I_ARBURST(grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST),
    .I_ARREGION(grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION),
    .I_RVALID(z_rowptr_RVALID),
    .I_RREADY(z_rowptr_RREADY),
    .I_RDATA(z_rowptr_RDATA),
    .I_RID(z_rowptr_RID),
    .I_RUSER(z_rowptr_RUSER),
    .I_RRESP(z_rowptr_RRESP),
    .I_RLAST(z_rowptr_RLAST),
    .I_AWVALID(z_rowptr_AWVALID),
    .I_AWREADY(z_rowptr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd5),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_rowptr_WVALID),
    .I_WREADY(z_rowptr_WREADY),
    .I_WDATA(z_rowptr_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_rowptr_BVALID),
    .I_BREADY(z_rowptr_BREADY),
    .I_BRESP(z_rowptr_BRESP),
    .I_BID(z_rowptr_BID),
    .I_BUSER(z_rowptr_BUSER)
);

outer_product_z_colind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_COLIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_COLIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_COLIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_COLIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_COLIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_COLIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_COLIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_COLIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_COLIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_COLIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_COLIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_COLIND_CACHE_VALUE ))
z_colind_m_axi_U(
    .AWVALID(m_axi_z_colind_AWVALID),
    .AWREADY(m_axi_z_colind_AWREADY),
    .AWADDR(m_axi_z_colind_AWADDR),
    .AWID(m_axi_z_colind_AWID),
    .AWLEN(m_axi_z_colind_AWLEN),
    .AWSIZE(m_axi_z_colind_AWSIZE),
    .AWBURST(m_axi_z_colind_AWBURST),
    .AWLOCK(m_axi_z_colind_AWLOCK),
    .AWCACHE(m_axi_z_colind_AWCACHE),
    .AWPROT(m_axi_z_colind_AWPROT),
    .AWQOS(m_axi_z_colind_AWQOS),
    .AWREGION(m_axi_z_colind_AWREGION),
    .AWUSER(m_axi_z_colind_AWUSER),
    .WVALID(m_axi_z_colind_WVALID),
    .WREADY(m_axi_z_colind_WREADY),
    .WDATA(m_axi_z_colind_WDATA),
    .WSTRB(m_axi_z_colind_WSTRB),
    .WLAST(m_axi_z_colind_WLAST),
    .WID(m_axi_z_colind_WID),
    .WUSER(m_axi_z_colind_WUSER),
    .ARVALID(m_axi_z_colind_ARVALID),
    .ARREADY(m_axi_z_colind_ARREADY),
    .ARADDR(m_axi_z_colind_ARADDR),
    .ARID(m_axi_z_colind_ARID),
    .ARLEN(m_axi_z_colind_ARLEN),
    .ARSIZE(m_axi_z_colind_ARSIZE),
    .ARBURST(m_axi_z_colind_ARBURST),
    .ARLOCK(m_axi_z_colind_ARLOCK),
    .ARCACHE(m_axi_z_colind_ARCACHE),
    .ARPROT(m_axi_z_colind_ARPROT),
    .ARQOS(m_axi_z_colind_ARQOS),
    .ARREGION(m_axi_z_colind_ARREGION),
    .ARUSER(m_axi_z_colind_ARUSER),
    .RVALID(m_axi_z_colind_RVALID),
    .RREADY(m_axi_z_colind_RREADY),
    .RDATA(m_axi_z_colind_RDATA),
    .RLAST(m_axi_z_colind_RLAST),
    .RID(m_axi_z_colind_RID),
    .RUSER(m_axi_z_colind_RUSER),
    .RRESP(m_axi_z_colind_RRESP),
    .BVALID(m_axi_z_colind_BVALID),
    .BREADY(m_axi_z_colind_BREADY),
    .BRESP(m_axi_z_colind_BRESP),
    .BID(m_axi_z_colind_BID),
    .BUSER(m_axi_z_colind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(z_colind_ARVALID),
    .I_ARREADY(z_colind_ARREADY),
    .I_ARADDR(grp_accumulate_fu_629_m_axi_z_colind_ARADDR),
    .I_ARID(grp_accumulate_fu_629_m_axi_z_colind_ARID),
    .I_ARLEN(grp_accumulate_fu_629_m_axi_z_colind_ARLEN),
    .I_ARSIZE(grp_accumulate_fu_629_m_axi_z_colind_ARSIZE),
    .I_ARLOCK(grp_accumulate_fu_629_m_axi_z_colind_ARLOCK),
    .I_ARCACHE(grp_accumulate_fu_629_m_axi_z_colind_ARCACHE),
    .I_ARQOS(grp_accumulate_fu_629_m_axi_z_colind_ARQOS),
    .I_ARPROT(grp_accumulate_fu_629_m_axi_z_colind_ARPROT),
    .I_ARUSER(grp_accumulate_fu_629_m_axi_z_colind_ARUSER),
    .I_ARBURST(grp_accumulate_fu_629_m_axi_z_colind_ARBURST),
    .I_ARREGION(grp_accumulate_fu_629_m_axi_z_colind_ARREGION),
    .I_RVALID(z_colind_RVALID),
    .I_RREADY(z_colind_RREADY),
    .I_RDATA(z_colind_RDATA),
    .I_RID(z_colind_RID),
    .I_RUSER(z_colind_RUSER),
    .I_RRESP(z_colind_RRESP),
    .I_RLAST(z_colind_RLAST),
    .I_AWVALID(z_colind_AWVALID),
    .I_AWREADY(z_colind_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd20),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_colind_WVALID),
    .I_WREADY(z_colind_WREADY),
    .I_WDATA(z_colind_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_colind_BVALID),
    .I_BREADY(z_colind_BREADY),
    .I_BRESP(z_colind_BRESP),
    .I_BID(z_colind_BID),
    .I_BUSER(z_colind_BUSER)
);

outer_product_z_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_DATA_CACHE_VALUE ))
z_data_m_axi_U(
    .AWVALID(m_axi_z_data_AWVALID),
    .AWREADY(m_axi_z_data_AWREADY),
    .AWADDR(m_axi_z_data_AWADDR),
    .AWID(m_axi_z_data_AWID),
    .AWLEN(m_axi_z_data_AWLEN),
    .AWSIZE(m_axi_z_data_AWSIZE),
    .AWBURST(m_axi_z_data_AWBURST),
    .AWLOCK(m_axi_z_data_AWLOCK),
    .AWCACHE(m_axi_z_data_AWCACHE),
    .AWPROT(m_axi_z_data_AWPROT),
    .AWQOS(m_axi_z_data_AWQOS),
    .AWREGION(m_axi_z_data_AWREGION),
    .AWUSER(m_axi_z_data_AWUSER),
    .WVALID(m_axi_z_data_WVALID),
    .WREADY(m_axi_z_data_WREADY),
    .WDATA(m_axi_z_data_WDATA),
    .WSTRB(m_axi_z_data_WSTRB),
    .WLAST(m_axi_z_data_WLAST),
    .WID(m_axi_z_data_WID),
    .WUSER(m_axi_z_data_WUSER),
    .ARVALID(m_axi_z_data_ARVALID),
    .ARREADY(m_axi_z_data_ARREADY),
    .ARADDR(m_axi_z_data_ARADDR),
    .ARID(m_axi_z_data_ARID),
    .ARLEN(m_axi_z_data_ARLEN),
    .ARSIZE(m_axi_z_data_ARSIZE),
    .ARBURST(m_axi_z_data_ARBURST),
    .ARLOCK(m_axi_z_data_ARLOCK),
    .ARCACHE(m_axi_z_data_ARCACHE),
    .ARPROT(m_axi_z_data_ARPROT),
    .ARQOS(m_axi_z_data_ARQOS),
    .ARREGION(m_axi_z_data_ARREGION),
    .ARUSER(m_axi_z_data_ARUSER),
    .RVALID(m_axi_z_data_RVALID),
    .RREADY(m_axi_z_data_RREADY),
    .RDATA(m_axi_z_data_RDATA),
    .RLAST(m_axi_z_data_RLAST),
    .RID(m_axi_z_data_RID),
    .RUSER(m_axi_z_data_RUSER),
    .RRESP(m_axi_z_data_RRESP),
    .BVALID(m_axi_z_data_BVALID),
    .BREADY(m_axi_z_data_BREADY),
    .BRESP(m_axi_z_data_BRESP),
    .BID(m_axi_z_data_BID),
    .BUSER(m_axi_z_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(z_data_ARVALID),
    .I_ARREADY(z_data_ARREADY),
    .I_ARADDR(grp_accumulate_fu_629_m_axi_z_data_ARADDR),
    .I_ARID(grp_accumulate_fu_629_m_axi_z_data_ARID),
    .I_ARLEN(grp_accumulate_fu_629_m_axi_z_data_ARLEN),
    .I_ARSIZE(grp_accumulate_fu_629_m_axi_z_data_ARSIZE),
    .I_ARLOCK(grp_accumulate_fu_629_m_axi_z_data_ARLOCK),
    .I_ARCACHE(grp_accumulate_fu_629_m_axi_z_data_ARCACHE),
    .I_ARQOS(grp_accumulate_fu_629_m_axi_z_data_ARQOS),
    .I_ARPROT(grp_accumulate_fu_629_m_axi_z_data_ARPROT),
    .I_ARUSER(grp_accumulate_fu_629_m_axi_z_data_ARUSER),
    .I_ARBURST(grp_accumulate_fu_629_m_axi_z_data_ARBURST),
    .I_ARREGION(grp_accumulate_fu_629_m_axi_z_data_ARREGION),
    .I_RVALID(z_data_RVALID),
    .I_RREADY(z_data_RREADY),
    .I_RDATA(z_data_RDATA),
    .I_RID(z_data_RID),
    .I_RUSER(z_data_RUSER),
    .I_RRESP(z_data_RRESP),
    .I_RLAST(z_data_RLAST),
    .I_AWVALID(z_data_AWVALID),
    .I_AWREADY(z_data_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd20),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_data_WVALID),
    .I_WREADY(z_data_WREADY),
    .I_WDATA(z_data_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_data_BVALID),
    .I_BREADY(z_data_BREADY),
    .I_BRESP(z_data_BRESP),
    .I_BID(z_data_BID),
    .I_BUSER(z_data_BUSER)
);

outer_product_temp_rowptr #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
temp_rowptr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_rowptr_address0),
    .ce0(temp_rowptr_ce0),
    .we0(temp_rowptr_we0),
    .d0(temp_rowptr_d0),
    .q0(temp_rowptr_q0)
);

outer_product_temp_colind #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
temp_colind_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_colind_address0),
    .ce0(temp_colind_ce0),
    .we0(temp_colind_we0),
    .d0(temp_colind_d0),
    .q0(temp_colind_q0)
);

outer_product_temp_colind #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
temp_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_data_V_address0),
    .ce0(temp_data_V_ce0),
    .we0(temp_data_V_we0),
    .d0(temp_data_V_d0),
    .q0(temp_data_V_q0)
);

outer_product_temp_rowptr #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
row_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_V_address0),
    .ce0(row_V_ce0),
    .we0(row_V_we0),
    .d0(row_V_d0),
    .q0(row_V_q0)
);

outer_product_partial_z_rowptr #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
partial_z_rowptr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(partial_z_rowptr_address0),
    .ce0(partial_z_rowptr_ce0),
    .we0(partial_z_rowptr_we0),
    .d0(partial_z_rowptr_d0),
    .q0(partial_z_rowptr_q0),
    .address1(grp_accumulate_fu_629_csr2_rowptr_address1),
    .ce1(partial_z_rowptr_ce1),
    .q1(partial_z_rowptr_q1)
);

outer_product_partial_z_colind #(
    .DataWidth( 3 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
partial_z_colind_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(partial_z_colind_address0),
    .ce0(partial_z_colind_ce0),
    .we0(partial_z_colind_we0),
    .d0(partial_z_colind_d0),
    .q0(partial_z_colind_q0)
);

outer_product_temp_colind #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
partial_z_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(partial_z_data_V_address0),
    .ce0(partial_z_data_V_ce0),
    .we0(partial_z_data_V_we0),
    .d0(partial_z_data_V_d0),
    .q0(partial_z_data_V_q0)
);

outer_product_accumulate grp_accumulate_fu_629(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_accumulate_fu_629_ap_start),
    .ap_done(grp_accumulate_fu_629_ap_done),
    .ap_idle(grp_accumulate_fu_629_ap_idle),
    .ap_ready(grp_accumulate_fu_629_ap_ready),
    .m_axi_z_rowptr_AWVALID(grp_accumulate_fu_629_m_axi_z_rowptr_AWVALID),
    .m_axi_z_rowptr_AWREADY(1'b0),
    .m_axi_z_rowptr_AWADDR(grp_accumulate_fu_629_m_axi_z_rowptr_AWADDR),
    .m_axi_z_rowptr_AWID(grp_accumulate_fu_629_m_axi_z_rowptr_AWID),
    .m_axi_z_rowptr_AWLEN(grp_accumulate_fu_629_m_axi_z_rowptr_AWLEN),
    .m_axi_z_rowptr_AWSIZE(grp_accumulate_fu_629_m_axi_z_rowptr_AWSIZE),
    .m_axi_z_rowptr_AWBURST(grp_accumulate_fu_629_m_axi_z_rowptr_AWBURST),
    .m_axi_z_rowptr_AWLOCK(grp_accumulate_fu_629_m_axi_z_rowptr_AWLOCK),
    .m_axi_z_rowptr_AWCACHE(grp_accumulate_fu_629_m_axi_z_rowptr_AWCACHE),
    .m_axi_z_rowptr_AWPROT(grp_accumulate_fu_629_m_axi_z_rowptr_AWPROT),
    .m_axi_z_rowptr_AWQOS(grp_accumulate_fu_629_m_axi_z_rowptr_AWQOS),
    .m_axi_z_rowptr_AWREGION(grp_accumulate_fu_629_m_axi_z_rowptr_AWREGION),
    .m_axi_z_rowptr_AWUSER(grp_accumulate_fu_629_m_axi_z_rowptr_AWUSER),
    .m_axi_z_rowptr_WVALID(grp_accumulate_fu_629_m_axi_z_rowptr_WVALID),
    .m_axi_z_rowptr_WREADY(1'b0),
    .m_axi_z_rowptr_WDATA(grp_accumulate_fu_629_m_axi_z_rowptr_WDATA),
    .m_axi_z_rowptr_WSTRB(grp_accumulate_fu_629_m_axi_z_rowptr_WSTRB),
    .m_axi_z_rowptr_WLAST(grp_accumulate_fu_629_m_axi_z_rowptr_WLAST),
    .m_axi_z_rowptr_WID(grp_accumulate_fu_629_m_axi_z_rowptr_WID),
    .m_axi_z_rowptr_WUSER(grp_accumulate_fu_629_m_axi_z_rowptr_WUSER),
    .m_axi_z_rowptr_ARVALID(grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID),
    .m_axi_z_rowptr_ARREADY(z_rowptr_ARREADY),
    .m_axi_z_rowptr_ARADDR(grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR),
    .m_axi_z_rowptr_ARID(grp_accumulate_fu_629_m_axi_z_rowptr_ARID),
    .m_axi_z_rowptr_ARLEN(grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN),
    .m_axi_z_rowptr_ARSIZE(grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE),
    .m_axi_z_rowptr_ARBURST(grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST),
    .m_axi_z_rowptr_ARLOCK(grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK),
    .m_axi_z_rowptr_ARCACHE(grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE),
    .m_axi_z_rowptr_ARPROT(grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT),
    .m_axi_z_rowptr_ARQOS(grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS),
    .m_axi_z_rowptr_ARREGION(grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION),
    .m_axi_z_rowptr_ARUSER(grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER),
    .m_axi_z_rowptr_RVALID(z_rowptr_RVALID),
    .m_axi_z_rowptr_RREADY(grp_accumulate_fu_629_m_axi_z_rowptr_RREADY),
    .m_axi_z_rowptr_RDATA(z_rowptr_RDATA),
    .m_axi_z_rowptr_RLAST(z_rowptr_RLAST),
    .m_axi_z_rowptr_RID(z_rowptr_RID),
    .m_axi_z_rowptr_RUSER(z_rowptr_RUSER),
    .m_axi_z_rowptr_RRESP(z_rowptr_RRESP),
    .m_axi_z_rowptr_BVALID(1'b0),
    .m_axi_z_rowptr_BREADY(grp_accumulate_fu_629_m_axi_z_rowptr_BREADY),
    .m_axi_z_rowptr_BRESP(2'd0),
    .m_axi_z_rowptr_BID(1'd0),
    .m_axi_z_rowptr_BUSER(1'd0),
    .m_axi_z_colind_AWVALID(grp_accumulate_fu_629_m_axi_z_colind_AWVALID),
    .m_axi_z_colind_AWREADY(1'b0),
    .m_axi_z_colind_AWADDR(grp_accumulate_fu_629_m_axi_z_colind_AWADDR),
    .m_axi_z_colind_AWID(grp_accumulate_fu_629_m_axi_z_colind_AWID),
    .m_axi_z_colind_AWLEN(grp_accumulate_fu_629_m_axi_z_colind_AWLEN),
    .m_axi_z_colind_AWSIZE(grp_accumulate_fu_629_m_axi_z_colind_AWSIZE),
    .m_axi_z_colind_AWBURST(grp_accumulate_fu_629_m_axi_z_colind_AWBURST),
    .m_axi_z_colind_AWLOCK(grp_accumulate_fu_629_m_axi_z_colind_AWLOCK),
    .m_axi_z_colind_AWCACHE(grp_accumulate_fu_629_m_axi_z_colind_AWCACHE),
    .m_axi_z_colind_AWPROT(grp_accumulate_fu_629_m_axi_z_colind_AWPROT),
    .m_axi_z_colind_AWQOS(grp_accumulate_fu_629_m_axi_z_colind_AWQOS),
    .m_axi_z_colind_AWREGION(grp_accumulate_fu_629_m_axi_z_colind_AWREGION),
    .m_axi_z_colind_AWUSER(grp_accumulate_fu_629_m_axi_z_colind_AWUSER),
    .m_axi_z_colind_WVALID(grp_accumulate_fu_629_m_axi_z_colind_WVALID),
    .m_axi_z_colind_WREADY(1'b0),
    .m_axi_z_colind_WDATA(grp_accumulate_fu_629_m_axi_z_colind_WDATA),
    .m_axi_z_colind_WSTRB(grp_accumulate_fu_629_m_axi_z_colind_WSTRB),
    .m_axi_z_colind_WLAST(grp_accumulate_fu_629_m_axi_z_colind_WLAST),
    .m_axi_z_colind_WID(grp_accumulate_fu_629_m_axi_z_colind_WID),
    .m_axi_z_colind_WUSER(grp_accumulate_fu_629_m_axi_z_colind_WUSER),
    .m_axi_z_colind_ARVALID(grp_accumulate_fu_629_m_axi_z_colind_ARVALID),
    .m_axi_z_colind_ARREADY(z_colind_ARREADY),
    .m_axi_z_colind_ARADDR(grp_accumulate_fu_629_m_axi_z_colind_ARADDR),
    .m_axi_z_colind_ARID(grp_accumulate_fu_629_m_axi_z_colind_ARID),
    .m_axi_z_colind_ARLEN(grp_accumulate_fu_629_m_axi_z_colind_ARLEN),
    .m_axi_z_colind_ARSIZE(grp_accumulate_fu_629_m_axi_z_colind_ARSIZE),
    .m_axi_z_colind_ARBURST(grp_accumulate_fu_629_m_axi_z_colind_ARBURST),
    .m_axi_z_colind_ARLOCK(grp_accumulate_fu_629_m_axi_z_colind_ARLOCK),
    .m_axi_z_colind_ARCACHE(grp_accumulate_fu_629_m_axi_z_colind_ARCACHE),
    .m_axi_z_colind_ARPROT(grp_accumulate_fu_629_m_axi_z_colind_ARPROT),
    .m_axi_z_colind_ARQOS(grp_accumulate_fu_629_m_axi_z_colind_ARQOS),
    .m_axi_z_colind_ARREGION(grp_accumulate_fu_629_m_axi_z_colind_ARREGION),
    .m_axi_z_colind_ARUSER(grp_accumulate_fu_629_m_axi_z_colind_ARUSER),
    .m_axi_z_colind_RVALID(z_colind_RVALID),
    .m_axi_z_colind_RREADY(grp_accumulate_fu_629_m_axi_z_colind_RREADY),
    .m_axi_z_colind_RDATA(z_colind_RDATA),
    .m_axi_z_colind_RLAST(z_colind_RLAST),
    .m_axi_z_colind_RID(z_colind_RID),
    .m_axi_z_colind_RUSER(z_colind_RUSER),
    .m_axi_z_colind_RRESP(z_colind_RRESP),
    .m_axi_z_colind_BVALID(1'b0),
    .m_axi_z_colind_BREADY(grp_accumulate_fu_629_m_axi_z_colind_BREADY),
    .m_axi_z_colind_BRESP(2'd0),
    .m_axi_z_colind_BID(1'd0),
    .m_axi_z_colind_BUSER(1'd0),
    .m_axi_z_data_AWVALID(grp_accumulate_fu_629_m_axi_z_data_AWVALID),
    .m_axi_z_data_AWREADY(1'b0),
    .m_axi_z_data_AWADDR(grp_accumulate_fu_629_m_axi_z_data_AWADDR),
    .m_axi_z_data_AWID(grp_accumulate_fu_629_m_axi_z_data_AWID),
    .m_axi_z_data_AWLEN(grp_accumulate_fu_629_m_axi_z_data_AWLEN),
    .m_axi_z_data_AWSIZE(grp_accumulate_fu_629_m_axi_z_data_AWSIZE),
    .m_axi_z_data_AWBURST(grp_accumulate_fu_629_m_axi_z_data_AWBURST),
    .m_axi_z_data_AWLOCK(grp_accumulate_fu_629_m_axi_z_data_AWLOCK),
    .m_axi_z_data_AWCACHE(grp_accumulate_fu_629_m_axi_z_data_AWCACHE),
    .m_axi_z_data_AWPROT(grp_accumulate_fu_629_m_axi_z_data_AWPROT),
    .m_axi_z_data_AWQOS(grp_accumulate_fu_629_m_axi_z_data_AWQOS),
    .m_axi_z_data_AWREGION(grp_accumulate_fu_629_m_axi_z_data_AWREGION),
    .m_axi_z_data_AWUSER(grp_accumulate_fu_629_m_axi_z_data_AWUSER),
    .m_axi_z_data_WVALID(grp_accumulate_fu_629_m_axi_z_data_WVALID),
    .m_axi_z_data_WREADY(1'b0),
    .m_axi_z_data_WDATA(grp_accumulate_fu_629_m_axi_z_data_WDATA),
    .m_axi_z_data_WSTRB(grp_accumulate_fu_629_m_axi_z_data_WSTRB),
    .m_axi_z_data_WLAST(grp_accumulate_fu_629_m_axi_z_data_WLAST),
    .m_axi_z_data_WID(grp_accumulate_fu_629_m_axi_z_data_WID),
    .m_axi_z_data_WUSER(grp_accumulate_fu_629_m_axi_z_data_WUSER),
    .m_axi_z_data_ARVALID(grp_accumulate_fu_629_m_axi_z_data_ARVALID),
    .m_axi_z_data_ARREADY(z_data_ARREADY),
    .m_axi_z_data_ARADDR(grp_accumulate_fu_629_m_axi_z_data_ARADDR),
    .m_axi_z_data_ARID(grp_accumulate_fu_629_m_axi_z_data_ARID),
    .m_axi_z_data_ARLEN(grp_accumulate_fu_629_m_axi_z_data_ARLEN),
    .m_axi_z_data_ARSIZE(grp_accumulate_fu_629_m_axi_z_data_ARSIZE),
    .m_axi_z_data_ARBURST(grp_accumulate_fu_629_m_axi_z_data_ARBURST),
    .m_axi_z_data_ARLOCK(grp_accumulate_fu_629_m_axi_z_data_ARLOCK),
    .m_axi_z_data_ARCACHE(grp_accumulate_fu_629_m_axi_z_data_ARCACHE),
    .m_axi_z_data_ARPROT(grp_accumulate_fu_629_m_axi_z_data_ARPROT),
    .m_axi_z_data_ARQOS(grp_accumulate_fu_629_m_axi_z_data_ARQOS),
    .m_axi_z_data_ARREGION(grp_accumulate_fu_629_m_axi_z_data_ARREGION),
    .m_axi_z_data_ARUSER(grp_accumulate_fu_629_m_axi_z_data_ARUSER),
    .m_axi_z_data_RVALID(z_data_RVALID),
    .m_axi_z_data_RREADY(grp_accumulate_fu_629_m_axi_z_data_RREADY),
    .m_axi_z_data_RDATA(z_data_RDATA),
    .m_axi_z_data_RLAST(z_data_RLAST),
    .m_axi_z_data_RID(z_data_RID),
    .m_axi_z_data_RUSER(z_data_RUSER),
    .m_axi_z_data_RRESP(z_data_RRESP),
    .m_axi_z_data_BVALID(1'b0),
    .m_axi_z_data_BREADY(grp_accumulate_fu_629_m_axi_z_data_BREADY),
    .m_axi_z_data_BRESP(2'd0),
    .m_axi_z_data_BID(1'd0),
    .m_axi_z_data_BUSER(1'd0),
    .csr2_rowptr_address0(grp_accumulate_fu_629_csr2_rowptr_address0),
    .csr2_rowptr_ce0(grp_accumulate_fu_629_csr2_rowptr_ce0),
    .csr2_rowptr_q0(partial_z_rowptr_q0),
    .csr2_rowptr_address1(grp_accumulate_fu_629_csr2_rowptr_address1),
    .csr2_rowptr_ce1(grp_accumulate_fu_629_csr2_rowptr_ce1),
    .csr2_rowptr_q1(partial_z_rowptr_q1),
    .csr2_colind_address0(grp_accumulate_fu_629_csr2_colind_address0),
    .csr2_colind_ce0(grp_accumulate_fu_629_csr2_colind_ce0),
    .csr2_colind_q0(partial_z_colind_q0),
    .csr2_data_address0(grp_accumulate_fu_629_csr2_data_address0),
    .csr2_data_ce0(grp_accumulate_fu_629_csr2_data_ce0),
    .csr2_data_q0(partial_z_data_V_q0),
    .out_csr_rowptr_address0(grp_accumulate_fu_629_out_csr_rowptr_address0),
    .out_csr_rowptr_ce0(grp_accumulate_fu_629_out_csr_rowptr_ce0),
    .out_csr_rowptr_we0(grp_accumulate_fu_629_out_csr_rowptr_we0),
    .out_csr_rowptr_d0(grp_accumulate_fu_629_out_csr_rowptr_d0),
    .out_csr_colind_address0(grp_accumulate_fu_629_out_csr_colind_address0),
    .out_csr_colind_ce0(grp_accumulate_fu_629_out_csr_colind_ce0),
    .out_csr_colind_we0(grp_accumulate_fu_629_out_csr_colind_we0),
    .out_csr_colind_d0(grp_accumulate_fu_629_out_csr_colind_d0),
    .out_csr_data_address0(grp_accumulate_fu_629_out_csr_data_address0),
    .out_csr_data_ce0(grp_accumulate_fu_629_out_csr_data_ce0),
    .out_csr_data_we0(grp_accumulate_fu_629_out_csr_data_we0),
    .out_csr_data_d0(grp_accumulate_fu_629_out_csr_data_d0)
);

outer_product_multiply_row_col grp_multiply_row_col_fu_645(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_multiply_row_col_fu_645_ap_start),
    .ap_done(grp_multiply_row_col_fu_645_ap_done),
    .ap_idle(grp_multiply_row_col_fu_645_ap_idle),
    .ap_ready(grp_multiply_row_col_fu_645_ap_ready),
    .row_address0(grp_multiply_row_col_fu_645_row_address0),
    .row_ce0(grp_multiply_row_col_fu_645_row_ce0),
    .row_q0(row_V_q0),
    .p_read(col_V_3_1_load_1_reg_1299),
    .p_read1(col_V_3_2_load_1_reg_1304),
    .p_read2(col_V_3_3_load_1_reg_1309),
    .p_read3(col_V_3_4_load_1_reg_1314),
    .out_rowptr_address0(grp_multiply_row_col_fu_645_out_rowptr_address0),
    .out_rowptr_ce0(grp_multiply_row_col_fu_645_out_rowptr_ce0),
    .out_rowptr_we0(grp_multiply_row_col_fu_645_out_rowptr_we0),
    .out_rowptr_d0(grp_multiply_row_col_fu_645_out_rowptr_d0),
    .out_colind_address0(grp_multiply_row_col_fu_645_out_colind_address0),
    .out_colind_ce0(grp_multiply_row_col_fu_645_out_colind_ce0),
    .out_colind_we0(grp_multiply_row_col_fu_645_out_colind_we0),
    .out_colind_d0(grp_multiply_row_col_fu_645_out_colind_d0),
    .out_data_address0(grp_multiply_row_col_fu_645_out_data_address0),
    .out_data_ce0(grp_multiply_row_col_fu_645_out_data_ce0),
    .out_data_we0(grp_multiply_row_col_fu_645_out_data_we0),
    .out_data_d0(grp_multiply_row_col_fu_645_out_data_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_accumulate_fu_629_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            grp_accumulate_fu_629_ap_start_reg <= 1'b1;
        end else if ((grp_accumulate_fu_629_ap_ready == 1'b1)) begin
            grp_accumulate_fu_629_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_multiply_row_col_fu_645_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd1))) begin
            grp_multiply_row_col_fu_645_ap_start_reg <= 1'b1;
        end else if ((grp_multiply_row_col_fu_645_ap_ready == 1'b1)) begin
            grp_multiply_row_col_fu_645_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln34_fu_772_p2) & (1'b1 == ap_CS_fsm_state25))) begin
        col_V_0_reg_531 <= 32'd0;
    end else if (((1'd1 == and_ln34_reg_1195) & (1'b1 == ap_CS_fsm_state34))) begin
        col_V_0_reg_531 <= x_data_addr_read_reg_1206;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (z_rowptr_BVALID == 1'b1))) begin
        i_10_reg_596 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state71) & (1'b0 == ap_block_state71_io))) begin
        i_10_reg_596 <= add_ln351_1_reg_1341;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_11_reg_497 <= 3'd0;
    end else if ((~(((icmp_ln435_reg_1319 == 1'd0) & (z_colind_BVALID == 1'b0)) | ((icmp_ln435_reg_1319 == 1'd0) & (z_data_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state76))) begin
        i_11_reg_497 <= add_ln25_reg_1125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_486 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_696_p2 == 1'd0))) begin
        i_1_reg_486 <= add_ln332_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_3_reg_509 <= add_ln28_reg_1155;
    end else if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        i_3_reg_509 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (y_colptr_RVALID == 1'b1))) begin
        i_4_reg_542 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        i_4_reg_542 <= add_ln9_reg_1233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln9_fu_910_p2 == 1'd1))) begin
        i_5_reg_563 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln325_1_fu_981_p2 == 1'd0))) begin
        i_5_reg_563 <= add_ln325_1_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln325_1_fu_981_p2 == 1'd1))) begin
        i_6_reg_574 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        i_6_reg_574 <= add_ln332_1_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_multiply_row_col_fu_645_ap_done == 1'b0) | (1'b1 == ap_block_state57_io)) & (icmp_ln435_reg_1319 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
        i_7_reg_607 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state79) & (z_rowptr_WREADY == 1'b1))) begin
        i_7_reg_607 <= add_ln344_reg_1369;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & (z_rowptr_AWREADY == 1'b1))) begin
        i_8_reg_585 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state63) & (z_rowptr_WREADY == 1'b1))) begin
        i_8_reg_585 <= add_ln344_1_reg_1323;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) & (z_rowptr_BVALID == 1'b1))) begin
        i_9_reg_618 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state87) & (1'b0 == ap_block_state87_io))) begin
        i_9_reg_618 <= add_ln351_reg_1387;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_475 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln325_fu_679_p2 == 1'd0))) begin
        i_reg_475 <= add_ln325_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        j_2_reg_521 <= j_5_reg_1218;
    end else if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        j_2_reg_521 <= start_idx_reg_1145;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (y_colptr_RVALID == 1'b1))) begin
        j_3_reg_553 <= start_idx_1_reg_1223;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_3_reg_553 <= j_7_fu_962_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln25_reg_1125 <= add_ln25_fu_708_p2;
        icmp_ln399_reg_1130 <= icmp_ln399_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln28_reg_1155 <= add_ln28_fu_731_p2;
        zext_ln28_reg_1160[2 : 0] <= zext_ln28_fu_737_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        add_ln344_1_reg_1323 <= add_ln344_1_fu_1011_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln344_reg_1369 <= add_ln344_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        add_ln351_1_reg_1341 <= add_ln351_1_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        add_ln351_reg_1387 <= add_ln351_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln9_reg_1233 <= add_ln9_fu_896_p2;
        zext_ln9_1_reg_1243[2 : 0] <= zext_ln9_1_fu_906_p1[2 : 0];
        zext_ln9_reg_1238[2 : 0] <= zext_ln9_fu_902_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        and_ln34_reg_1195 <= and_ln34_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        col_V_3_1_fu_174 <= col_V_3_9_fu_868_p3;
        col_V_3_2_fu_178 <= col_V_3_8_fu_860_p3;
        col_V_3_3_fu_182 <= col_V_3_6_fu_844_p3;
        col_V_3_4_fu_186 <= col_V_3_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd1))) begin
        col_V_3_1_load_1_reg_1299 <= col_V_3_1_fu_174;
        col_V_3_2_load_1_reg_1304 <= col_V_3_2_fu_178;
        col_V_3_3_load_1_reg_1309 <= col_V_3_3_fu_182;
        col_V_3_4_load_1_reg_1314 <= col_V_3_4_fu_186;
        icmp_ln435_reg_1319 <= icmp_ln435_fu_1005_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        col_idx_reg_1268 <= y_rowind_RDATA;
        y_data_addr_read_reg_1273 <= y_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        compare_reg_1190 <= x_colind_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        end_idx_1_reg_1228 <= y_colptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        end_idx_reg_1150 <= x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln9_fu_910_p2 == 1'd0))) begin
        icmp_ln16_reg_1251 <= icmp_ln16_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln28_fu_741_p2 == 1'd0))) begin
        icmp_ln34_reg_1168 <= icmp_ln34_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        j_5_reg_1218 <= j_5_fu_792_p3;
        trunc_ln34_reg_1211 <= trunc_ln34_fu_782_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        partial_z_colind_load_reg_1405 <= partial_z_colind_q0;
        partial_z_data_V_load_reg_1410 <= partial_z_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        partial_z_rowptr_load_reg_1382 <= partial_z_rowptr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        sext_ln33_reg_1179 <= sext_ln33_fu_757_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        start_idx_1_reg_1223 <= y_colptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        start_idx_reg_1145 <= x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        temp_colind_load_reg_1359 <= temp_colind_q0;
        temp_data_V_load_reg_1364 <= temp_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        temp_rowptr_load_reg_1336 <= temp_rowptr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_data_addr_read_reg_1206 <= x_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln34_fu_772_p2) & (1'b1 == ap_CS_fsm_state25))) begin
        x_data_addr_reg_1200 <= sext_ln33_reg_1179;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln28_fu_741_p2 == 1'd1))) begin
        y_colptr_addr_reg_1173[2 : 0] <= zext_ln399_reg_1134[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        zext_ln399_reg_1134[2 : 0] <= zext_ln399_fu_720_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln399_reg_1130 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln399_reg_1130 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        partial_z_colind_address0 = zext_ln351_fu_1069_p1;
    end else if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_colind_address0 = zext_ln332_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_colind_address0 = grp_multiply_row_col_fu_645_out_colind_address0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_colind_address0 = grp_accumulate_fu_629_csr2_colind_address0;
    end else begin
        partial_z_colind_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0)))) begin
        partial_z_colind_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_colind_ce0 = grp_multiply_row_col_fu_645_out_colind_ce0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_colind_ce0 = grp_accumulate_fu_629_csr2_colind_ce0;
    end else begin
        partial_z_colind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_colind_d0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_colind_d0 = grp_multiply_row_col_fu_645_out_colind_d0;
    end else begin
        partial_z_colind_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_colind_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_colind_we0 = grp_multiply_row_col_fu_645_out_colind_we0;
    end else begin
        partial_z_colind_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        partial_z_data_V_address0 = zext_ln351_fu_1069_p1;
    end else if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_data_V_address0 = zext_ln332_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_data_V_address0 = grp_multiply_row_col_fu_645_out_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_data_V_address0 = grp_accumulate_fu_629_csr2_data_address0;
    end else begin
        partial_z_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0)))) begin
        partial_z_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_data_V_ce0 = grp_multiply_row_col_fu_645_out_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_data_V_ce0 = grp_accumulate_fu_629_csr2_data_ce0;
    end else begin
        partial_z_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_data_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_data_V_d0 = grp_multiply_row_col_fu_645_out_data_d0;
    end else begin
        partial_z_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
        partial_z_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_data_V_we0 = grp_multiply_row_col_fu_645_out_data_we0;
    end else begin
        partial_z_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        partial_z_rowptr_address0 = zext_ln344_fu_1052_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        partial_z_rowptr_address0 = zext_ln325_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_rowptr_address0 = grp_multiply_row_col_fu_645_out_rowptr_address0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_rowptr_address0 = grp_accumulate_fu_629_csr2_rowptr_address0;
    end else begin
        partial_z_rowptr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state55))) begin
        partial_z_rowptr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_rowptr_ce0 = grp_multiply_row_col_fu_645_out_rowptr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_rowptr_ce0 = grp_accumulate_fu_629_csr2_rowptr_ce0;
    end else begin
        partial_z_rowptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        partial_z_rowptr_ce1 = grp_accumulate_fu_629_csr2_rowptr_ce1;
    end else begin
        partial_z_rowptr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        partial_z_rowptr_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_rowptr_d0 = grp_multiply_row_col_fu_645_out_rowptr_d0;
    end else begin
        partial_z_rowptr_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln325_1_fu_981_p2 == 1'd0))) begin
        partial_z_rowptr_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        partial_z_rowptr_we0 = grp_multiply_row_col_fu_645_out_rowptr_we0;
    end else begin
        partial_z_rowptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        row_V_address0 = zext_ln9_reg_1238;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        row_V_address0 = grp_multiply_row_col_fu_645_row_address0;
    end else begin
        row_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        row_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        row_V_ce0 = grp_multiply_row_col_fu_645_row_ce0;
    end else begin
        row_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        row_V_we0 = 1'b1;
    end else begin
        row_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        temp_colind_address0 = zext_ln351_1_fu_1034_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_colind_address0 = i_1_cast_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_colind_address0 = grp_accumulate_fu_629_out_csr_colind_address0;
    end else begin
        temp_colind_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state4))) begin
        temp_colind_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_colind_ce0 = grp_accumulate_fu_629_out_csr_colind_ce0;
    end else begin
        temp_colind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_colind_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_colind_d0 = grp_accumulate_fu_629_out_csr_colind_d0;
    end else begin
        temp_colind_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_696_p2 == 1'd0))) begin
        temp_colind_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_colind_we0 = grp_accumulate_fu_629_out_csr_colind_we0;
    end else begin
        temp_colind_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        temp_data_V_address0 = zext_ln351_1_fu_1034_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_data_V_address0 = i_1_cast_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_data_V_address0 = grp_accumulate_fu_629_out_csr_data_address0;
    end else begin
        temp_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state4))) begin
        temp_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_data_V_ce0 = grp_accumulate_fu_629_out_csr_data_ce0;
    end else begin
        temp_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_data_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_data_V_d0 = grp_accumulate_fu_629_out_csr_data_d0;
    end else begin
        temp_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_696_p2 == 1'd0))) begin
        temp_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_data_V_we0 = grp_accumulate_fu_629_out_csr_data_we0;
    end else begin
        temp_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        temp_rowptr_address0 = zext_ln344_1_fu_1017_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_rowptr_address0 = i_cast_fu_685_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_rowptr_address0 = grp_accumulate_fu_629_out_csr_rowptr_address0;
    end else begin
        temp_rowptr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_rowptr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_rowptr_ce0 = grp_accumulate_fu_629_out_csr_rowptr_ce0;
    end else begin
        temp_rowptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_rowptr_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_rowptr_d0 = grp_accumulate_fu_629_out_csr_rowptr_d0;
    end else begin
        temp_rowptr_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln325_fu_679_p2 == 1'd0))) begin
        temp_rowptr_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        temp_rowptr_we0 = grp_accumulate_fu_629_out_csr_rowptr_we0;
    end else begin
        temp_rowptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((x_colind_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        x_colind_ARVALID = 1'b1;
    end else begin
        x_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((x_colind_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        x_colind_RREADY = 1'b1;
    end else begin
        x_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_colind_blk_n_AR = m_axi_x_colind_ARREADY;
    end else begin
        x_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        x_colind_blk_n_R = m_axi_x_colind_RVALID;
    end else begin
        x_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((x_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        x_data_ARVALID = 1'b1;
    end else begin
        x_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((x_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        x_data_RREADY = 1'b1;
    end else begin
        x_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        x_data_blk_n_AR = m_axi_x_data_ARREADY;
    end else begin
        x_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_data_blk_n_R = m_axi_x_data_RVALID;
    end else begin
        x_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln399_reg_1130 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
        x_rowptr_ARVALID = 1'b1;
    end else begin
        x_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        x_rowptr_RREADY = 1'b1;
    end else begin
        x_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln399_reg_1130 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        x_rowptr_blk_n_AR = m_axi_x_rowptr_ARREADY;
    end else begin
        x_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        x_rowptr_blk_n_R = m_axi_x_rowptr_RVALID;
    end else begin
        x_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (y_colptr_ARREADY == 1'b1))) begin
        y_colptr_ARVALID = 1'b1;
    end else begin
        y_colptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state44) & (y_colptr_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (y_colptr_RVALID == 1'b1)))) begin
        y_colptr_RREADY = 1'b1;
    end else begin
        y_colptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_colptr_blk_n_AR = m_axi_y_colptr_ARREADY;
    end else begin
        y_colptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        y_colptr_blk_n_R = m_axi_y_colptr_RVALID;
    end else begin
        y_colptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (1'b0 == ap_block_state46_io))) begin
        y_data_ARVALID = 1'b1;
    end else begin
        y_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_data_RVALID == 1'b0) | (y_rowind_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53))) begin
        y_data_RREADY = 1'b1;
    end else begin
        y_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        y_data_blk_n_AR = m_axi_y_data_ARREADY;
    end else begin
        y_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        y_data_blk_n_R = m_axi_y_data_RVALID;
    end else begin
        y_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (1'b0 == ap_block_state46_io))) begin
        y_rowind_ARVALID = 1'b1;
    end else begin
        y_rowind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_data_RVALID == 1'b0) | (y_rowind_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53))) begin
        y_rowind_RREADY = 1'b1;
    end else begin
        y_rowind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        y_rowind_blk_n_AR = m_axi_y_rowind_ARREADY;
    end else begin
        y_rowind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        y_rowind_blk_n_R = m_axi_y_rowind_RVALID;
    end else begin
        y_rowind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_colind_ARVALID = grp_accumulate_fu_629_m_axi_z_colind_ARVALID;
    end else begin
        z_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io)) | ((1'b1 == ap_CS_fsm_state80) & (1'b0 == ap_block_state80_io)))) begin
        z_colind_AWVALID = 1'b1;
    end else begin
        z_colind_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((z_data_BVALID == 1'b0) | (z_colind_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state92)) | (~(((icmp_ln435_reg_1319 == 1'd0) & (z_colind_BVALID == 1'b0)) | ((icmp_ln435_reg_1319 == 1'd0) & (z_data_BVALID == 1'b0))) & (icmp_ln435_reg_1319 == 1'd0) & (1'b1 == ap_CS_fsm_state76)))) begin
        z_colind_BREADY = 1'b1;
    end else begin
        z_colind_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_colind_RREADY = grp_accumulate_fu_629_m_axi_z_colind_RREADY;
    end else begin
        z_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        z_colind_WDATA = zext_ln356_fu_1081_p1;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        z_colind_WDATA = temp_colind_load_reg_1359;
    end else begin
        z_colind_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state71) & (1'b0 == ap_block_state71_io)) | ((1'b1 == ap_CS_fsm_state87) & (1'b0 == ap_block_state87_io)))) begin
        z_colind_WVALID = 1'b1;
    end else begin
        z_colind_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state80))) begin
        z_colind_blk_n_AW = m_axi_z_colind_AWREADY;
    end else begin
        z_colind_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((icmp_ln435_reg_1319 == 1'd0) & (1'b1 == ap_CS_fsm_state76)))) begin
        z_colind_blk_n_B = m_axi_z_colind_BVALID;
    end else begin
        z_colind_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state87))) begin
        z_colind_blk_n_W = m_axi_z_colind_WREADY;
    end else begin
        z_colind_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_data_ARVALID = grp_accumulate_fu_629_m_axi_z_data_ARVALID;
    end else begin
        z_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io)) | ((1'b1 == ap_CS_fsm_state80) & (1'b0 == ap_block_state80_io)))) begin
        z_data_AWVALID = 1'b1;
    end else begin
        z_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((z_data_BVALID == 1'b0) | (z_colind_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state92)) | (~(((icmp_ln435_reg_1319 == 1'd0) & (z_colind_BVALID == 1'b0)) | ((icmp_ln435_reg_1319 == 1'd0) & (z_data_BVALID == 1'b0))) & (icmp_ln435_reg_1319 == 1'd0) & (1'b1 == ap_CS_fsm_state76)))) begin
        z_data_BREADY = 1'b1;
    end else begin
        z_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_data_RREADY = grp_accumulate_fu_629_m_axi_z_data_RREADY;
    end else begin
        z_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        z_data_WDATA = partial_z_data_V_load_reg_1410;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        z_data_WDATA = temp_data_V_load_reg_1364;
    end else begin
        z_data_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state71) & (1'b0 == ap_block_state71_io)) | ((1'b1 == ap_CS_fsm_state87) & (1'b0 == ap_block_state87_io)))) begin
        z_data_WVALID = 1'b1;
    end else begin
        z_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state80))) begin
        z_data_blk_n_AW = m_axi_z_data_AWREADY;
    end else begin
        z_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((icmp_ln435_reg_1319 == 1'd0) & (1'b1 == ap_CS_fsm_state76)))) begin
        z_data_blk_n_B = m_axi_z_data_BVALID;
    end else begin
        z_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state87))) begin
        z_data_blk_n_W = m_axi_z_data_WREADY;
    end else begin
        z_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_rowptr_ARVALID = grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID;
    end else begin
        z_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (z_rowptr_AWREADY == 1'b1)) | (~((grp_multiply_row_col_fu_645_ap_done == 1'b0) | (1'b1 == ap_block_state57_io)) & (icmp_ln435_reg_1319 == 1'd1) & (1'b1 == ap_CS_fsm_state57)))) begin
        z_rowptr_AWVALID = 1'b1;
    end else begin
        z_rowptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state68) & (z_rowptr_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state84) & (z_rowptr_BVALID == 1'b1)))) begin
        z_rowptr_BREADY = 1'b1;
    end else begin
        z_rowptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        z_rowptr_RREADY = grp_accumulate_fu_629_m_axi_z_rowptr_RREADY;
    end else begin
        z_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        z_rowptr_WDATA = partial_z_rowptr_load_reg_1382;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        z_rowptr_WDATA = temp_rowptr_load_reg_1336;
    end else begin
        z_rowptr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state63) & (z_rowptr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state79) & (z_rowptr_WREADY == 1'b1)))) begin
        z_rowptr_WVALID = 1'b1;
    end else begin
        z_rowptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((icmp_ln435_reg_1319 == 1'd1) & (1'b1 == ap_CS_fsm_state57)))) begin
        z_rowptr_blk_n_AW = m_axi_z_rowptr_AWREADY;
    end else begin
        z_rowptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state84))) begin
        z_rowptr_blk_n_B = m_axi_z_rowptr_BVALID;
    end else begin
        z_rowptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state79))) begin
        z_rowptr_blk_n_W = m_axi_z_rowptr_WREADY;
    end else begin
        z_rowptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln325_fu_679_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_696_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln399_reg_1130 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln399_reg_1130 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln28_fu_741_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((x_colind_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((x_colind_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'd0 == and_ln34_fu_772_p2) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((x_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((x_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (y_colptr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (y_colptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (y_colptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln9_fu_910_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (1'b0 == ap_block_state46_io))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if ((~((y_data_RVALID == 1'b0) | (y_rowind_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln325_1_fu_981_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln332_1_fu_999_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            if ((~((grp_multiply_row_col_fu_645_ap_done == 1'b0) | (1'b1 == ap_block_state57_io)) & (icmp_ln435_reg_1319 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else if ((~((grp_multiply_row_col_fu_645_ap_done == 1'b0) | (1'b1 == ap_block_state57_io)) & (icmp_ln435_reg_1319 == 1'd0) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (grp_accumulate_fu_629_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (z_rowptr_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (icmp_ln344_1_fu_1022_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_block_state64_io))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (icmp_ln351_1_fu_1040_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (1'b0 == ap_block_state71_io))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if ((~(((icmp_ln435_reg_1319 == 1'd0) & (z_colind_BVALID == 1'b0)) | ((icmp_ln435_reg_1319 == 1'd0) & (z_data_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln344_fu_1057_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == ap_CS_fsm_state79) & (z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & (1'b0 == ap_block_state80_io))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (icmp_ln351_fu_1075_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((1'b1 == ap_CS_fsm_state87) & (1'b0 == ap_block_state87_io))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            if ((~((z_data_BVALID == 1'b0) | (z_colind_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_708_p2 = (i_11_reg_497 + 3'd1);

assign add_ln28_fu_731_p2 = (i_3_reg_509 + 3'd1);

assign add_ln325_1_fu_970_p2 = (i_5_reg_563 + 3'd1);

assign add_ln325_fu_673_p2 = (i_reg_475 + 3'd1);

assign add_ln332_1_fu_987_p2 = (i_6_reg_574 + 5'd1);

assign add_ln332_fu_690_p2 = (i_1_reg_486 + 5'd1);

assign add_ln344_1_fu_1011_p2 = (i_8_reg_585 + 3'd1);

assign add_ln344_fu_1046_p2 = (i_7_reg_607 + 3'd1);

assign add_ln351_1_fu_1028_p2 = (i_10_reg_596 + 5'd1);

assign add_ln351_fu_1063_p2 = (i_9_reg_618 + 5'd1);

assign add_ln9_fu_896_p2 = (i_4_reg_542 + 3'd1);

assign and_ln16_fu_943_p2 = (icmp_ln16_reg_1251 & icmp_ln16_1_fu_939_p2);

assign and_ln34_fu_772_p2 = (icmp_ln34_reg_1168 & icmp_ln34_1_fu_768_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

always @ (*) begin
    ap_block_state46_io = ((y_data_ARREADY == 1'b0) | (y_rowind_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state53 = ((y_data_RVALID == 1'b0) | (y_rowind_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state57_io = ((icmp_ln435_reg_1319 == 1'd1) & (z_rowptr_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state64_io = ((z_data_AWREADY == 1'b0) | (z_colind_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state71_io = ((z_data_WREADY == 1'b0) | (z_colind_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state76 = (((icmp_ln435_reg_1319 == 1'd0) & (z_colind_BVALID == 1'b0)) | ((icmp_ln435_reg_1319 == 1'd0) & (z_data_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state7_io = ((x_rowptr_ARREADY == 1'b0) & (icmp_ln399_reg_1130 == 1'd0));
end

always @ (*) begin
    ap_block_state80_io = ((z_data_AWREADY == 1'b0) | (z_colind_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state87_io = ((z_data_WREADY == 1'b0) | (z_colind_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state92 = ((z_data_BVALID == 1'b0) | (z_colind_BVALID == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_V_3_6_fu_844_p3 = ((or_ln34_fu_814_p2[0:0] == 1'b1) ? col_V_3_3_fu_182 : select_ln34_2_fu_836_p3);

assign col_V_3_7_fu_852_p3 = ((icmp_ln34_3_fu_804_p2[0:0] == 1'b1) ? col_V_0_reg_531 : col_V_3_2_fu_178);

assign col_V_3_8_fu_860_p3 = ((icmp_ln34_4_fu_809_p2[0:0] == 1'b1) ? col_V_3_2_fu_178 : col_V_3_7_fu_852_p3);

assign col_V_3_9_fu_868_p3 = ((icmp_ln34_4_fu_809_p2[0:0] == 1'b1) ? col_V_0_reg_531 : col_V_3_1_fu_174);

assign col_V_3_fu_828_p3 = ((or_ln34_fu_814_p2[0:0] == 1'b1) ? col_V_3_4_fu_186 : select_ln34_fu_820_p3);

assign grp_accumulate_fu_629_ap_start = grp_accumulate_fu_629_ap_start_reg;

assign grp_multiply_row_col_fu_645_ap_start = grp_multiply_row_col_fu_645_ap_start_reg;

assign i_1_cast_fu_702_p1 = i_1_reg_486;

assign i_cast_fu_685_p1 = i_reg_475;

assign icmp_ln16_1_fu_939_p2 = ((col_idx_reg_1268 == zext_ln9_1_reg_1243) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_916_p2 = (($signed(j_3_reg_553) < $signed(end_idx_1_reg_1228)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_741_p2 = ((i_3_reg_509 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln325_1_fu_981_p2 = ((i_5_reg_563 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln325_fu_679_p2 = ((i_reg_475 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln332_1_fu_999_p2 = ((i_6_reg_574 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln332_fu_696_p2 = ((i_1_reg_486 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln344_1_fu_1022_p2 = ((i_8_reg_585 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln344_fu_1057_p2 = ((i_7_reg_607 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_768_p2 = ((compare_reg_1190 == zext_ln28_reg_1160) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_799_p2 = ((trunc_ln34_reg_1211 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_804_p2 = ((trunc_ln34_reg_1211 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln34_4_fu_809_p2 = ((trunc_ln34_reg_1211 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_747_p2 = (($signed(j_2_reg_521) < $signed(end_idx_reg_1150)) ? 1'b1 : 1'b0);

assign icmp_ln351_1_fu_1040_p2 = ((i_10_reg_596 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln351_fu_1075_p2 = ((i_9_reg_618 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln399_fu_714_p2 = ((i_11_reg_497 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln435_fu_1005_p2 = ((i_11_reg_497 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_910_p2 = ((i_4_reg_542 == 3'd5) ? 1'b1 : 1'b0);

assign j_4_fu_786_p2 = ($signed(j_2_reg_521) + $signed(32'd1));

assign j_5_fu_792_p3 = ((and_ln34_reg_1195[0:0] == 1'b1) ? j_4_fu_786_p2 : j_2_reg_521);

assign j_6_fu_956_p2 = ($signed(j_3_reg_553) + $signed(32'd1));

assign j_7_fu_962_p3 = ((and_ln16_fu_943_p2[0:0] == 1'b1) ? j_6_fu_956_p2 : j_3_reg_553);

assign or_ln34_fu_814_p2 = (icmp_ln34_4_fu_809_p2 | icmp_ln34_3_fu_804_p2);

assign row_V_d0 = ((and_ln16_fu_943_p2[0:0] == 1'b1) ? y_data_addr_read_reg_1273 : 32'd0);

assign select_ln34_2_fu_836_p3 = ((icmp_ln34_2_fu_799_p2[0:0] == 1'b1) ? col_V_0_reg_531 : col_V_3_3_fu_182);

assign select_ln34_fu_820_p3 = ((icmp_ln34_2_fu_799_p2[0:0] == 1'b1) ? col_V_3_4_fu_186 : col_V_0_reg_531);

assign sext_ln14_fu_921_p1 = $signed(j_3_reg_553);

assign sext_ln33_fu_757_p1 = $signed(j_2_reg_521);

assign trunc_ln34_fu_782_p1 = i_3_reg_509[1:0];

assign zext_ln28_fu_737_p1 = i_3_reg_509;

assign zext_ln325_fu_976_p1 = i_5_reg_563;

assign zext_ln332_fu_993_p1 = i_6_reg_574;

assign zext_ln344_1_fu_1017_p1 = i_8_reg_585;

assign zext_ln344_fu_1052_p1 = i_7_reg_607;

assign zext_ln351_1_fu_1034_p1 = i_10_reg_596;

assign zext_ln351_fu_1069_p1 = i_9_reg_618;

assign zext_ln356_fu_1081_p1 = partial_z_colind_load_reg_1405;

assign zext_ln399_fu_720_p1 = i_11_reg_497;

assign zext_ln9_1_fu_906_p1 = i_4_reg_542;

assign zext_ln9_fu_902_p1 = i_4_reg_542;

always @ (posedge ap_clk) begin
    zext_ln399_reg_1134[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_1160[31:3] <= 29'b00000000000000000000000000000;
    y_colptr_addr_reg_1173[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_1238[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_1_reg_1243[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //outer_product
