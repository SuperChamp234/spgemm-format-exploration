// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module outer_product_multiply_row_col (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_address0,
        row_ce0,
        row_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        out_rowptr_address0,
        out_rowptr_ce0,
        out_rowptr_we0,
        out_rowptr_d0,
        out_colind_address0,
        out_colind_ce0,
        out_colind_we0,
        out_colind_d0,
        out_data_address0,
        out_data_ce0,
        out_data_we0,
        out_data_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] row_address0;
output   row_ce0;
input  [31:0] row_q0;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
output  [2:0] out_rowptr_address0;
output   out_rowptr_ce0;
output   out_rowptr_we0;
output  [31:0] out_rowptr_d0;
output  [4:0] out_colind_address0;
output   out_colind_ce0;
output   out_colind_we0;
output  [2:0] out_colind_d0;
output  [4:0] out_data_address0;
output   out_data_ce0;
output   out_data_we0;
output  [31:0] out_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] row_address0;
reg row_ce0;
reg[2:0] out_rowptr_address0;
reg out_rowptr_ce0;
reg out_rowptr_we0;
reg[31:0] out_rowptr_d0;
reg[4:0] out_colind_address0;
reg out_colind_ce0;
reg out_colind_we0;
reg[2:0] out_colind_d0;
reg[4:0] out_data_address0;
reg out_data_ce0;
reg out_data_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_318;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_mult_fu_302_ap_return;
reg   [31:0] reg_323;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln1499_fu_328_p2;
reg   [0:0] icmp_ln1499_reg_561;
wire   [2:0] add_ln57_fu_339_p2;
reg   [2:0] add_ln57_reg_566;
wire    ap_CS_fsm_state2;
reg   [31:0] z_idx_3_reg_571;
wire   [0:0] icmp_ln57_fu_354_p2;
wire   [0:0] icmp_ln1499_1_fu_360_p2;
reg   [0:0] icmp_ln1499_1_reg_591;
wire   [0:0] or_ln59_fu_370_p2;
reg   [0:0] or_ln59_reg_596;
wire   [2:0] add_ln57_1_fu_390_p2;
reg   [2:0] add_ln57_1_reg_600;
wire    ap_CS_fsm_state6;
reg   [31:0] z_idx_6_reg_605;
wire   [0:0] icmp_ln57_1_fu_405_p2;
wire   [0:0] icmp_ln1499_3_fu_411_p2;
reg   [0:0] icmp_ln1499_3_reg_625;
wire   [0:0] or_ln59_1_fu_421_p2;
reg   [0:0] or_ln59_1_reg_630;
wire   [2:0] add_ln57_2_fu_441_p2;
reg   [2:0] add_ln57_2_reg_634;
wire    ap_CS_fsm_state10;
reg   [31:0] z_idx_9_reg_639;
wire   [0:0] icmp_ln57_2_fu_456_p2;
wire   [0:0] icmp_ln1499_5_fu_462_p2;
reg   [0:0] icmp_ln1499_5_reg_659;
wire   [0:0] or_ln59_2_fu_472_p2;
reg   [0:0] or_ln59_2_reg_664;
wire   [2:0] add_ln57_3_fu_492_p2;
reg   [2:0] add_ln57_3_reg_668;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln57_3_fu_503_p2;
wire   [0:0] or_ln59_3_fu_509_p2;
reg   [0:0] or_ln59_3_reg_681;
wire    grp_mult_fu_302_ap_ready;
reg   [31:0] grp_mult_fu_302_b;
reg   [2:0] j_reg_250;
wire    ap_CS_fsm_state5;
reg   [2:0] j_8_reg_263;
wire    ap_CS_fsm_state9;
reg   [2:0] j_9_reg_276;
wire    ap_CS_fsm_state13;
reg   [2:0] j_10_reg_289;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln57_fu_349_p1;
wire   [63:0] zext_ln61_fu_385_p1;
wire   [63:0] zext_ln57_1_fu_400_p1;
wire   [63:0] zext_ln61_1_fu_436_p1;
wire   [63:0] zext_ln57_2_fu_451_p1;
wire   [63:0] zext_ln61_2_fu_487_p1;
wire   [63:0] zext_ln57_3_fu_498_p1;
wire   [63:0] zext_ln61_3_fu_514_p1;
reg   [31:0] z_idx_fu_48;
wire   [31:0] z_idx_4_fu_375_p2;
reg   [31:0] z_idx_1_fu_52;
wire   [31:0] z_idx_7_fu_426_p2;
reg   [31:0] z_idx_5_fu_56;
wire   [31:0] z_idx_10_fu_477_p2;
reg   [31:0] z_idx_8_fu_60;
wire   [31:0] z_idx_11_fu_520_p2;
wire   [0:0] grp_fu_308_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

outer_product_mult grp_mult_fu_302(
    .ap_ready(grp_mult_fu_302_ap_ready),
    .a(reg_318),
    .b(grp_mult_fu_302_b),
    .ap_return(grp_mult_fu_302_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_10_reg_289 <= add_ln57_3_reg_668;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln57_2_fu_456_p2 == 1'd1))) begin
        j_10_reg_289 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_8_reg_263 <= add_ln57_1_reg_600;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_354_p2 == 1'd1))) begin
        j_8_reg_263 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_9_reg_276 <= add_ln57_2_reg_634;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln57_1_fu_405_p2 == 1'd1))) begin
        j_9_reg_276 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_250 <= add_ln57_reg_566;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_250 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_354_p2 == 1'd1))) begin
        z_idx_1_fu_52 <= z_idx_fu_48;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_idx_1_fu_52 <= z_idx_7_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln57_1_fu_405_p2 == 1'd1))) begin
        z_idx_5_fu_56 <= z_idx_1_fu_52;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        z_idx_5_fu_56 <= z_idx_10_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln57_2_fu_456_p2 == 1'd1))) begin
        z_idx_8_fu_60 <= z_idx_5_fu_56;
    end else if (((or_ln59_3_reg_681 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        z_idx_8_fu_60 <= z_idx_11_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        z_idx_fu_48 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        z_idx_fu_48 <= z_idx_4_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln57_1_reg_600 <= add_ln57_1_fu_390_p2;
        z_idx_6_reg_605 <= z_idx_1_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln57_2_reg_634 <= add_ln57_2_fu_441_p2;
        z_idx_9_reg_639 <= z_idx_5_fu_56;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln57_3_reg_668 <= add_ln57_3_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln57_reg_566 <= add_ln57_fu_339_p2;
        z_idx_3_reg_571 <= z_idx_fu_48;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_354_p2 == 1'd1))) begin
        icmp_ln1499_1_reg_591 <= icmp_ln1499_1_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln57_1_fu_405_p2 == 1'd1))) begin
        icmp_ln1499_3_reg_625 <= icmp_ln1499_3_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln57_2_fu_456_p2 == 1'd1))) begin
        icmp_ln1499_5_reg_659 <= icmp_ln1499_5_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1499_reg_561 <= icmp_ln1499_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln59_1_reg_630 <= or_ln59_1_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        or_ln59_2_reg_664 <= or_ln59_2_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        or_ln59_3_reg_681 <= or_ln59_3_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_ln59_reg_596 <= or_ln59_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_318 <= row_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_323 <= grp_mult_fu_302_ap_return;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln57_3_fu_503_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln57_3_fu_503_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_mult_fu_302_b = p_read3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_mult_fu_302_b = p_read2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_mult_fu_302_b = p_read1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_mult_fu_302_b = p_read;
    end else begin
        grp_mult_fu_302_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_colind_address0 = zext_ln61_3_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_colind_address0 = zext_ln61_2_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_colind_address0 = zext_ln61_1_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_colind_address0 = zext_ln61_fu_385_p1;
    end else begin
        out_colind_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        out_colind_ce0 = 1'b1;
    end else begin
        out_colind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_colind_d0 = j_10_reg_289;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_colind_d0 = j_9_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_colind_d0 = j_8_reg_263;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_colind_d0 = j_reg_250;
    end else begin
        out_colind_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln59_3_reg_681 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_CS_fsm_state13) & (or_ln59_2_reg_664 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (or_ln59_1_reg_630 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (or_ln59_reg_596 == 1'd0)))) begin
        out_colind_we0 = 1'b1;
    end else begin
        out_colind_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_data_address0 = zext_ln61_3_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_data_address0 = zext_ln61_2_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_data_address0 = zext_ln61_1_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_address0 = zext_ln61_fu_385_p1;
    end else begin
        out_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        out_data_ce0 = 1'b1;
    end else begin
        out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln59_3_reg_681 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_CS_fsm_state13) & (or_ln59_2_reg_664 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (or_ln59_1_reg_630 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (or_ln59_reg_596 == 1'd0)))) begin
        out_data_we0 = 1'b1;
    end else begin
        out_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        out_rowptr_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_rowptr_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_rowptr_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_rowptr_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        out_rowptr_address0 = 64'd0;
    end else begin
        out_rowptr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_rowptr_ce0 = 1'b1;
    end else begin
        out_rowptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        out_rowptr_d0 = z_idx_8_fu_60;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_rowptr_d0 = z_idx_5_fu_56;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_rowptr_d0 = z_idx_1_fu_52;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_rowptr_d0 = z_idx_fu_48;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        out_rowptr_d0 = 32'd0;
    end else begin
        out_rowptr_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln57_3_fu_503_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln57_2_fu_456_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln57_1_fu_405_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_354_p2 == 1'd1)))) begin
        out_rowptr_we0 = 1'b1;
    end else begin
        out_rowptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        row_address0 = zext_ln57_3_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        row_address0 = zext_ln57_2_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        row_address0 = zext_ln57_1_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_address0 = zext_ln57_fu_349_p1;
    end else begin
        row_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        row_ce0 = 1'b1;
    end else begin
        row_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (or_ln59_fu_370_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln57_1_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (or_ln59_1_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln57_2_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (or_ln59_2_fu_472_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln57_3_fu_503_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((or_ln59_3_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_1_fu_390_p2 = (j_8_reg_263 + 3'd1);

assign add_ln57_2_fu_441_p2 = (j_9_reg_276 + 3'd1);

assign add_ln57_3_fu_492_p2 = (j_10_reg_289 + 3'd1);

assign add_ln57_fu_339_p2 = (j_reg_250 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_308_p2 = ((row_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_360_p2 = ((p_read1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_3_fu_411_p2 = ((p_read2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_5_fu_462_p2 = ((p_read3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_328_p2 = ((p_read == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_405_p2 = ((j_8_reg_263 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_456_p2 = ((j_9_reg_276 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln57_3_fu_503_p2 = ((j_10_reg_289 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_354_p2 = ((j_reg_250 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln59_1_fu_421_p2 = (icmp_ln1499_1_reg_591 | grp_fu_308_p2);

assign or_ln59_2_fu_472_p2 = (icmp_ln1499_3_reg_625 | grp_fu_308_p2);

assign or_ln59_3_fu_509_p2 = (icmp_ln1499_5_reg_659 | grp_fu_308_p2);

assign or_ln59_fu_370_p2 = (icmp_ln1499_reg_561 | grp_fu_308_p2);

assign out_data_d0 = reg_323;

assign z_idx_10_fu_477_p2 = (z_idx_5_fu_56 + 32'd1);

assign z_idx_11_fu_520_p2 = (z_idx_8_fu_60 + 32'd1);

assign z_idx_4_fu_375_p2 = (z_idx_fu_48 + 32'd1);

assign z_idx_7_fu_426_p2 = (z_idx_1_fu_52 + 32'd1);

assign zext_ln57_1_fu_400_p1 = j_8_reg_263;

assign zext_ln57_2_fu_451_p1 = j_9_reg_276;

assign zext_ln57_3_fu_498_p1 = j_10_reg_289;

assign zext_ln57_fu_349_p1 = j_reg_250;

assign zext_ln61_1_fu_436_p1 = z_idx_6_reg_605;

assign zext_ln61_2_fu_487_p1 = z_idx_9_reg_639;

assign zext_ln61_3_fu_514_p1 = z_idx_8_fu_60;

assign zext_ln61_fu_385_p1 = z_idx_3_reg_571;

endmodule //outer_product_multiply_row_col
