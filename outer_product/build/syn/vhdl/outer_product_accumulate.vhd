-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity outer_product_accumulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_z_rowptr_AWVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_AWREADY : IN STD_LOGIC;
    m_axi_z_rowptr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_rowptr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_rowptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_WVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_WREADY : IN STD_LOGIC;
    m_axi_z_rowptr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_rowptr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_WLAST : OUT STD_LOGIC;
    m_axi_z_rowptr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_ARVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_ARREADY : IN STD_LOGIC;
    m_axi_z_rowptr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_rowptr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_rowptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_RVALID : IN STD_LOGIC;
    m_axi_z_rowptr_RREADY : OUT STD_LOGIC;
    m_axi_z_rowptr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_rowptr_RLAST : IN STD_LOGIC;
    m_axi_z_rowptr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_BVALID : IN STD_LOGIC;
    m_axi_z_rowptr_BREADY : OUT STD_LOGIC;
    m_axi_z_rowptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_rowptr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_AWVALID : OUT STD_LOGIC;
    m_axi_z_colind_AWREADY : IN STD_LOGIC;
    m_axi_z_colind_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_colind_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_colind_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_WVALID : OUT STD_LOGIC;
    m_axi_z_colind_WREADY : IN STD_LOGIC;
    m_axi_z_colind_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_colind_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_WLAST : OUT STD_LOGIC;
    m_axi_z_colind_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_ARVALID : OUT STD_LOGIC;
    m_axi_z_colind_ARREADY : IN STD_LOGIC;
    m_axi_z_colind_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_colind_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_colind_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_RVALID : IN STD_LOGIC;
    m_axi_z_colind_RREADY : OUT STD_LOGIC;
    m_axi_z_colind_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_colind_RLAST : IN STD_LOGIC;
    m_axi_z_colind_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_BVALID : IN STD_LOGIC;
    m_axi_z_colind_BREADY : OUT STD_LOGIC;
    m_axi_z_colind_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_colind_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_AWVALID : OUT STD_LOGIC;
    m_axi_z_data_AWREADY : IN STD_LOGIC;
    m_axi_z_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_WVALID : OUT STD_LOGIC;
    m_axi_z_data_WREADY : IN STD_LOGIC;
    m_axi_z_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_WLAST : OUT STD_LOGIC;
    m_axi_z_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_ARVALID : OUT STD_LOGIC;
    m_axi_z_data_ARREADY : IN STD_LOGIC;
    m_axi_z_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_z_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_RVALID : IN STD_LOGIC;
    m_axi_z_data_RREADY : OUT STD_LOGIC;
    m_axi_z_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_z_data_RLAST : IN STD_LOGIC;
    m_axi_z_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_BVALID : IN STD_LOGIC;
    m_axi_z_data_BREADY : OUT STD_LOGIC;
    m_axi_z_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_z_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    csr2_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_rowptr_ce0 : OUT STD_LOGIC;
    csr2_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    csr2_rowptr_ce1 : OUT STD_LOGIC;
    csr2_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    csr2_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_colind_ce0 : OUT STD_LOGIC;
    csr2_colind_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    csr2_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    csr2_data_ce0 : OUT STD_LOGIC;
    csr2_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_csr_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_csr_rowptr_ce0 : OUT STD_LOGIC;
    out_csr_rowptr_we0 : OUT STD_LOGIC;
    out_csr_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_csr_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_csr_colind_ce0 : OUT STD_LOGIC;
    out_csr_colind_we0 : OUT STD_LOGIC;
    out_csr_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_csr_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_csr_data_ce0 : OUT STD_LOGIC;
    out_csr_data_we0 : OUT STD_LOGIC;
    out_csr_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of outer_product_accumulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal z_rowptr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln262_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal z_colind_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal z_colind_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln202_1_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_data_blk_n_AR : STD_LOGIC;
    signal z_data_blk_n_R : STD_LOGIC;
    signal i_12_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_14_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal nnz_1_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_09_reg_344 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln262_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln198_fu_380_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln198_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal start_idx_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_idx_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln262_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln262_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln198_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_reg_596 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln202_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln202_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln202_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln202_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln202_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln202_1_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln202_1_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln202_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter1 : BOOLEAN;
    signal colind1_full_n : STD_LOGIC;
    signal colind1_write : STD_LOGIC;
    signal icmp_ln202_1_reg_633_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_full_n : STD_LOGIC;
    signal data1_write : STD_LOGIC;
    signal ap_block_state22_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln202_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal z_colind_addr_read_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_data_addr_read_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sext_ln202_2_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sext_ln202_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln202_3_reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln202_2_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_2_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal colind2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal colind2_full_n : STD_LOGIC;
    signal colind2_write : STD_LOGIC;
    signal data2_full_n : STD_LOGIC;
    signal data2_write : STD_LOGIC;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln202_1_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal nnz_load_1_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_mergeRows_fu_355_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal merge_data_size_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln287_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln287_fu_477_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_480_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal merged_colind_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal merged_colind_empty_n : STD_LOGIC;
    signal merged_colind_read : STD_LOGIC;
    signal icmp_ln287_1_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal merged_data_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal merged_data_empty_n : STD_LOGIC;
    signal merged_data_read : STD_LOGIC;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln287_1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln294_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state20 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal grp_mergeRows_fu_355_ap_ready : STD_LOGIC;
    signal grp_mergeRows_fu_355_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal grp_mergeRows_fu_355_ap_start : STD_LOGIC;
    signal grp_mergeRows_fu_355_ap_idle : STD_LOGIC;
    signal grp_mergeRows_fu_355_colind1_read : STD_LOGIC;
    signal grp_mergeRows_fu_355_colind2_read : STD_LOGIC;
    signal grp_mergeRows_fu_355_data1_read : STD_LOGIC;
    signal grp_mergeRows_fu_355_data2_read : STD_LOGIC;
    signal grp_mergeRows_fu_355_merged_colind_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mergeRows_fu_355_merged_colind_write : STD_LOGIC;
    signal grp_mergeRows_fu_355_merged_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mergeRows_fu_355_merged_data_write : STD_LOGIC;
    signal i_15_reg_302 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_mergeRows_fu_355_ap_start_reg : STD_LOGIC := '0';
    signal colind1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal colind1_empty_n : STD_LOGIC;
    signal colind1_read : STD_LOGIC;
    signal colind2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal colind2_empty_n : STD_LOGIC;
    signal colind2_read : STD_LOGIC;
    signal data1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_empty_n : STD_LOGIC;
    signal data1_read : STD_LOGIC;
    signal data2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_empty_n : STD_LOGIC;
    signal data2_read : STD_LOGIC;
    signal merged_colind_full_n : STD_LOGIC;
    signal merged_colind_write : STD_LOGIC;
    signal merged_data_full_n : STD_LOGIC;
    signal merged_data_write : STD_LOGIC;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal nnz_1_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln197_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal nnz_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln262_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal trunc_ln197_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_09_cast_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component outer_product_mergeRows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        colind1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        colind1_empty_n : IN STD_LOGIC;
        colind1_read : OUT STD_LOGIC;
        colind2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        colind2_empty_n : IN STD_LOGIC;
        colind2_read : OUT STD_LOGIC;
        data1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data1_empty_n : IN STD_LOGIC;
        data1_read : OUT STD_LOGIC;
        data2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data2_empty_n : IN STD_LOGIC;
        data2_read : OUT STD_LOGIC;
        merged_colind_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        merged_colind_full_n : IN STD_LOGIC;
        merged_colind_write : OUT STD_LOGIC;
        merged_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        merged_data_full_n : IN STD_LOGIC;
        merged_data_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_mergeRows_fu_355 : component outer_product_mergeRows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mergeRows_fu_355_ap_start,
        ap_done => grp_mergeRows_fu_355_ap_done,
        ap_idle => grp_mergeRows_fu_355_ap_idle,
        ap_ready => grp_mergeRows_fu_355_ap_ready,
        colind1_dout => colind1_dout,
        colind1_empty_n => colind1_empty_n,
        colind1_read => grp_mergeRows_fu_355_colind1_read,
        colind2_dout => colind2_dout,
        colind2_empty_n => colind2_empty_n,
        colind2_read => grp_mergeRows_fu_355_colind2_read,
        data1_dout => data1_dout,
        data1_empty_n => data1_empty_n,
        data1_read => grp_mergeRows_fu_355_data1_read,
        data2_dout => data2_dout,
        data2_empty_n => data2_empty_n,
        data2_read => grp_mergeRows_fu_355_data2_read,
        merged_colind_din => grp_mergeRows_fu_355_merged_colind_din,
        merged_colind_full_n => merged_colind_full_n,
        merged_colind_write => grp_mergeRows_fu_355_merged_colind_write,
        merged_data_din => grp_mergeRows_fu_355_merged_data_din,
        merged_data_full_n => merged_data_full_n,
        merged_data_write => grp_mergeRows_fu_355_merged_data_write,
        ap_return => grp_mergeRows_fu_355_ap_return);

    colind1_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => z_colind_addr_read_reg_642,
        if_full_n => colind1_full_n,
        if_write => colind1_write,
        if_dout => colind1_dout,
        if_empty_n => colind1_empty_n,
        if_read => colind1_read);

    colind2_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colind2_din,
        if_full_n => colind2_full_n,
        if_write => colind2_write,
        if_dout => colind2_dout,
        if_empty_n => colind2_empty_n,
        if_read => colind2_read);

    data1_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => z_data_addr_read_reg_647,
        if_full_n => data1_full_n,
        if_write => data1_write,
        if_dout => data1_dout,
        if_empty_n => data1_empty_n,
        if_read => data1_read);

    data2_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => csr2_data_q0,
        if_full_n => data2_full_n,
        if_write => data2_write,
        if_dout => data2_dout,
        if_empty_n => data2_empty_n,
        if_read => data2_read);

    merged_colind_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_mergeRows_fu_355_merged_colind_din,
        if_full_n => merged_colind_full_n,
        if_write => merged_colind_write,
        if_dout => merged_colind_dout,
        if_empty_n => merged_colind_empty_n,
        if_read => merged_colind_read);

    merged_data_fifo_U : component outer_product_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_mergeRows_fu_355_merged_data_din,
        if_full_n => merged_data_full_n,
        if_write => merged_data_write,
        if_dout => merged_data_dout,
        if_empty_n => merged_data_empty_n,
        if_read => merged_data_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state20)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state29);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mergeRows_fu_355_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mergeRows_fu_355_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_mergeRows_fu_355_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mergeRows_fu_355_ap_ready = ap_const_logic_1)) then 
                    grp_mergeRows_fu_355_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_12_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_12_reg_314 <= sext_ln202_reg_611;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln202_1_fu_436_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_12_reg_314 <= add_ln202_fu_441_p2;
            end if; 
        end if;
    end process;

    i_14_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_14_reg_323 <= sext_ln202_2_fu_447_p1;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln202_2_fu_455_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_14_reg_323 <= add_ln202_1_fu_460_p2;
            end if; 
        end if;
    end process;

    i_15_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_15_reg_302 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_15_reg_302 <= add_ln198_reg_564;
            end if; 
        end if;
    end process;

    j_09_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                j_09_reg_344 <= ap_const_lv31_0;
            elsif (((icmp_ln287_1_fu_490_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_09_reg_344 <= j_fu_480_p2;
            end if; 
        end if;
    end process;

    nnz_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                nnz_1_reg_334 <= trunc_ln287_fu_477_p1;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln287_1_reg_716 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                nnz_1_reg_334 <= add_ln294_fu_501_p2;
            end if; 
        end if;
    end process;

    nnz_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nnz_fu_104 <= ap_const_lv32_0;
            elsif (((icmp_ln287_reg_702 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                nnz_fu_104 <= add_ln262_fu_507_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln198_reg_564 <= add_ln198_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                end_idx_reg_583 <= m_axi_z_rowptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln202_1_reg_633 <= icmp_ln202_1_fu_436_p2;
                icmp_ln202_1_reg_633_pp0_iter1_reg <= icmp_ln202_1_reg_633;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln202_2_reg_672 <= icmp_ln202_2_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln262_reg_560 <= icmp_ln262_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln287_1_reg_716 <= icmp_ln287_1_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_ln287_reg_702 <= icmp_ln287_fu_471_p2;
                merge_data_size_reg_696 <= grp_mergeRows_fu_355_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                nnz_load_1_reg_691 <= nnz_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sext_ln202_1_reg_628 <= sext_ln202_1_fu_433_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                sext_ln202_3_reg_667 <= sext_ln202_3_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sext_ln202_reg_611 <= sext_ln202_fu_416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                start_idx_reg_576 <= m_axi_z_rowptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                sub_ln202_reg_605 <= sub_ln202_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_colind_addr_read_reg_642 <= m_axi_z_colind_RDATA;
                z_data_addr_read_reg_647 <= m_axi_z_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    zext_ln198_reg_596(2 downto 0) <= zext_ln198_fu_405_p1(2 downto 0);
                    zext_ln262_reg_590(2 downto 0) <= zext_ln262_fu_401_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln262_reg_590(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln198_reg_596(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_z_rowptr_RVALID, ap_CS_fsm_state3, icmp_ln262_reg_560, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, icmp_ln202_fu_408_p2, icmp_ln202_1_fu_436_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln202_2_fu_455_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state28, icmp_ln287_fu_471_p2, ap_enable_reg_pp2_iter0, icmp_ln287_1_fu_490_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, grp_mergeRows_fu_355_ap_done, ap_block_pp2_stage0_subdone, ap_block_state3_io, ap_block_state13_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_z_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_z_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln202_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln202_1_fu_436_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln202_1_fu_436_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln202_2_fu_455_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln202_2_fu_455_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((grp_mergeRows_fu_355_ap_done = ap_const_logic_1) and (icmp_ln287_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln287_1_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln287_1_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln198_fu_380_p2 <= std_logic_vector(unsigned(i_15_reg_302) + unsigned(ap_const_lv3_1));
    add_ln202_1_fu_460_p2 <= std_logic_vector(unsigned(i_14_reg_323) + unsigned(ap_const_lv64_1));
    add_ln202_fu_441_p2 <= std_logic_vector(unsigned(i_12_reg_314) + unsigned(ap_const_lv64_1));
    add_ln262_fu_507_p2 <= std_logic_vector(unsigned(merge_data_size_reg_696) + unsigned(nnz_fu_104));
    add_ln294_fu_501_p2 <= std_logic_vector(unsigned(nnz_1_reg_334) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_z_colind_RVALID, m_axi_z_data_RVALID, ap_enable_reg_pp0_iter1, icmp_ln202_1_reg_633, colind1_full_n, icmp_ln202_1_reg_633_pp0_iter1_reg, data1_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((data1_full_n = ap_const_logic_0) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (colind1_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_data_RVALID = ap_const_logic_0)) or ((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_colind_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_z_colind_RVALID, m_axi_z_data_RVALID, ap_enable_reg_pp0_iter1, icmp_ln202_1_reg_633, colind1_full_n, icmp_ln202_1_reg_633_pp0_iter1_reg, data1_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((data1_full_n = ap_const_logic_0) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (colind1_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_data_RVALID = ap_const_logic_0)) or ((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_colind_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_z_colind_RVALID, m_axi_z_data_RVALID, ap_enable_reg_pp0_iter1, icmp_ln202_1_reg_633, colind1_full_n, icmp_ln202_1_reg_633_pp0_iter1_reg, data1_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((data1_full_n = ap_const_logic_0) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (colind1_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_data_RVALID = ap_const_logic_0)) or ((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_colind_RVALID = ap_const_logic_0)))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(icmp_ln202_2_reg_672, colind2_full_n, data2_full_n, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((data2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1)) or ((colind2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(icmp_ln202_2_reg_672, colind2_full_n, data2_full_n, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((data2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1)) or ((colind2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(icmp_ln202_2_reg_672, colind2_full_n, data2_full_n, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((data2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1)) or ((colind2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1))));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(merged_colind_empty_n, icmp_ln287_1_reg_716, merged_data_empty_n, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((merged_data_empty_n = ap_const_logic_0) and (icmp_ln287_1_reg_716 = ap_const_lv1_0)) or ((icmp_ln287_1_reg_716 = ap_const_lv1_0) and (merged_colind_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(merged_colind_empty_n, icmp_ln287_1_reg_716, merged_data_empty_n, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((merged_data_empty_n = ap_const_logic_0) and (icmp_ln287_1_reg_716 = ap_const_lv1_0)) or ((icmp_ln287_1_reg_716 = ap_const_lv1_0) and (merged_colind_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state13_io_assign_proc : process(m_axi_z_colind_ARREADY, m_axi_z_data_ARREADY)
    begin
                ap_block_state13_io <= ((m_axi_z_data_ARREADY = ap_const_logic_0) or (m_axi_z_colind_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state20_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter1_assign_proc : process(m_axi_z_colind_RVALID, m_axi_z_data_RVALID, icmp_ln202_1_reg_633)
    begin
                ap_block_state21_pp0_stage0_iter1 <= (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_data_RVALID = ap_const_logic_0)) or ((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (m_axi_z_colind_RVALID = ap_const_logic_0)));
    end process;


    ap_block_state22_pp0_stage0_iter2_assign_proc : process(colind1_full_n, icmp_ln202_1_reg_633_pp0_iter1_reg, data1_full_n)
    begin
                ap_block_state22_pp0_stage0_iter2 <= (((data1_full_n = ap_const_logic_0) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (colind1_full_n = ap_const_logic_0)));
    end process;

        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter1_assign_proc : process(icmp_ln202_2_reg_672, colind2_full_n, data2_full_n)
    begin
                ap_block_state26_pp1_stage0_iter1 <= (((data2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1)) or ((colind2_full_n = ap_const_logic_0) and (icmp_ln202_2_reg_672 = ap_const_lv1_1)));
    end process;

        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp2_stage0_iter1_assign_proc : process(merged_colind_empty_n, icmp_ln287_1_reg_716, merged_data_empty_n)
    begin
                ap_block_state30_pp2_stage0_iter1 <= (((merged_data_empty_n = ap_const_logic_0) and (icmp_ln287_1_reg_716 = ap_const_lv1_0)) or ((icmp_ln287_1_reg_716 = ap_const_lv1_0) and (merged_colind_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_z_rowptr_ARREADY, icmp_ln262_reg_560)
    begin
                ap_block_state3_io <= ((m_axi_z_rowptr_ARREADY = ap_const_logic_0) and (icmp_ln262_reg_560 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state20_assign_proc : process(icmp_ln202_1_fu_436_p2)
    begin
        if ((icmp_ln202_1_fu_436_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(icmp_ln202_2_fu_455_p2)
    begin
        if ((icmp_ln202_2_fu_455_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(icmp_ln287_1_fu_490_p2)
    begin
        if ((icmp_ln287_1_fu_490_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln262_reg_560, ap_block_state3_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln262_reg_560, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    colind1_read_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_colind1_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            colind1_read <= grp_mergeRows_fu_355_colind1_read;
        else 
            colind1_read <= ap_const_logic_0;
        end if; 
    end process;


    colind1_write_assign_proc : process(icmp_ln202_1_reg_633_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            colind1_write <= ap_const_logic_1;
        else 
            colind1_write <= ap_const_logic_0;
        end if; 
    end process;

    colind2_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(csr2_colind_q0),32));

    colind2_read_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_colind2_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            colind2_read <= grp_mergeRows_fu_355_colind2_read;
        else 
            colind2_read <= ap_const_logic_0;
        end if; 
    end process;


    colind2_write_assign_proc : process(icmp_ln202_2_reg_672, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln202_2_reg_672 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            colind2_write <= ap_const_logic_1;
        else 
            colind2_write <= ap_const_logic_0;
        end if; 
    end process;

    csr2_colind_address0 <= i_14_reg_323(5 - 1 downto 0);

    csr2_colind_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            csr2_colind_ce0 <= ap_const_logic_1;
        else 
            csr2_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    csr2_data_address0 <= i_14_reg_323(5 - 1 downto 0);

    csr2_data_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            csr2_data_ce0 <= ap_const_logic_1;
        else 
            csr2_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    csr2_rowptr_address0 <= zext_ln198_reg_596(3 - 1 downto 0);
    csr2_rowptr_address1 <= zext_ln262_reg_590(3 - 1 downto 0);

    csr2_rowptr_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            csr2_rowptr_ce0 <= ap_const_logic_1;
        else 
            csr2_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    csr2_rowptr_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            csr2_rowptr_ce1 <= ap_const_logic_1;
        else 
            csr2_rowptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data1_read_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_data1_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data1_read <= grp_mergeRows_fu_355_data1_read;
        else 
            data1_read <= ap_const_logic_0;
        end if; 
    end process;


    data1_write_assign_proc : process(icmp_ln202_1_reg_633_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln202_1_reg_633_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data1_write <= ap_const_logic_1;
        else 
            data1_write <= ap_const_logic_0;
        end if; 
    end process;


    data2_read_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_data2_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data2_read <= grp_mergeRows_fu_355_data2_read;
        else 
            data2_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_write_assign_proc : process(icmp_ln202_2_reg_672, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln202_2_reg_672 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data2_write <= ap_const_logic_1;
        else 
            data2_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_mergeRows_fu_355_ap_start <= grp_mergeRows_fu_355_ap_start_reg;
    icmp_ln202_1_fu_436_p2 <= "1" when (i_12_reg_314 = sext_ln202_1_reg_628) else "0";
    icmp_ln202_2_fu_455_p2 <= "1" when (signed(i_14_reg_323) < signed(sext_ln202_3_reg_667)) else "0";
    icmp_ln202_fu_408_p2 <= "1" when (signed(start_idx_reg_576) < signed(end_idx_reg_583)) else "0";
    icmp_ln262_fu_374_p2 <= "1" when (i_15_reg_302 = ap_const_lv3_4) else "0";
    icmp_ln287_1_fu_490_p2 <= "1" when (j_09_cast_fu_486_p1 = merge_data_size_reg_696) else "0";
    icmp_ln287_fu_471_p2 <= "1" when (signed(grp_mergeRows_fu_355_ap_return) > signed(ap_const_lv32_0)) else "0";
    j_09_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_09_reg_344),32));
    j_fu_480_p2 <= std_logic_vector(unsigned(j_09_reg_344) + unsigned(ap_const_lv31_1));
    m_axi_z_colind_ARADDR <= sext_ln202_fu_416_p1;
    m_axi_z_colind_ARBURST <= ap_const_lv2_0;
    m_axi_z_colind_ARCACHE <= ap_const_lv4_0;
    m_axi_z_colind_ARID <= ap_const_lv1_0;
    m_axi_z_colind_ARLEN <= sub_ln202_reg_605;
    m_axi_z_colind_ARLOCK <= ap_const_lv2_0;
    m_axi_z_colind_ARPROT <= ap_const_lv3_0;
    m_axi_z_colind_ARQOS <= ap_const_lv4_0;
    m_axi_z_colind_ARREGION <= ap_const_lv4_0;
    m_axi_z_colind_ARSIZE <= ap_const_lv3_0;
    m_axi_z_colind_ARUSER <= ap_const_lv1_0;

    m_axi_z_colind_ARVALID_assign_proc : process(ap_CS_fsm_state13, ap_block_state13_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_z_colind_ARVALID <= ap_const_logic_1;
        else 
            m_axi_z_colind_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_colind_AWADDR <= ap_const_lv64_0;
    m_axi_z_colind_AWBURST <= ap_const_lv2_0;
    m_axi_z_colind_AWCACHE <= ap_const_lv4_0;
    m_axi_z_colind_AWID <= ap_const_lv1_0;
    m_axi_z_colind_AWLEN <= ap_const_lv32_0;
    m_axi_z_colind_AWLOCK <= ap_const_lv2_0;
    m_axi_z_colind_AWPROT <= ap_const_lv3_0;
    m_axi_z_colind_AWQOS <= ap_const_lv4_0;
    m_axi_z_colind_AWREGION <= ap_const_lv4_0;
    m_axi_z_colind_AWSIZE <= ap_const_lv3_0;
    m_axi_z_colind_AWUSER <= ap_const_lv1_0;
    m_axi_z_colind_AWVALID <= ap_const_logic_0;
    m_axi_z_colind_BREADY <= ap_const_logic_0;

    m_axi_z_colind_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln202_1_reg_633, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_z_colind_RREADY <= ap_const_logic_1;
        else 
            m_axi_z_colind_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_colind_WDATA <= ap_const_lv32_0;
    m_axi_z_colind_WID <= ap_const_lv1_0;
    m_axi_z_colind_WLAST <= ap_const_logic_0;
    m_axi_z_colind_WSTRB <= ap_const_lv4_0;
    m_axi_z_colind_WUSER <= ap_const_lv1_0;
    m_axi_z_colind_WVALID <= ap_const_logic_0;
    m_axi_z_data_ARADDR <= sext_ln202_fu_416_p1;
    m_axi_z_data_ARBURST <= ap_const_lv2_0;
    m_axi_z_data_ARCACHE <= ap_const_lv4_0;
    m_axi_z_data_ARID <= ap_const_lv1_0;
    m_axi_z_data_ARLEN <= sub_ln202_reg_605;
    m_axi_z_data_ARLOCK <= ap_const_lv2_0;
    m_axi_z_data_ARPROT <= ap_const_lv3_0;
    m_axi_z_data_ARQOS <= ap_const_lv4_0;
    m_axi_z_data_ARREGION <= ap_const_lv4_0;
    m_axi_z_data_ARSIZE <= ap_const_lv3_0;
    m_axi_z_data_ARUSER <= ap_const_lv1_0;

    m_axi_z_data_ARVALID_assign_proc : process(ap_CS_fsm_state13, ap_block_state13_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_z_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_z_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_data_AWADDR <= ap_const_lv64_0;
    m_axi_z_data_AWBURST <= ap_const_lv2_0;
    m_axi_z_data_AWCACHE <= ap_const_lv4_0;
    m_axi_z_data_AWID <= ap_const_lv1_0;
    m_axi_z_data_AWLEN <= ap_const_lv32_0;
    m_axi_z_data_AWLOCK <= ap_const_lv2_0;
    m_axi_z_data_AWPROT <= ap_const_lv3_0;
    m_axi_z_data_AWQOS <= ap_const_lv4_0;
    m_axi_z_data_AWREGION <= ap_const_lv4_0;
    m_axi_z_data_AWSIZE <= ap_const_lv3_0;
    m_axi_z_data_AWUSER <= ap_const_lv1_0;
    m_axi_z_data_AWVALID <= ap_const_logic_0;
    m_axi_z_data_BREADY <= ap_const_logic_0;

    m_axi_z_data_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln202_1_reg_633, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_z_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_z_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_data_WDATA <= ap_const_lv32_0;
    m_axi_z_data_WID <= ap_const_lv1_0;
    m_axi_z_data_WLAST <= ap_const_logic_0;
    m_axi_z_data_WSTRB <= ap_const_lv4_0;
    m_axi_z_data_WUSER <= ap_const_lv1_0;
    m_axi_z_data_WVALID <= ap_const_logic_0;
    m_axi_z_rowptr_ARADDR <= zext_ln197_fu_390_p1;
    m_axi_z_rowptr_ARBURST <= ap_const_lv2_0;
    m_axi_z_rowptr_ARCACHE <= ap_const_lv4_0;
    m_axi_z_rowptr_ARID <= ap_const_lv1_0;
    m_axi_z_rowptr_ARLEN <= ap_const_lv32_2;
    m_axi_z_rowptr_ARLOCK <= ap_const_lv2_0;
    m_axi_z_rowptr_ARPROT <= ap_const_lv3_0;
    m_axi_z_rowptr_ARQOS <= ap_const_lv4_0;
    m_axi_z_rowptr_ARREGION <= ap_const_lv4_0;
    m_axi_z_rowptr_ARSIZE <= ap_const_lv3_0;
    m_axi_z_rowptr_ARUSER <= ap_const_lv1_0;

    m_axi_z_rowptr_ARVALID_assign_proc : process(ap_CS_fsm_state3, icmp_ln262_reg_560, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_z_rowptr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_z_rowptr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_rowptr_AWADDR <= ap_const_lv64_0;
    m_axi_z_rowptr_AWBURST <= ap_const_lv2_0;
    m_axi_z_rowptr_AWCACHE <= ap_const_lv4_0;
    m_axi_z_rowptr_AWID <= ap_const_lv1_0;
    m_axi_z_rowptr_AWLEN <= ap_const_lv32_0;
    m_axi_z_rowptr_AWLOCK <= ap_const_lv2_0;
    m_axi_z_rowptr_AWPROT <= ap_const_lv3_0;
    m_axi_z_rowptr_AWQOS <= ap_const_lv4_0;
    m_axi_z_rowptr_AWREGION <= ap_const_lv4_0;
    m_axi_z_rowptr_AWSIZE <= ap_const_lv3_0;
    m_axi_z_rowptr_AWUSER <= ap_const_lv1_0;
    m_axi_z_rowptr_AWVALID <= ap_const_logic_0;
    m_axi_z_rowptr_BREADY <= ap_const_logic_0;

    m_axi_z_rowptr_RREADY_assign_proc : process(m_axi_z_rowptr_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((((m_axi_z_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_z_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_z_rowptr_RREADY <= ap_const_logic_1;
        else 
            m_axi_z_rowptr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_z_rowptr_WDATA <= ap_const_lv32_0;
    m_axi_z_rowptr_WID <= ap_const_lv1_0;
    m_axi_z_rowptr_WLAST <= ap_const_logic_0;
    m_axi_z_rowptr_WSTRB <= ap_const_lv4_0;
    m_axi_z_rowptr_WUSER <= ap_const_lv1_0;
    m_axi_z_rowptr_WVALID <= ap_const_logic_0;

    merged_colind_read_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln287_1_reg_716, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln287_1_reg_716 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            merged_colind_read <= ap_const_logic_1;
        else 
            merged_colind_read <= ap_const_logic_0;
        end if; 
    end process;


    merged_colind_write_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_merged_colind_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            merged_colind_write <= grp_mergeRows_fu_355_merged_colind_write;
        else 
            merged_colind_write <= ap_const_logic_0;
        end if; 
    end process;


    merged_data_read_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln287_1_reg_716, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln287_1_reg_716 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            merged_data_read <= ap_const_logic_1;
        else 
            merged_data_read <= ap_const_logic_0;
        end if; 
    end process;


    merged_data_write_assign_proc : process(ap_CS_fsm_state28, grp_mergeRows_fu_355_merged_data_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            merged_data_write <= grp_mergeRows_fu_355_merged_data_write;
        else 
            merged_data_write <= ap_const_logic_0;
        end if; 
    end process;

    nnz_1_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nnz_1_reg_334),64));
    out_csr_colind_address0 <= nnz_1_cast_fu_495_p1(5 - 1 downto 0);

    out_csr_colind_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_csr_colind_ce0 <= ap_const_logic_1;
        else 
            out_csr_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_csr_colind_d0 <= merged_colind_dout;

    out_csr_colind_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln287_1_reg_716, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln287_1_reg_716 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_csr_colind_we0 <= ap_const_logic_1;
        else 
            out_csr_colind_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_csr_data_address0 <= nnz_1_cast_fu_495_p1(5 - 1 downto 0);

    out_csr_data_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_csr_data_ce0 <= ap_const_logic_1;
        else 
            out_csr_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_csr_data_d0 <= merged_data_dout;

    out_csr_data_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln287_1_reg_716, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln287_1_reg_716 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            out_csr_data_we0 <= ap_const_logic_1;
        else 
            out_csr_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_csr_rowptr_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln262_reg_590, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            out_csr_rowptr_address0 <= zext_ln262_reg_590(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_csr_rowptr_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            out_csr_rowptr_address0 <= "XXX";
        end if; 
    end process;


    out_csr_rowptr_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state27, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_csr_rowptr_ce0 <= ap_const_logic_1;
        else 
            out_csr_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_csr_rowptr_d0 <= nnz_fu_104;

    out_csr_rowptr_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln262_reg_560, ap_CS_fsm_state27, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln262_reg_560 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_csr_rowptr_we0 <= ap_const_logic_1;
        else 
            out_csr_rowptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln202_1_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(end_idx_reg_583),64));

        sext_ln202_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(csr2_rowptr_q1),64));

        sext_ln202_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(csr2_rowptr_q0),64));

        sext_ln202_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start_idx_reg_576),64));

    sub_ln202_fu_412_p2 <= std_logic_vector(signed(end_idx_reg_583) - signed(start_idx_reg_576));
    trunc_ln197_fu_386_p1 <= i_15_reg_302(2 - 1 downto 0);
    trunc_ln287_fu_477_p1 <= nnz_load_1_reg_691(5 - 1 downto 0);

    z_colind_blk_n_AR_assign_proc : process(m_axi_z_colind_ARREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z_colind_blk_n_AR <= m_axi_z_colind_ARREADY;
        else 
            z_colind_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    z_colind_blk_n_R_assign_proc : process(m_axi_z_colind_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln202_1_reg_633)
    begin
        if (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z_colind_blk_n_R <= m_axi_z_colind_RVALID;
        else 
            z_colind_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    z_data_blk_n_AR_assign_proc : process(m_axi_z_data_ARREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            z_data_blk_n_AR <= m_axi_z_data_ARREADY;
        else 
            z_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    z_data_blk_n_R_assign_proc : process(m_axi_z_data_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln202_1_reg_633)
    begin
        if (((icmp_ln202_1_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z_data_blk_n_R <= m_axi_z_data_RVALID;
        else 
            z_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    z_rowptr_blk_n_AR_assign_proc : process(m_axi_z_rowptr_ARREADY, ap_CS_fsm_state3, icmp_ln262_reg_560)
    begin
        if (((icmp_ln262_reg_560 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            z_rowptr_blk_n_AR <= m_axi_z_rowptr_ARREADY;
        else 
            z_rowptr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    z_rowptr_blk_n_R_assign_proc : process(m_axi_z_rowptr_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            z_rowptr_blk_n_R <= m_axi_z_rowptr_RVALID;
        else 
            z_rowptr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln197_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln197_fu_386_p1),64));
    zext_ln198_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln198_reg_564),64));
    zext_ln262_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_reg_302),64));
end behav;
