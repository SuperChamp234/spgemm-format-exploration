-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity outer_product is
generic (
    C_M_AXI_X_ROWPTR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_X_ROWPTR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_X_ROWPTR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_ROWPTR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_X_ROWPTR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_ROWPTR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_ROWPTR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_ROWPTR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_X_COLIND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_X_COLIND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_COLIND_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_X_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_X_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_X_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Y_COLPTR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Y_COLPTR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_COLPTR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Y_ROWIND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Y_ROWIND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_ROWIND_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Y_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Y_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Y_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Z_ROWPTR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Z_ROWPTR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_ROWPTR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Z_COLIND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Z_COLIND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_COLIND_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_Z_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_Z_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_Z_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_X_ROWPTR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_X_ROWPTR_USER_VALUE : INTEGER := 0;
    C_M_AXI_X_ROWPTR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_X_ROWPTR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_X_COLIND_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_X_COLIND_USER_VALUE : INTEGER := 0;
    C_M_AXI_X_COLIND_PROT_VALUE : INTEGER := 0;
    C_M_AXI_X_COLIND_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_X_DATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_X_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_X_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_X_DATA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Y_COLPTR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Y_COLPTR_USER_VALUE : INTEGER := 0;
    C_M_AXI_Y_COLPTR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Y_COLPTR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Y_ROWIND_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Y_ROWIND_USER_VALUE : INTEGER := 0;
    C_M_AXI_Y_ROWIND_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Y_ROWIND_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Y_DATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Y_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_Y_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Y_DATA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Z_ROWPTR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Z_ROWPTR_USER_VALUE : INTEGER := 0;
    C_M_AXI_Z_ROWPTR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Z_ROWPTR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Z_COLIND_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Z_COLIND_USER_VALUE : INTEGER := 0;
    C_M_AXI_Z_COLIND_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Z_COLIND_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_Z_DATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_Z_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_Z_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_Z_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_x_rowptr_AWVALID : OUT STD_LOGIC;
    m_axi_x_rowptr_AWREADY : IN STD_LOGIC;
    m_axi_x_rowptr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ADDR_WIDTH-1 downto 0);
    m_axi_x_rowptr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_x_rowptr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_rowptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_rowptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_rowptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_AWUSER_WIDTH-1 downto 0);
    m_axi_x_rowptr_WVALID : OUT STD_LOGIC;
    m_axi_x_rowptr_WREADY : IN STD_LOGIC;
    m_axi_x_rowptr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_DATA_WIDTH-1 downto 0);
    m_axi_x_rowptr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_DATA_WIDTH/8-1 downto 0);
    m_axi_x_rowptr_WLAST : OUT STD_LOGIC;
    m_axi_x_rowptr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_x_rowptr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_WUSER_WIDTH-1 downto 0);
    m_axi_x_rowptr_ARVALID : OUT STD_LOGIC;
    m_axi_x_rowptr_ARREADY : IN STD_LOGIC;
    m_axi_x_rowptr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ADDR_WIDTH-1 downto 0);
    m_axi_x_rowptr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_x_rowptr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_rowptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_rowptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_rowptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_rowptr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ARUSER_WIDTH-1 downto 0);
    m_axi_x_rowptr_RVALID : IN STD_LOGIC;
    m_axi_x_rowptr_RREADY : OUT STD_LOGIC;
    m_axi_x_rowptr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_DATA_WIDTH-1 downto 0);
    m_axi_x_rowptr_RLAST : IN STD_LOGIC;
    m_axi_x_rowptr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_x_rowptr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_RUSER_WIDTH-1 downto 0);
    m_axi_x_rowptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_BVALID : IN STD_LOGIC;
    m_axi_x_rowptr_BREADY : OUT STD_LOGIC;
    m_axi_x_rowptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_rowptr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_x_rowptr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_ROWPTR_BUSER_WIDTH-1 downto 0);
    m_axi_x_colind_AWVALID : OUT STD_LOGIC;
    m_axi_x_colind_AWREADY : IN STD_LOGIC;
    m_axi_x_colind_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ADDR_WIDTH-1 downto 0);
    m_axi_x_colind_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ID_WIDTH-1 downto 0);
    m_axi_x_colind_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_colind_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_colind_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_colind_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_AWUSER_WIDTH-1 downto 0);
    m_axi_x_colind_WVALID : OUT STD_LOGIC;
    m_axi_x_colind_WREADY : IN STD_LOGIC;
    m_axi_x_colind_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_DATA_WIDTH-1 downto 0);
    m_axi_x_colind_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_DATA_WIDTH/8-1 downto 0);
    m_axi_x_colind_WLAST : OUT STD_LOGIC;
    m_axi_x_colind_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ID_WIDTH-1 downto 0);
    m_axi_x_colind_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_WUSER_WIDTH-1 downto 0);
    m_axi_x_colind_ARVALID : OUT STD_LOGIC;
    m_axi_x_colind_ARREADY : IN STD_LOGIC;
    m_axi_x_colind_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ADDR_WIDTH-1 downto 0);
    m_axi_x_colind_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ID_WIDTH-1 downto 0);
    m_axi_x_colind_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_colind_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_colind_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_colind_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_colind_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ARUSER_WIDTH-1 downto 0);
    m_axi_x_colind_RVALID : IN STD_LOGIC;
    m_axi_x_colind_RREADY : OUT STD_LOGIC;
    m_axi_x_colind_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_DATA_WIDTH-1 downto 0);
    m_axi_x_colind_RLAST : IN STD_LOGIC;
    m_axi_x_colind_RID : IN STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ID_WIDTH-1 downto 0);
    m_axi_x_colind_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_RUSER_WIDTH-1 downto 0);
    m_axi_x_colind_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_BVALID : IN STD_LOGIC;
    m_axi_x_colind_BREADY : OUT STD_LOGIC;
    m_axi_x_colind_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_colind_BID : IN STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_ID_WIDTH-1 downto 0);
    m_axi_x_colind_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_COLIND_BUSER_WIDTH-1 downto 0);
    m_axi_x_data_AWVALID : OUT STD_LOGIC;
    m_axi_x_data_AWREADY : IN STD_LOGIC;
    m_axi_x_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_x_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ID_WIDTH-1 downto 0);
    m_axi_x_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_x_data_WVALID : OUT STD_LOGIC;
    m_axi_x_data_WREADY : IN STD_LOGIC;
    m_axi_x_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_DATA_WIDTH-1 downto 0);
    m_axi_x_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_x_data_WLAST : OUT STD_LOGIC;
    m_axi_x_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ID_WIDTH-1 downto 0);
    m_axi_x_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_x_data_ARVALID : OUT STD_LOGIC;
    m_axi_x_data_ARREADY : IN STD_LOGIC;
    m_axi_x_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_x_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ID_WIDTH-1 downto 0);
    m_axi_x_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_x_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_x_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_x_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_x_data_RVALID : IN STD_LOGIC;
    m_axi_x_data_RREADY : OUT STD_LOGIC;
    m_axi_x_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_X_DATA_DATA_WIDTH-1 downto 0);
    m_axi_x_data_RLAST : IN STD_LOGIC;
    m_axi_x_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ID_WIDTH-1 downto 0);
    m_axi_x_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_x_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_BVALID : IN STD_LOGIC;
    m_axi_x_data_BREADY : OUT STD_LOGIC;
    m_axi_x_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_x_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_X_DATA_ID_WIDTH-1 downto 0);
    m_axi_x_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_X_DATA_BUSER_WIDTH-1 downto 0);
    m_axi_y_colptr_AWVALID : OUT STD_LOGIC;
    m_axi_y_colptr_AWREADY : IN STD_LOGIC;
    m_axi_y_colptr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ADDR_WIDTH-1 downto 0);
    m_axi_y_colptr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ID_WIDTH-1 downto 0);
    m_axi_y_colptr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_colptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_colptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_colptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_AWUSER_WIDTH-1 downto 0);
    m_axi_y_colptr_WVALID : OUT STD_LOGIC;
    m_axi_y_colptr_WREADY : IN STD_LOGIC;
    m_axi_y_colptr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_DATA_WIDTH-1 downto 0);
    m_axi_y_colptr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_DATA_WIDTH/8-1 downto 0);
    m_axi_y_colptr_WLAST : OUT STD_LOGIC;
    m_axi_y_colptr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ID_WIDTH-1 downto 0);
    m_axi_y_colptr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_WUSER_WIDTH-1 downto 0);
    m_axi_y_colptr_ARVALID : OUT STD_LOGIC;
    m_axi_y_colptr_ARREADY : IN STD_LOGIC;
    m_axi_y_colptr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ADDR_WIDTH-1 downto 0);
    m_axi_y_colptr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ID_WIDTH-1 downto 0);
    m_axi_y_colptr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_colptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_colptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_colptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_colptr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ARUSER_WIDTH-1 downto 0);
    m_axi_y_colptr_RVALID : IN STD_LOGIC;
    m_axi_y_colptr_RREADY : OUT STD_LOGIC;
    m_axi_y_colptr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_DATA_WIDTH-1 downto 0);
    m_axi_y_colptr_RLAST : IN STD_LOGIC;
    m_axi_y_colptr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ID_WIDTH-1 downto 0);
    m_axi_y_colptr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_RUSER_WIDTH-1 downto 0);
    m_axi_y_colptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_BVALID : IN STD_LOGIC;
    m_axi_y_colptr_BREADY : OUT STD_LOGIC;
    m_axi_y_colptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_colptr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_ID_WIDTH-1 downto 0);
    m_axi_y_colptr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_COLPTR_BUSER_WIDTH-1 downto 0);
    m_axi_y_rowind_AWVALID : OUT STD_LOGIC;
    m_axi_y_rowind_AWREADY : IN STD_LOGIC;
    m_axi_y_rowind_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ADDR_WIDTH-1 downto 0);
    m_axi_y_rowind_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ID_WIDTH-1 downto 0);
    m_axi_y_rowind_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_rowind_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_rowind_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_rowind_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_AWUSER_WIDTH-1 downto 0);
    m_axi_y_rowind_WVALID : OUT STD_LOGIC;
    m_axi_y_rowind_WREADY : IN STD_LOGIC;
    m_axi_y_rowind_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_DATA_WIDTH-1 downto 0);
    m_axi_y_rowind_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_DATA_WIDTH/8-1 downto 0);
    m_axi_y_rowind_WLAST : OUT STD_LOGIC;
    m_axi_y_rowind_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ID_WIDTH-1 downto 0);
    m_axi_y_rowind_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_WUSER_WIDTH-1 downto 0);
    m_axi_y_rowind_ARVALID : OUT STD_LOGIC;
    m_axi_y_rowind_ARREADY : IN STD_LOGIC;
    m_axi_y_rowind_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ADDR_WIDTH-1 downto 0);
    m_axi_y_rowind_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ID_WIDTH-1 downto 0);
    m_axi_y_rowind_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_rowind_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_rowind_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_rowind_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_rowind_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ARUSER_WIDTH-1 downto 0);
    m_axi_y_rowind_RVALID : IN STD_LOGIC;
    m_axi_y_rowind_RREADY : OUT STD_LOGIC;
    m_axi_y_rowind_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_DATA_WIDTH-1 downto 0);
    m_axi_y_rowind_RLAST : IN STD_LOGIC;
    m_axi_y_rowind_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ID_WIDTH-1 downto 0);
    m_axi_y_rowind_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_RUSER_WIDTH-1 downto 0);
    m_axi_y_rowind_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_BVALID : IN STD_LOGIC;
    m_axi_y_rowind_BREADY : OUT STD_LOGIC;
    m_axi_y_rowind_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_rowind_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_ID_WIDTH-1 downto 0);
    m_axi_y_rowind_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_ROWIND_BUSER_WIDTH-1 downto 0);
    m_axi_y_data_AWVALID : OUT STD_LOGIC;
    m_axi_y_data_AWREADY : IN STD_LOGIC;
    m_axi_y_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_y_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ID_WIDTH-1 downto 0);
    m_axi_y_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_y_data_WVALID : OUT STD_LOGIC;
    m_axi_y_data_WREADY : IN STD_LOGIC;
    m_axi_y_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_DATA_WIDTH-1 downto 0);
    m_axi_y_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_y_data_WLAST : OUT STD_LOGIC;
    m_axi_y_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ID_WIDTH-1 downto 0);
    m_axi_y_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_y_data_ARVALID : OUT STD_LOGIC;
    m_axi_y_data_ARREADY : IN STD_LOGIC;
    m_axi_y_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_y_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ID_WIDTH-1 downto 0);
    m_axi_y_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_y_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_y_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_y_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_y_data_RVALID : IN STD_LOGIC;
    m_axi_y_data_RREADY : OUT STD_LOGIC;
    m_axi_y_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_DATA_WIDTH-1 downto 0);
    m_axi_y_data_RLAST : IN STD_LOGIC;
    m_axi_y_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ID_WIDTH-1 downto 0);
    m_axi_y_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_y_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_BVALID : IN STD_LOGIC;
    m_axi_y_data_BREADY : OUT STD_LOGIC;
    m_axi_y_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_y_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_ID_WIDTH-1 downto 0);
    m_axi_y_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Y_DATA_BUSER_WIDTH-1 downto 0);
    m_axi_z_rowptr_AWVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_AWREADY : IN STD_LOGIC;
    m_axi_z_rowptr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ADDR_WIDTH-1 downto 0);
    m_axi_z_rowptr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_z_rowptr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_rowptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_AWUSER_WIDTH-1 downto 0);
    m_axi_z_rowptr_WVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_WREADY : IN STD_LOGIC;
    m_axi_z_rowptr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_DATA_WIDTH-1 downto 0);
    m_axi_z_rowptr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_DATA_WIDTH/8-1 downto 0);
    m_axi_z_rowptr_WLAST : OUT STD_LOGIC;
    m_axi_z_rowptr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_z_rowptr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_WUSER_WIDTH-1 downto 0);
    m_axi_z_rowptr_ARVALID : OUT STD_LOGIC;
    m_axi_z_rowptr_ARREADY : IN STD_LOGIC;
    m_axi_z_rowptr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ADDR_WIDTH-1 downto 0);
    m_axi_z_rowptr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_z_rowptr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_rowptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_rowptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_rowptr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ARUSER_WIDTH-1 downto 0);
    m_axi_z_rowptr_RVALID : IN STD_LOGIC;
    m_axi_z_rowptr_RREADY : OUT STD_LOGIC;
    m_axi_z_rowptr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_DATA_WIDTH-1 downto 0);
    m_axi_z_rowptr_RLAST : IN STD_LOGIC;
    m_axi_z_rowptr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_z_rowptr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_RUSER_WIDTH-1 downto 0);
    m_axi_z_rowptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_BVALID : IN STD_LOGIC;
    m_axi_z_rowptr_BREADY : OUT STD_LOGIC;
    m_axi_z_rowptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_rowptr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_ID_WIDTH-1 downto 0);
    m_axi_z_rowptr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_ROWPTR_BUSER_WIDTH-1 downto 0);
    m_axi_z_colind_AWVALID : OUT STD_LOGIC;
    m_axi_z_colind_AWREADY : IN STD_LOGIC;
    m_axi_z_colind_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ADDR_WIDTH-1 downto 0);
    m_axi_z_colind_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ID_WIDTH-1 downto 0);
    m_axi_z_colind_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_colind_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_AWUSER_WIDTH-1 downto 0);
    m_axi_z_colind_WVALID : OUT STD_LOGIC;
    m_axi_z_colind_WREADY : IN STD_LOGIC;
    m_axi_z_colind_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_DATA_WIDTH-1 downto 0);
    m_axi_z_colind_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_DATA_WIDTH/8-1 downto 0);
    m_axi_z_colind_WLAST : OUT STD_LOGIC;
    m_axi_z_colind_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ID_WIDTH-1 downto 0);
    m_axi_z_colind_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_WUSER_WIDTH-1 downto 0);
    m_axi_z_colind_ARVALID : OUT STD_LOGIC;
    m_axi_z_colind_ARREADY : IN STD_LOGIC;
    m_axi_z_colind_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ADDR_WIDTH-1 downto 0);
    m_axi_z_colind_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ID_WIDTH-1 downto 0);
    m_axi_z_colind_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_colind_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_colind_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_colind_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ARUSER_WIDTH-1 downto 0);
    m_axi_z_colind_RVALID : IN STD_LOGIC;
    m_axi_z_colind_RREADY : OUT STD_LOGIC;
    m_axi_z_colind_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_DATA_WIDTH-1 downto 0);
    m_axi_z_colind_RLAST : IN STD_LOGIC;
    m_axi_z_colind_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ID_WIDTH-1 downto 0);
    m_axi_z_colind_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_RUSER_WIDTH-1 downto 0);
    m_axi_z_colind_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_BVALID : IN STD_LOGIC;
    m_axi_z_colind_BREADY : OUT STD_LOGIC;
    m_axi_z_colind_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_colind_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_ID_WIDTH-1 downto 0);
    m_axi_z_colind_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_COLIND_BUSER_WIDTH-1 downto 0);
    m_axi_z_data_AWVALID : OUT STD_LOGIC;
    m_axi_z_data_AWREADY : IN STD_LOGIC;
    m_axi_z_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_z_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ID_WIDTH-1 downto 0);
    m_axi_z_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_z_data_WVALID : OUT STD_LOGIC;
    m_axi_z_data_WREADY : IN STD_LOGIC;
    m_axi_z_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_DATA_WIDTH-1 downto 0);
    m_axi_z_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_z_data_WLAST : OUT STD_LOGIC;
    m_axi_z_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ID_WIDTH-1 downto 0);
    m_axi_z_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_z_data_ARVALID : OUT STD_LOGIC;
    m_axi_z_data_ARREADY : IN STD_LOGIC;
    m_axi_z_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_z_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ID_WIDTH-1 downto 0);
    m_axi_z_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_z_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_z_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_z_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_z_data_RVALID : IN STD_LOGIC;
    m_axi_z_data_RREADY : OUT STD_LOGIC;
    m_axi_z_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_DATA_WIDTH-1 downto 0);
    m_axi_z_data_RLAST : IN STD_LOGIC;
    m_axi_z_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ID_WIDTH-1 downto 0);
    m_axi_z_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_z_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_BVALID : IN STD_LOGIC;
    m_axi_z_data_BREADY : OUT STD_LOGIC;
    m_axi_z_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_z_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_ID_WIDTH-1 downto 0);
    m_axi_z_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_Z_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of outer_product is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "outer_product_outer_product,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=8286,HLS_SYN_LUT=9830,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (91 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (91 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (91 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (91 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (91 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (91 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (91 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (91 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (91 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (91 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (91 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x_rowptr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln399_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_rowptr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal x_colind_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal x_colind_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal x_data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal x_data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal y_colptr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal y_colptr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal y_rowind_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal y_rowind_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal y_data_blk_n_AR : STD_LOGIC;
    signal y_data_blk_n_R : STD_LOGIC;
    signal z_rowptr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal icmp_ln435_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal z_rowptr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal z_colind_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal z_colind_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal z_colind_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal z_data_blk_n_AW : STD_LOGIC;
    signal z_data_blk_n_W : STD_LOGIC;
    signal z_data_blk_n_B : STD_LOGIC;
    signal x_rowptr_AWREADY : STD_LOGIC;
    signal x_rowptr_WREADY : STD_LOGIC;
    signal x_rowptr_ARVALID : STD_LOGIC;
    signal x_rowptr_ARREADY : STD_LOGIC;
    signal x_rowptr_RVALID : STD_LOGIC;
    signal x_rowptr_RREADY : STD_LOGIC;
    signal x_rowptr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal x_rowptr_RLAST : STD_LOGIC;
    signal x_rowptr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_rowptr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal x_rowptr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_rowptr_BVALID : STD_LOGIC;
    signal x_rowptr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_rowptr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_rowptr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal x_colind_AWREADY : STD_LOGIC;
    signal x_colind_WREADY : STD_LOGIC;
    signal x_colind_ARVALID : STD_LOGIC;
    signal x_colind_ARREADY : STD_LOGIC;
    signal x_colind_RVALID : STD_LOGIC;
    signal x_colind_RREADY : STD_LOGIC;
    signal x_colind_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal x_colind_RLAST : STD_LOGIC;
    signal x_colind_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_colind_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal x_colind_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_colind_BVALID : STD_LOGIC;
    signal x_colind_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_colind_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_colind_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal x_data_AWREADY : STD_LOGIC;
    signal x_data_WREADY : STD_LOGIC;
    signal x_data_ARVALID : STD_LOGIC;
    signal x_data_ARREADY : STD_LOGIC;
    signal x_data_RVALID : STD_LOGIC;
    signal x_data_RREADY : STD_LOGIC;
    signal x_data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal x_data_RLAST : STD_LOGIC;
    signal x_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal x_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_data_BVALID : STD_LOGIC;
    signal x_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal x_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal x_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_colptr_AWREADY : STD_LOGIC;
    signal y_colptr_WREADY : STD_LOGIC;
    signal y_colptr_ARVALID : STD_LOGIC;
    signal y_colptr_ARREADY : STD_LOGIC;
    signal y_colptr_RVALID : STD_LOGIC;
    signal y_colptr_RREADY : STD_LOGIC;
    signal y_colptr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal y_colptr_RLAST : STD_LOGIC;
    signal y_colptr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_colptr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_colptr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_colptr_BVALID : STD_LOGIC;
    signal y_colptr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_colptr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_colptr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_rowind_AWREADY : STD_LOGIC;
    signal y_rowind_WREADY : STD_LOGIC;
    signal y_rowind_ARVALID : STD_LOGIC;
    signal y_rowind_ARREADY : STD_LOGIC;
    signal y_rowind_RVALID : STD_LOGIC;
    signal y_rowind_RREADY : STD_LOGIC;
    signal y_rowind_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal y_rowind_RLAST : STD_LOGIC;
    signal y_rowind_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_rowind_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_rowind_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_rowind_BVALID : STD_LOGIC;
    signal y_rowind_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_rowind_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_rowind_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_data_AWREADY : STD_LOGIC;
    signal y_data_WREADY : STD_LOGIC;
    signal y_data_ARVALID : STD_LOGIC;
    signal y_data_ARREADY : STD_LOGIC;
    signal y_data_RVALID : STD_LOGIC;
    signal y_data_RREADY : STD_LOGIC;
    signal y_data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_RLAST : STD_LOGIC;
    signal y_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal y_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_data_BVALID : STD_LOGIC;
    signal y_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal y_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal y_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_AWVALID : STD_LOGIC;
    signal z_rowptr_AWREADY : STD_LOGIC;
    signal z_rowptr_WVALID : STD_LOGIC;
    signal z_rowptr_WREADY : STD_LOGIC;
    signal z_rowptr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_rowptr_ARVALID : STD_LOGIC;
    signal z_rowptr_ARREADY : STD_LOGIC;
    signal z_rowptr_RVALID : STD_LOGIC;
    signal z_rowptr_RREADY : STD_LOGIC;
    signal z_rowptr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_rowptr_RLAST : STD_LOGIC;
    signal z_rowptr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_rowptr_BVALID : STD_LOGIC;
    signal z_rowptr_BREADY : STD_LOGIC;
    signal z_rowptr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_rowptr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_rowptr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_colind_AWVALID : STD_LOGIC;
    signal z_colind_AWREADY : STD_LOGIC;
    signal z_colind_WVALID : STD_LOGIC;
    signal z_colind_WREADY : STD_LOGIC;
    signal z_colind_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_colind_ARVALID : STD_LOGIC;
    signal z_colind_ARREADY : STD_LOGIC;
    signal z_colind_RVALID : STD_LOGIC;
    signal z_colind_RREADY : STD_LOGIC;
    signal z_colind_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_colind_RLAST : STD_LOGIC;
    signal z_colind_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_colind_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_colind_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_colind_BVALID : STD_LOGIC;
    signal z_colind_BREADY : STD_LOGIC;
    signal z_colind_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_colind_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_colind_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_data_AWVALID : STD_LOGIC;
    signal z_data_AWREADY : STD_LOGIC;
    signal z_data_WVALID : STD_LOGIC;
    signal z_data_WREADY : STD_LOGIC;
    signal z_data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_data_ARVALID : STD_LOGIC;
    signal z_data_ARREADY : STD_LOGIC;
    signal z_data_RVALID : STD_LOGIC;
    signal z_data_RREADY : STD_LOGIC;
    signal z_data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal z_data_RLAST : STD_LOGIC;
    signal z_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal z_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_data_BVALID : STD_LOGIC;
    signal z_data_BREADY : STD_LOGIC;
    signal z_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal z_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal z_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln325_fu_673_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln332_fu_690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln25_fu_708_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln25_reg_1125 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln399_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln399_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_reg_1134 : STD_LOGIC_VECTOR (63 downto 0);
    signal start_idx_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_idx_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_731_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_reg_1155 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln28_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1168 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_colptr_addr_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_reg_1179 : STD_LOGIC_VECTOR (63 downto 0);
    signal compare_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln34_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal x_data_addr_reg_1200 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_data_addr_read_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_fu_782_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln34_reg_1211 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal j_5_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_idx_1_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_idx_1_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln9_fu_896_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln9_reg_1233 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln9_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_1_fu_906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln9_1_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_reg_1268 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_addr_read_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal add_ln325_1_fu_970_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal add_ln332_1_fu_987_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal col_V_3_1_load_1_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln332_1_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_V_3_2_load_1_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_3_load_1_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_4_load_1_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln435_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln344_1_fu_1011_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln344_1_reg_1323 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln344_1_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_rowptr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_rowptr_load_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal add_ln351_1_fu_1028_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln351_1_reg_1341 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln351_1_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_colind_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_colind_load_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal temp_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_data_V_load_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln344_fu_1046_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln344_reg_1369 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal icmp_ln344_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partial_z_rowptr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_rowptr_load_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal add_ln351_fu_1063_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln351_reg_1387 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal icmp_ln351_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partial_z_colind_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_colind_load_reg_1405 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal partial_z_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_data_V_load_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_rowptr_ce0 : STD_LOGIC;
    signal temp_rowptr_we0 : STD_LOGIC;
    signal temp_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_colind_ce0 : STD_LOGIC;
    signal temp_colind_we0 : STD_LOGIC;
    signal temp_colind_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_data_V_ce0 : STD_LOGIC;
    signal temp_data_V_we0 : STD_LOGIC;
    signal temp_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_V_ce0 : STD_LOGIC;
    signal row_V_we0 : STD_LOGIC;
    signal row_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_rowptr_ce0 : STD_LOGIC;
    signal partial_z_rowptr_we0 : STD_LOGIC;
    signal partial_z_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_rowptr_ce1 : STD_LOGIC;
    signal partial_z_rowptr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_z_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_colind_ce0 : STD_LOGIC;
    signal partial_z_colind_we0 : STD_LOGIC;
    signal partial_z_colind_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal partial_z_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal partial_z_data_V_ce0 : STD_LOGIC;
    signal partial_z_data_V_we0 : STD_LOGIC;
    signal partial_z_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_ap_start : STD_LOGIC;
    signal grp_accumulate_fu_629_ap_done : STD_LOGIC;
    signal grp_accumulate_fu_629_ap_idle : STD_LOGIC;
    signal grp_accumulate_fu_629_ap_ready : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WLAST : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_rowptr_RREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_rowptr_BREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_AWVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_WVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_WLAST : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_colind_RREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_colind_BREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_AWVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_WVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_WLAST : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARVALID : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accumulate_fu_629_m_axi_z_data_RREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_m_axi_z_data_BREADY : STD_LOGIC;
    signal grp_accumulate_fu_629_csr2_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_csr2_rowptr_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_csr2_rowptr_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_csr2_rowptr_ce1 : STD_LOGIC;
    signal grp_accumulate_fu_629_csr2_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_629_csr2_colind_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_csr2_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_629_csr2_data_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_accumulate_fu_629_out_csr_rowptr_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_rowptr_we0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_out_csr_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_629_out_csr_colind_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_colind_we0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_colind_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_accumulate_fu_629_out_csr_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_accumulate_fu_629_out_csr_data_ce0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_data_we0 : STD_LOGIC;
    signal grp_accumulate_fu_629_out_csr_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multiply_row_col_fu_645_ap_start : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_ap_done : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_ap_idle : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_ap_ready : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_row_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_645_row_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_rowptr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_645_out_rowptr_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_rowptr_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_rowptr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multiply_row_col_fu_645_out_colind_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_multiply_row_col_fu_645_out_colind_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_colind_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_colind_d0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_multiply_row_col_fu_645_out_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_multiply_row_col_fu_645_out_data_ce0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_data_we0 : STD_LOGIC;
    signal grp_multiply_row_col_fu_645_out_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_475 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln325_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln332_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_11_reg_497 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state76 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_reg_509 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal j_2_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_0_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_542 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln325_1_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_585 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_596 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state71_io : BOOLEAN;
    signal i_7_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state57_io : BOOLEAN;
    signal i_9_reg_618 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state87_io : BOOLEAN;
    signal grp_accumulate_fu_629_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_multiply_row_col_fu_645_ap_start_reg : STD_LOGIC := '0';
    signal i_cast_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln325_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln332_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_1_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_1_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state46_io : BOOLEAN;
    signal ap_block_state53 : BOOLEAN;
    signal ap_block_state64_io : BOOLEAN;
    signal ap_block_state80_io : BOOLEAN;
    signal ap_block_state92 : BOOLEAN;
    signal zext_ln356_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_1_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_9_fu_868_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_2_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_8_fu_860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_3_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_6_fu_844_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_4_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_1_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_4_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_2_fu_836_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_V_3_7_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_1_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (91 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component outer_product_accumulate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_z_rowptr_AWVALID : OUT STD_LOGIC;
        m_axi_z_rowptr_AWREADY : IN STD_LOGIC;
        m_axi_z_rowptr_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_rowptr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_rowptr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_rowptr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_rowptr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_WVALID : OUT STD_LOGIC;
        m_axi_z_rowptr_WREADY : IN STD_LOGIC;
        m_axi_z_rowptr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_rowptr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_WLAST : OUT STD_LOGIC;
        m_axi_z_rowptr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_ARVALID : OUT STD_LOGIC;
        m_axi_z_rowptr_ARREADY : IN STD_LOGIC;
        m_axi_z_rowptr_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_rowptr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_rowptr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_rowptr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_rowptr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_rowptr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_RVALID : IN STD_LOGIC;
        m_axi_z_rowptr_RREADY : OUT STD_LOGIC;
        m_axi_z_rowptr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_rowptr_RLAST : IN STD_LOGIC;
        m_axi_z_rowptr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_BVALID : IN STD_LOGIC;
        m_axi_z_rowptr_BREADY : OUT STD_LOGIC;
        m_axi_z_rowptr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_rowptr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_rowptr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_AWVALID : OUT STD_LOGIC;
        m_axi_z_colind_AWREADY : IN STD_LOGIC;
        m_axi_z_colind_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_colind_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_colind_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_colind_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_colind_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_WVALID : OUT STD_LOGIC;
        m_axi_z_colind_WREADY : IN STD_LOGIC;
        m_axi_z_colind_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_colind_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_WLAST : OUT STD_LOGIC;
        m_axi_z_colind_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_ARVALID : OUT STD_LOGIC;
        m_axi_z_colind_ARREADY : IN STD_LOGIC;
        m_axi_z_colind_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_colind_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_colind_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_colind_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_colind_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_colind_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_RVALID : IN STD_LOGIC;
        m_axi_z_colind_RREADY : OUT STD_LOGIC;
        m_axi_z_colind_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_colind_RLAST : IN STD_LOGIC;
        m_axi_z_colind_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_BVALID : IN STD_LOGIC;
        m_axi_z_colind_BREADY : OUT STD_LOGIC;
        m_axi_z_colind_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_colind_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_colind_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_AWVALID : OUT STD_LOGIC;
        m_axi_z_data_AWREADY : IN STD_LOGIC;
        m_axi_z_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_WVALID : OUT STD_LOGIC;
        m_axi_z_data_WREADY : IN STD_LOGIC;
        m_axi_z_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_WLAST : OUT STD_LOGIC;
        m_axi_z_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_ARVALID : OUT STD_LOGIC;
        m_axi_z_data_ARREADY : IN STD_LOGIC;
        m_axi_z_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_z_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_z_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_z_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_RVALID : IN STD_LOGIC;
        m_axi_z_data_RREADY : OUT STD_LOGIC;
        m_axi_z_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_z_data_RLAST : IN STD_LOGIC;
        m_axi_z_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_BVALID : IN STD_LOGIC;
        m_axi_z_data_BREADY : OUT STD_LOGIC;
        m_axi_z_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_z_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_z_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        csr2_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce0 : OUT STD_LOGIC;
        csr2_rowptr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_rowptr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        csr2_rowptr_ce1 : OUT STD_LOGIC;
        csr2_rowptr_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        csr2_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_colind_ce0 : OUT STD_LOGIC;
        csr2_colind_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
        csr2_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        csr2_data_ce0 : OUT STD_LOGIC;
        csr2_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_csr_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_csr_rowptr_ce0 : OUT STD_LOGIC;
        out_csr_rowptr_we0 : OUT STD_LOGIC;
        out_csr_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_csr_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_csr_colind_ce0 : OUT STD_LOGIC;
        out_csr_colind_we0 : OUT STD_LOGIC;
        out_csr_colind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_csr_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_csr_data_ce0 : OUT STD_LOGIC;
        out_csr_data_we0 : OUT STD_LOGIC;
        out_csr_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_multiply_row_col IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        row_ce0 : OUT STD_LOGIC;
        row_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_rowptr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_rowptr_ce0 : OUT STD_LOGIC;
        out_rowptr_we0 : OUT STD_LOGIC;
        out_rowptr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_colind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_colind_ce0 : OUT STD_LOGIC;
        out_colind_we0 : OUT STD_LOGIC;
        out_colind_d0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_data_ce0 : OUT STD_LOGIC;
        out_data_we0 : OUT STD_LOGIC;
        out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_temp_rowptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_temp_colind IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_partial_z_rowptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component outer_product_partial_z_colind IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component outer_product_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component outer_product_x_rowptr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_x_colind_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_x_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_y_colptr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_y_rowind_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_y_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_z_rowptr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_z_colind_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component outer_product_z_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component outer_product_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    x_rowptr_m_axi_U : component outer_product_x_rowptr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_X_ROWPTR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_X_ROWPTR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_X_ROWPTR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_X_ROWPTR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_X_ROWPTR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_X_ROWPTR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_X_ROWPTR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_X_ROWPTR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_X_ROWPTR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_X_ROWPTR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_X_ROWPTR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_X_ROWPTR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_x_rowptr_AWVALID,
        AWREADY => m_axi_x_rowptr_AWREADY,
        AWADDR => m_axi_x_rowptr_AWADDR,
        AWID => m_axi_x_rowptr_AWID,
        AWLEN => m_axi_x_rowptr_AWLEN,
        AWSIZE => m_axi_x_rowptr_AWSIZE,
        AWBURST => m_axi_x_rowptr_AWBURST,
        AWLOCK => m_axi_x_rowptr_AWLOCK,
        AWCACHE => m_axi_x_rowptr_AWCACHE,
        AWPROT => m_axi_x_rowptr_AWPROT,
        AWQOS => m_axi_x_rowptr_AWQOS,
        AWREGION => m_axi_x_rowptr_AWREGION,
        AWUSER => m_axi_x_rowptr_AWUSER,
        WVALID => m_axi_x_rowptr_WVALID,
        WREADY => m_axi_x_rowptr_WREADY,
        WDATA => m_axi_x_rowptr_WDATA,
        WSTRB => m_axi_x_rowptr_WSTRB,
        WLAST => m_axi_x_rowptr_WLAST,
        WID => m_axi_x_rowptr_WID,
        WUSER => m_axi_x_rowptr_WUSER,
        ARVALID => m_axi_x_rowptr_ARVALID,
        ARREADY => m_axi_x_rowptr_ARREADY,
        ARADDR => m_axi_x_rowptr_ARADDR,
        ARID => m_axi_x_rowptr_ARID,
        ARLEN => m_axi_x_rowptr_ARLEN,
        ARSIZE => m_axi_x_rowptr_ARSIZE,
        ARBURST => m_axi_x_rowptr_ARBURST,
        ARLOCK => m_axi_x_rowptr_ARLOCK,
        ARCACHE => m_axi_x_rowptr_ARCACHE,
        ARPROT => m_axi_x_rowptr_ARPROT,
        ARQOS => m_axi_x_rowptr_ARQOS,
        ARREGION => m_axi_x_rowptr_ARREGION,
        ARUSER => m_axi_x_rowptr_ARUSER,
        RVALID => m_axi_x_rowptr_RVALID,
        RREADY => m_axi_x_rowptr_RREADY,
        RDATA => m_axi_x_rowptr_RDATA,
        RLAST => m_axi_x_rowptr_RLAST,
        RID => m_axi_x_rowptr_RID,
        RUSER => m_axi_x_rowptr_RUSER,
        RRESP => m_axi_x_rowptr_RRESP,
        BVALID => m_axi_x_rowptr_BVALID,
        BREADY => m_axi_x_rowptr_BREADY,
        BRESP => m_axi_x_rowptr_BRESP,
        BID => m_axi_x_rowptr_BID,
        BUSER => m_axi_x_rowptr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => x_rowptr_ARVALID,
        I_ARREADY => x_rowptr_ARREADY,
        I_ARADDR => zext_ln399_fu_720_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_2,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => x_rowptr_RVALID,
        I_RREADY => x_rowptr_RREADY,
        I_RDATA => x_rowptr_RDATA,
        I_RID => x_rowptr_RID,
        I_RUSER => x_rowptr_RUSER,
        I_RRESP => x_rowptr_RRESP,
        I_RLAST => x_rowptr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => x_rowptr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => x_rowptr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => x_rowptr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => x_rowptr_BRESP,
        I_BID => x_rowptr_BID,
        I_BUSER => x_rowptr_BUSER);

    x_colind_m_axi_U : component outer_product_x_colind_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_X_COLIND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_X_COLIND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_X_COLIND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_X_COLIND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_X_COLIND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_X_COLIND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_X_COLIND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_X_COLIND_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_X_COLIND_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_X_COLIND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_X_COLIND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_X_COLIND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_x_colind_AWVALID,
        AWREADY => m_axi_x_colind_AWREADY,
        AWADDR => m_axi_x_colind_AWADDR,
        AWID => m_axi_x_colind_AWID,
        AWLEN => m_axi_x_colind_AWLEN,
        AWSIZE => m_axi_x_colind_AWSIZE,
        AWBURST => m_axi_x_colind_AWBURST,
        AWLOCK => m_axi_x_colind_AWLOCK,
        AWCACHE => m_axi_x_colind_AWCACHE,
        AWPROT => m_axi_x_colind_AWPROT,
        AWQOS => m_axi_x_colind_AWQOS,
        AWREGION => m_axi_x_colind_AWREGION,
        AWUSER => m_axi_x_colind_AWUSER,
        WVALID => m_axi_x_colind_WVALID,
        WREADY => m_axi_x_colind_WREADY,
        WDATA => m_axi_x_colind_WDATA,
        WSTRB => m_axi_x_colind_WSTRB,
        WLAST => m_axi_x_colind_WLAST,
        WID => m_axi_x_colind_WID,
        WUSER => m_axi_x_colind_WUSER,
        ARVALID => m_axi_x_colind_ARVALID,
        ARREADY => m_axi_x_colind_ARREADY,
        ARADDR => m_axi_x_colind_ARADDR,
        ARID => m_axi_x_colind_ARID,
        ARLEN => m_axi_x_colind_ARLEN,
        ARSIZE => m_axi_x_colind_ARSIZE,
        ARBURST => m_axi_x_colind_ARBURST,
        ARLOCK => m_axi_x_colind_ARLOCK,
        ARCACHE => m_axi_x_colind_ARCACHE,
        ARPROT => m_axi_x_colind_ARPROT,
        ARQOS => m_axi_x_colind_ARQOS,
        ARREGION => m_axi_x_colind_ARREGION,
        ARUSER => m_axi_x_colind_ARUSER,
        RVALID => m_axi_x_colind_RVALID,
        RREADY => m_axi_x_colind_RREADY,
        RDATA => m_axi_x_colind_RDATA,
        RLAST => m_axi_x_colind_RLAST,
        RID => m_axi_x_colind_RID,
        RUSER => m_axi_x_colind_RUSER,
        RRESP => m_axi_x_colind_RRESP,
        BVALID => m_axi_x_colind_BVALID,
        BREADY => m_axi_x_colind_BREADY,
        BRESP => m_axi_x_colind_BRESP,
        BID => m_axi_x_colind_BID,
        BUSER => m_axi_x_colind_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => x_colind_ARVALID,
        I_ARREADY => x_colind_ARREADY,
        I_ARADDR => sext_ln33_fu_757_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => x_colind_RVALID,
        I_RREADY => x_colind_RREADY,
        I_RDATA => x_colind_RDATA,
        I_RID => x_colind_RID,
        I_RUSER => x_colind_RUSER,
        I_RRESP => x_colind_RRESP,
        I_RLAST => x_colind_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => x_colind_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => x_colind_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => x_colind_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => x_colind_BRESP,
        I_BID => x_colind_BID,
        I_BUSER => x_colind_BUSER);

    x_data_m_axi_U : component outer_product_x_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_X_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_X_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_X_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_X_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_X_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_X_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_X_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_X_DATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_X_DATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_X_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_X_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_X_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_x_data_AWVALID,
        AWREADY => m_axi_x_data_AWREADY,
        AWADDR => m_axi_x_data_AWADDR,
        AWID => m_axi_x_data_AWID,
        AWLEN => m_axi_x_data_AWLEN,
        AWSIZE => m_axi_x_data_AWSIZE,
        AWBURST => m_axi_x_data_AWBURST,
        AWLOCK => m_axi_x_data_AWLOCK,
        AWCACHE => m_axi_x_data_AWCACHE,
        AWPROT => m_axi_x_data_AWPROT,
        AWQOS => m_axi_x_data_AWQOS,
        AWREGION => m_axi_x_data_AWREGION,
        AWUSER => m_axi_x_data_AWUSER,
        WVALID => m_axi_x_data_WVALID,
        WREADY => m_axi_x_data_WREADY,
        WDATA => m_axi_x_data_WDATA,
        WSTRB => m_axi_x_data_WSTRB,
        WLAST => m_axi_x_data_WLAST,
        WID => m_axi_x_data_WID,
        WUSER => m_axi_x_data_WUSER,
        ARVALID => m_axi_x_data_ARVALID,
        ARREADY => m_axi_x_data_ARREADY,
        ARADDR => m_axi_x_data_ARADDR,
        ARID => m_axi_x_data_ARID,
        ARLEN => m_axi_x_data_ARLEN,
        ARSIZE => m_axi_x_data_ARSIZE,
        ARBURST => m_axi_x_data_ARBURST,
        ARLOCK => m_axi_x_data_ARLOCK,
        ARCACHE => m_axi_x_data_ARCACHE,
        ARPROT => m_axi_x_data_ARPROT,
        ARQOS => m_axi_x_data_ARQOS,
        ARREGION => m_axi_x_data_ARREGION,
        ARUSER => m_axi_x_data_ARUSER,
        RVALID => m_axi_x_data_RVALID,
        RREADY => m_axi_x_data_RREADY,
        RDATA => m_axi_x_data_RDATA,
        RLAST => m_axi_x_data_RLAST,
        RID => m_axi_x_data_RID,
        RUSER => m_axi_x_data_RUSER,
        RRESP => m_axi_x_data_RRESP,
        BVALID => m_axi_x_data_BVALID,
        BREADY => m_axi_x_data_BREADY,
        BRESP => m_axi_x_data_BRESP,
        BID => m_axi_x_data_BID,
        BUSER => m_axi_x_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => x_data_ARVALID,
        I_ARREADY => x_data_ARREADY,
        I_ARADDR => x_data_addr_reg_1200,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => x_data_RVALID,
        I_RREADY => x_data_RREADY,
        I_RDATA => x_data_RDATA,
        I_RID => x_data_RID,
        I_RUSER => x_data_RUSER,
        I_RRESP => x_data_RRESP,
        I_RLAST => x_data_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => x_data_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => x_data_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => x_data_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => x_data_BRESP,
        I_BID => x_data_BID,
        I_BUSER => x_data_BUSER);

    y_colptr_m_axi_U : component outer_product_y_colptr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Y_COLPTR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Y_COLPTR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Y_COLPTR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Y_COLPTR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Y_COLPTR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Y_COLPTR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Y_COLPTR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Y_COLPTR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Y_COLPTR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Y_COLPTR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Y_COLPTR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Y_COLPTR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_y_colptr_AWVALID,
        AWREADY => m_axi_y_colptr_AWREADY,
        AWADDR => m_axi_y_colptr_AWADDR,
        AWID => m_axi_y_colptr_AWID,
        AWLEN => m_axi_y_colptr_AWLEN,
        AWSIZE => m_axi_y_colptr_AWSIZE,
        AWBURST => m_axi_y_colptr_AWBURST,
        AWLOCK => m_axi_y_colptr_AWLOCK,
        AWCACHE => m_axi_y_colptr_AWCACHE,
        AWPROT => m_axi_y_colptr_AWPROT,
        AWQOS => m_axi_y_colptr_AWQOS,
        AWREGION => m_axi_y_colptr_AWREGION,
        AWUSER => m_axi_y_colptr_AWUSER,
        WVALID => m_axi_y_colptr_WVALID,
        WREADY => m_axi_y_colptr_WREADY,
        WDATA => m_axi_y_colptr_WDATA,
        WSTRB => m_axi_y_colptr_WSTRB,
        WLAST => m_axi_y_colptr_WLAST,
        WID => m_axi_y_colptr_WID,
        WUSER => m_axi_y_colptr_WUSER,
        ARVALID => m_axi_y_colptr_ARVALID,
        ARREADY => m_axi_y_colptr_ARREADY,
        ARADDR => m_axi_y_colptr_ARADDR,
        ARID => m_axi_y_colptr_ARID,
        ARLEN => m_axi_y_colptr_ARLEN,
        ARSIZE => m_axi_y_colptr_ARSIZE,
        ARBURST => m_axi_y_colptr_ARBURST,
        ARLOCK => m_axi_y_colptr_ARLOCK,
        ARCACHE => m_axi_y_colptr_ARCACHE,
        ARPROT => m_axi_y_colptr_ARPROT,
        ARQOS => m_axi_y_colptr_ARQOS,
        ARREGION => m_axi_y_colptr_ARREGION,
        ARUSER => m_axi_y_colptr_ARUSER,
        RVALID => m_axi_y_colptr_RVALID,
        RREADY => m_axi_y_colptr_RREADY,
        RDATA => m_axi_y_colptr_RDATA,
        RLAST => m_axi_y_colptr_RLAST,
        RID => m_axi_y_colptr_RID,
        RUSER => m_axi_y_colptr_RUSER,
        RRESP => m_axi_y_colptr_RRESP,
        BVALID => m_axi_y_colptr_BVALID,
        BREADY => m_axi_y_colptr_BREADY,
        BRESP => m_axi_y_colptr_BRESP,
        BID => m_axi_y_colptr_BID,
        BUSER => m_axi_y_colptr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => y_colptr_ARVALID,
        I_ARREADY => y_colptr_ARREADY,
        I_ARADDR => y_colptr_addr_reg_1173,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_2,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => y_colptr_RVALID,
        I_RREADY => y_colptr_RREADY,
        I_RDATA => y_colptr_RDATA,
        I_RID => y_colptr_RID,
        I_RUSER => y_colptr_RUSER,
        I_RRESP => y_colptr_RRESP,
        I_RLAST => y_colptr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => y_colptr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => y_colptr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => y_colptr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => y_colptr_BRESP,
        I_BID => y_colptr_BID,
        I_BUSER => y_colptr_BUSER);

    y_rowind_m_axi_U : component outer_product_y_rowind_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Y_ROWIND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Y_ROWIND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Y_ROWIND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Y_ROWIND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Y_ROWIND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Y_ROWIND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Y_ROWIND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Y_ROWIND_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Y_ROWIND_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Y_ROWIND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Y_ROWIND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Y_ROWIND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_y_rowind_AWVALID,
        AWREADY => m_axi_y_rowind_AWREADY,
        AWADDR => m_axi_y_rowind_AWADDR,
        AWID => m_axi_y_rowind_AWID,
        AWLEN => m_axi_y_rowind_AWLEN,
        AWSIZE => m_axi_y_rowind_AWSIZE,
        AWBURST => m_axi_y_rowind_AWBURST,
        AWLOCK => m_axi_y_rowind_AWLOCK,
        AWCACHE => m_axi_y_rowind_AWCACHE,
        AWPROT => m_axi_y_rowind_AWPROT,
        AWQOS => m_axi_y_rowind_AWQOS,
        AWREGION => m_axi_y_rowind_AWREGION,
        AWUSER => m_axi_y_rowind_AWUSER,
        WVALID => m_axi_y_rowind_WVALID,
        WREADY => m_axi_y_rowind_WREADY,
        WDATA => m_axi_y_rowind_WDATA,
        WSTRB => m_axi_y_rowind_WSTRB,
        WLAST => m_axi_y_rowind_WLAST,
        WID => m_axi_y_rowind_WID,
        WUSER => m_axi_y_rowind_WUSER,
        ARVALID => m_axi_y_rowind_ARVALID,
        ARREADY => m_axi_y_rowind_ARREADY,
        ARADDR => m_axi_y_rowind_ARADDR,
        ARID => m_axi_y_rowind_ARID,
        ARLEN => m_axi_y_rowind_ARLEN,
        ARSIZE => m_axi_y_rowind_ARSIZE,
        ARBURST => m_axi_y_rowind_ARBURST,
        ARLOCK => m_axi_y_rowind_ARLOCK,
        ARCACHE => m_axi_y_rowind_ARCACHE,
        ARPROT => m_axi_y_rowind_ARPROT,
        ARQOS => m_axi_y_rowind_ARQOS,
        ARREGION => m_axi_y_rowind_ARREGION,
        ARUSER => m_axi_y_rowind_ARUSER,
        RVALID => m_axi_y_rowind_RVALID,
        RREADY => m_axi_y_rowind_RREADY,
        RDATA => m_axi_y_rowind_RDATA,
        RLAST => m_axi_y_rowind_RLAST,
        RID => m_axi_y_rowind_RID,
        RUSER => m_axi_y_rowind_RUSER,
        RRESP => m_axi_y_rowind_RRESP,
        BVALID => m_axi_y_rowind_BVALID,
        BREADY => m_axi_y_rowind_BREADY,
        BRESP => m_axi_y_rowind_BRESP,
        BID => m_axi_y_rowind_BID,
        BUSER => m_axi_y_rowind_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => y_rowind_ARVALID,
        I_ARREADY => y_rowind_ARREADY,
        I_ARADDR => sext_ln14_fu_921_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => y_rowind_RVALID,
        I_RREADY => y_rowind_RREADY,
        I_RDATA => y_rowind_RDATA,
        I_RID => y_rowind_RID,
        I_RUSER => y_rowind_RUSER,
        I_RRESP => y_rowind_RRESP,
        I_RLAST => y_rowind_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => y_rowind_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => y_rowind_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => y_rowind_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => y_rowind_BRESP,
        I_BID => y_rowind_BID,
        I_BUSER => y_rowind_BUSER);

    y_data_m_axi_U : component outer_product_y_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Y_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Y_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Y_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Y_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Y_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Y_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Y_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Y_DATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Y_DATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Y_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Y_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Y_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_y_data_AWVALID,
        AWREADY => m_axi_y_data_AWREADY,
        AWADDR => m_axi_y_data_AWADDR,
        AWID => m_axi_y_data_AWID,
        AWLEN => m_axi_y_data_AWLEN,
        AWSIZE => m_axi_y_data_AWSIZE,
        AWBURST => m_axi_y_data_AWBURST,
        AWLOCK => m_axi_y_data_AWLOCK,
        AWCACHE => m_axi_y_data_AWCACHE,
        AWPROT => m_axi_y_data_AWPROT,
        AWQOS => m_axi_y_data_AWQOS,
        AWREGION => m_axi_y_data_AWREGION,
        AWUSER => m_axi_y_data_AWUSER,
        WVALID => m_axi_y_data_WVALID,
        WREADY => m_axi_y_data_WREADY,
        WDATA => m_axi_y_data_WDATA,
        WSTRB => m_axi_y_data_WSTRB,
        WLAST => m_axi_y_data_WLAST,
        WID => m_axi_y_data_WID,
        WUSER => m_axi_y_data_WUSER,
        ARVALID => m_axi_y_data_ARVALID,
        ARREADY => m_axi_y_data_ARREADY,
        ARADDR => m_axi_y_data_ARADDR,
        ARID => m_axi_y_data_ARID,
        ARLEN => m_axi_y_data_ARLEN,
        ARSIZE => m_axi_y_data_ARSIZE,
        ARBURST => m_axi_y_data_ARBURST,
        ARLOCK => m_axi_y_data_ARLOCK,
        ARCACHE => m_axi_y_data_ARCACHE,
        ARPROT => m_axi_y_data_ARPROT,
        ARQOS => m_axi_y_data_ARQOS,
        ARREGION => m_axi_y_data_ARREGION,
        ARUSER => m_axi_y_data_ARUSER,
        RVALID => m_axi_y_data_RVALID,
        RREADY => m_axi_y_data_RREADY,
        RDATA => m_axi_y_data_RDATA,
        RLAST => m_axi_y_data_RLAST,
        RID => m_axi_y_data_RID,
        RUSER => m_axi_y_data_RUSER,
        RRESP => m_axi_y_data_RRESP,
        BVALID => m_axi_y_data_BVALID,
        BREADY => m_axi_y_data_BREADY,
        BRESP => m_axi_y_data_BRESP,
        BID => m_axi_y_data_BID,
        BUSER => m_axi_y_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => y_data_ARVALID,
        I_ARREADY => y_data_ARREADY,
        I_ARADDR => sext_ln14_fu_921_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => y_data_RVALID,
        I_RREADY => y_data_RREADY,
        I_RDATA => y_data_RDATA,
        I_RID => y_data_RID,
        I_RUSER => y_data_RUSER,
        I_RRESP => y_data_RRESP,
        I_RLAST => y_data_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => y_data_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => y_data_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => y_data_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => y_data_BRESP,
        I_BID => y_data_BID,
        I_BUSER => y_data_BUSER);

    z_rowptr_m_axi_U : component outer_product_z_rowptr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Z_ROWPTR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Z_ROWPTR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Z_ROWPTR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Z_ROWPTR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Z_ROWPTR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Z_ROWPTR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Z_ROWPTR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Z_ROWPTR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Z_ROWPTR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Z_ROWPTR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Z_ROWPTR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Z_ROWPTR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_z_rowptr_AWVALID,
        AWREADY => m_axi_z_rowptr_AWREADY,
        AWADDR => m_axi_z_rowptr_AWADDR,
        AWID => m_axi_z_rowptr_AWID,
        AWLEN => m_axi_z_rowptr_AWLEN,
        AWSIZE => m_axi_z_rowptr_AWSIZE,
        AWBURST => m_axi_z_rowptr_AWBURST,
        AWLOCK => m_axi_z_rowptr_AWLOCK,
        AWCACHE => m_axi_z_rowptr_AWCACHE,
        AWPROT => m_axi_z_rowptr_AWPROT,
        AWQOS => m_axi_z_rowptr_AWQOS,
        AWREGION => m_axi_z_rowptr_AWREGION,
        AWUSER => m_axi_z_rowptr_AWUSER,
        WVALID => m_axi_z_rowptr_WVALID,
        WREADY => m_axi_z_rowptr_WREADY,
        WDATA => m_axi_z_rowptr_WDATA,
        WSTRB => m_axi_z_rowptr_WSTRB,
        WLAST => m_axi_z_rowptr_WLAST,
        WID => m_axi_z_rowptr_WID,
        WUSER => m_axi_z_rowptr_WUSER,
        ARVALID => m_axi_z_rowptr_ARVALID,
        ARREADY => m_axi_z_rowptr_ARREADY,
        ARADDR => m_axi_z_rowptr_ARADDR,
        ARID => m_axi_z_rowptr_ARID,
        ARLEN => m_axi_z_rowptr_ARLEN,
        ARSIZE => m_axi_z_rowptr_ARSIZE,
        ARBURST => m_axi_z_rowptr_ARBURST,
        ARLOCK => m_axi_z_rowptr_ARLOCK,
        ARCACHE => m_axi_z_rowptr_ARCACHE,
        ARPROT => m_axi_z_rowptr_ARPROT,
        ARQOS => m_axi_z_rowptr_ARQOS,
        ARREGION => m_axi_z_rowptr_ARREGION,
        ARUSER => m_axi_z_rowptr_ARUSER,
        RVALID => m_axi_z_rowptr_RVALID,
        RREADY => m_axi_z_rowptr_RREADY,
        RDATA => m_axi_z_rowptr_RDATA,
        RLAST => m_axi_z_rowptr_RLAST,
        RID => m_axi_z_rowptr_RID,
        RUSER => m_axi_z_rowptr_RUSER,
        RRESP => m_axi_z_rowptr_RRESP,
        BVALID => m_axi_z_rowptr_BVALID,
        BREADY => m_axi_z_rowptr_BREADY,
        BRESP => m_axi_z_rowptr_BRESP,
        BID => m_axi_z_rowptr_BID,
        BUSER => m_axi_z_rowptr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => z_rowptr_ARVALID,
        I_ARREADY => z_rowptr_ARREADY,
        I_ARADDR => grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR,
        I_ARID => grp_accumulate_fu_629_m_axi_z_rowptr_ARID,
        I_ARLEN => grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN,
        I_ARSIZE => grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE,
        I_ARLOCK => grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK,
        I_ARCACHE => grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE,
        I_ARQOS => grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS,
        I_ARPROT => grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT,
        I_ARUSER => grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER,
        I_ARBURST => grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST,
        I_ARREGION => grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION,
        I_RVALID => z_rowptr_RVALID,
        I_RREADY => z_rowptr_RREADY,
        I_RDATA => z_rowptr_RDATA,
        I_RID => z_rowptr_RID,
        I_RUSER => z_rowptr_RUSER,
        I_RRESP => z_rowptr_RRESP,
        I_RLAST => z_rowptr_RLAST,
        I_AWVALID => z_rowptr_AWVALID,
        I_AWREADY => z_rowptr_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_5,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => z_rowptr_WVALID,
        I_WREADY => z_rowptr_WREADY,
        I_WDATA => z_rowptr_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => z_rowptr_BVALID,
        I_BREADY => z_rowptr_BREADY,
        I_BRESP => z_rowptr_BRESP,
        I_BID => z_rowptr_BID,
        I_BUSER => z_rowptr_BUSER);

    z_colind_m_axi_U : component outer_product_z_colind_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Z_COLIND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Z_COLIND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Z_COLIND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Z_COLIND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Z_COLIND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Z_COLIND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Z_COLIND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Z_COLIND_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Z_COLIND_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Z_COLIND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Z_COLIND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Z_COLIND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_z_colind_AWVALID,
        AWREADY => m_axi_z_colind_AWREADY,
        AWADDR => m_axi_z_colind_AWADDR,
        AWID => m_axi_z_colind_AWID,
        AWLEN => m_axi_z_colind_AWLEN,
        AWSIZE => m_axi_z_colind_AWSIZE,
        AWBURST => m_axi_z_colind_AWBURST,
        AWLOCK => m_axi_z_colind_AWLOCK,
        AWCACHE => m_axi_z_colind_AWCACHE,
        AWPROT => m_axi_z_colind_AWPROT,
        AWQOS => m_axi_z_colind_AWQOS,
        AWREGION => m_axi_z_colind_AWREGION,
        AWUSER => m_axi_z_colind_AWUSER,
        WVALID => m_axi_z_colind_WVALID,
        WREADY => m_axi_z_colind_WREADY,
        WDATA => m_axi_z_colind_WDATA,
        WSTRB => m_axi_z_colind_WSTRB,
        WLAST => m_axi_z_colind_WLAST,
        WID => m_axi_z_colind_WID,
        WUSER => m_axi_z_colind_WUSER,
        ARVALID => m_axi_z_colind_ARVALID,
        ARREADY => m_axi_z_colind_ARREADY,
        ARADDR => m_axi_z_colind_ARADDR,
        ARID => m_axi_z_colind_ARID,
        ARLEN => m_axi_z_colind_ARLEN,
        ARSIZE => m_axi_z_colind_ARSIZE,
        ARBURST => m_axi_z_colind_ARBURST,
        ARLOCK => m_axi_z_colind_ARLOCK,
        ARCACHE => m_axi_z_colind_ARCACHE,
        ARPROT => m_axi_z_colind_ARPROT,
        ARQOS => m_axi_z_colind_ARQOS,
        ARREGION => m_axi_z_colind_ARREGION,
        ARUSER => m_axi_z_colind_ARUSER,
        RVALID => m_axi_z_colind_RVALID,
        RREADY => m_axi_z_colind_RREADY,
        RDATA => m_axi_z_colind_RDATA,
        RLAST => m_axi_z_colind_RLAST,
        RID => m_axi_z_colind_RID,
        RUSER => m_axi_z_colind_RUSER,
        RRESP => m_axi_z_colind_RRESP,
        BVALID => m_axi_z_colind_BVALID,
        BREADY => m_axi_z_colind_BREADY,
        BRESP => m_axi_z_colind_BRESP,
        BID => m_axi_z_colind_BID,
        BUSER => m_axi_z_colind_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => z_colind_ARVALID,
        I_ARREADY => z_colind_ARREADY,
        I_ARADDR => grp_accumulate_fu_629_m_axi_z_colind_ARADDR,
        I_ARID => grp_accumulate_fu_629_m_axi_z_colind_ARID,
        I_ARLEN => grp_accumulate_fu_629_m_axi_z_colind_ARLEN,
        I_ARSIZE => grp_accumulate_fu_629_m_axi_z_colind_ARSIZE,
        I_ARLOCK => grp_accumulate_fu_629_m_axi_z_colind_ARLOCK,
        I_ARCACHE => grp_accumulate_fu_629_m_axi_z_colind_ARCACHE,
        I_ARQOS => grp_accumulate_fu_629_m_axi_z_colind_ARQOS,
        I_ARPROT => grp_accumulate_fu_629_m_axi_z_colind_ARPROT,
        I_ARUSER => grp_accumulate_fu_629_m_axi_z_colind_ARUSER,
        I_ARBURST => grp_accumulate_fu_629_m_axi_z_colind_ARBURST,
        I_ARREGION => grp_accumulate_fu_629_m_axi_z_colind_ARREGION,
        I_RVALID => z_colind_RVALID,
        I_RREADY => z_colind_RREADY,
        I_RDATA => z_colind_RDATA,
        I_RID => z_colind_RID,
        I_RUSER => z_colind_RUSER,
        I_RRESP => z_colind_RRESP,
        I_RLAST => z_colind_RLAST,
        I_AWVALID => z_colind_AWVALID,
        I_AWREADY => z_colind_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_14,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => z_colind_WVALID,
        I_WREADY => z_colind_WREADY,
        I_WDATA => z_colind_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => z_colind_BVALID,
        I_BREADY => z_colind_BREADY,
        I_BRESP => z_colind_BRESP,
        I_BID => z_colind_BID,
        I_BUSER => z_colind_BUSER);

    z_data_m_axi_U : component outer_product_z_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_Z_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_Z_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_Z_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_Z_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_Z_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_Z_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_Z_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_Z_DATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_Z_DATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_Z_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_Z_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_Z_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_z_data_AWVALID,
        AWREADY => m_axi_z_data_AWREADY,
        AWADDR => m_axi_z_data_AWADDR,
        AWID => m_axi_z_data_AWID,
        AWLEN => m_axi_z_data_AWLEN,
        AWSIZE => m_axi_z_data_AWSIZE,
        AWBURST => m_axi_z_data_AWBURST,
        AWLOCK => m_axi_z_data_AWLOCK,
        AWCACHE => m_axi_z_data_AWCACHE,
        AWPROT => m_axi_z_data_AWPROT,
        AWQOS => m_axi_z_data_AWQOS,
        AWREGION => m_axi_z_data_AWREGION,
        AWUSER => m_axi_z_data_AWUSER,
        WVALID => m_axi_z_data_WVALID,
        WREADY => m_axi_z_data_WREADY,
        WDATA => m_axi_z_data_WDATA,
        WSTRB => m_axi_z_data_WSTRB,
        WLAST => m_axi_z_data_WLAST,
        WID => m_axi_z_data_WID,
        WUSER => m_axi_z_data_WUSER,
        ARVALID => m_axi_z_data_ARVALID,
        ARREADY => m_axi_z_data_ARREADY,
        ARADDR => m_axi_z_data_ARADDR,
        ARID => m_axi_z_data_ARID,
        ARLEN => m_axi_z_data_ARLEN,
        ARSIZE => m_axi_z_data_ARSIZE,
        ARBURST => m_axi_z_data_ARBURST,
        ARLOCK => m_axi_z_data_ARLOCK,
        ARCACHE => m_axi_z_data_ARCACHE,
        ARPROT => m_axi_z_data_ARPROT,
        ARQOS => m_axi_z_data_ARQOS,
        ARREGION => m_axi_z_data_ARREGION,
        ARUSER => m_axi_z_data_ARUSER,
        RVALID => m_axi_z_data_RVALID,
        RREADY => m_axi_z_data_RREADY,
        RDATA => m_axi_z_data_RDATA,
        RLAST => m_axi_z_data_RLAST,
        RID => m_axi_z_data_RID,
        RUSER => m_axi_z_data_RUSER,
        RRESP => m_axi_z_data_RRESP,
        BVALID => m_axi_z_data_BVALID,
        BREADY => m_axi_z_data_BREADY,
        BRESP => m_axi_z_data_BRESP,
        BID => m_axi_z_data_BID,
        BUSER => m_axi_z_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => z_data_ARVALID,
        I_ARREADY => z_data_ARREADY,
        I_ARADDR => grp_accumulate_fu_629_m_axi_z_data_ARADDR,
        I_ARID => grp_accumulate_fu_629_m_axi_z_data_ARID,
        I_ARLEN => grp_accumulate_fu_629_m_axi_z_data_ARLEN,
        I_ARSIZE => grp_accumulate_fu_629_m_axi_z_data_ARSIZE,
        I_ARLOCK => grp_accumulate_fu_629_m_axi_z_data_ARLOCK,
        I_ARCACHE => grp_accumulate_fu_629_m_axi_z_data_ARCACHE,
        I_ARQOS => grp_accumulate_fu_629_m_axi_z_data_ARQOS,
        I_ARPROT => grp_accumulate_fu_629_m_axi_z_data_ARPROT,
        I_ARUSER => grp_accumulate_fu_629_m_axi_z_data_ARUSER,
        I_ARBURST => grp_accumulate_fu_629_m_axi_z_data_ARBURST,
        I_ARREGION => grp_accumulate_fu_629_m_axi_z_data_ARREGION,
        I_RVALID => z_data_RVALID,
        I_RREADY => z_data_RREADY,
        I_RDATA => z_data_RDATA,
        I_RID => z_data_RID,
        I_RUSER => z_data_RUSER,
        I_RRESP => z_data_RRESP,
        I_RLAST => z_data_RLAST,
        I_AWVALID => z_data_AWVALID,
        I_AWREADY => z_data_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_14,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => z_data_WVALID,
        I_WREADY => z_data_WREADY,
        I_WDATA => z_data_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => z_data_BVALID,
        I_BREADY => z_data_BREADY,
        I_BRESP => z_data_BRESP,
        I_BID => z_data_BID,
        I_BUSER => z_data_BUSER);

    temp_rowptr_U : component outer_product_temp_rowptr
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_rowptr_address0,
        ce0 => temp_rowptr_ce0,
        we0 => temp_rowptr_we0,
        d0 => temp_rowptr_d0,
        q0 => temp_rowptr_q0);

    temp_colind_U : component outer_product_temp_colind
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_colind_address0,
        ce0 => temp_colind_ce0,
        we0 => temp_colind_we0,
        d0 => temp_colind_d0,
        q0 => temp_colind_q0);

    temp_data_V_U : component outer_product_temp_colind
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_data_V_address0,
        ce0 => temp_data_V_ce0,
        we0 => temp_data_V_we0,
        d0 => temp_data_V_d0,
        q0 => temp_data_V_q0);

    row_V_U : component outer_product_temp_rowptr
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_V_address0,
        ce0 => row_V_ce0,
        we0 => row_V_we0,
        d0 => row_V_d0,
        q0 => row_V_q0);

    partial_z_rowptr_U : component outer_product_partial_z_rowptr
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => partial_z_rowptr_address0,
        ce0 => partial_z_rowptr_ce0,
        we0 => partial_z_rowptr_we0,
        d0 => partial_z_rowptr_d0,
        q0 => partial_z_rowptr_q0,
        address1 => grp_accumulate_fu_629_csr2_rowptr_address1,
        ce1 => partial_z_rowptr_ce1,
        q1 => partial_z_rowptr_q1);

    partial_z_colind_U : component outer_product_partial_z_colind
    generic map (
        DataWidth => 3,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => partial_z_colind_address0,
        ce0 => partial_z_colind_ce0,
        we0 => partial_z_colind_we0,
        d0 => partial_z_colind_d0,
        q0 => partial_z_colind_q0);

    partial_z_data_V_U : component outer_product_temp_colind
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => partial_z_data_V_address0,
        ce0 => partial_z_data_V_ce0,
        we0 => partial_z_data_V_we0,
        d0 => partial_z_data_V_d0,
        q0 => partial_z_data_V_q0);

    grp_accumulate_fu_629 : component outer_product_accumulate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_accumulate_fu_629_ap_start,
        ap_done => grp_accumulate_fu_629_ap_done,
        ap_idle => grp_accumulate_fu_629_ap_idle,
        ap_ready => grp_accumulate_fu_629_ap_ready,
        m_axi_z_rowptr_AWVALID => grp_accumulate_fu_629_m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY => ap_const_logic_0,
        m_axi_z_rowptr_AWADDR => grp_accumulate_fu_629_m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID => grp_accumulate_fu_629_m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN => grp_accumulate_fu_629_m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE => grp_accumulate_fu_629_m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST => grp_accumulate_fu_629_m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK => grp_accumulate_fu_629_m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE => grp_accumulate_fu_629_m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT => grp_accumulate_fu_629_m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS => grp_accumulate_fu_629_m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION => grp_accumulate_fu_629_m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER => grp_accumulate_fu_629_m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID => grp_accumulate_fu_629_m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY => ap_const_logic_0,
        m_axi_z_rowptr_WDATA => grp_accumulate_fu_629_m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB => grp_accumulate_fu_629_m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST => grp_accumulate_fu_629_m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID => grp_accumulate_fu_629_m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER => grp_accumulate_fu_629_m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID => grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY => z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR => grp_accumulate_fu_629_m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID => grp_accumulate_fu_629_m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN => grp_accumulate_fu_629_m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE => grp_accumulate_fu_629_m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST => grp_accumulate_fu_629_m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK => grp_accumulate_fu_629_m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE => grp_accumulate_fu_629_m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT => grp_accumulate_fu_629_m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS => grp_accumulate_fu_629_m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION => grp_accumulate_fu_629_m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER => grp_accumulate_fu_629_m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID => z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY => grp_accumulate_fu_629_m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA => z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST => z_rowptr_RLAST,
        m_axi_z_rowptr_RID => z_rowptr_RID,
        m_axi_z_rowptr_RUSER => z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP => z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID => ap_const_logic_0,
        m_axi_z_rowptr_BREADY => grp_accumulate_fu_629_m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP => ap_const_lv2_0,
        m_axi_z_rowptr_BID => ap_const_lv1_0,
        m_axi_z_rowptr_BUSER => ap_const_lv1_0,
        m_axi_z_colind_AWVALID => grp_accumulate_fu_629_m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY => ap_const_logic_0,
        m_axi_z_colind_AWADDR => grp_accumulate_fu_629_m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID => grp_accumulate_fu_629_m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN => grp_accumulate_fu_629_m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE => grp_accumulate_fu_629_m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST => grp_accumulate_fu_629_m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK => grp_accumulate_fu_629_m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE => grp_accumulate_fu_629_m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT => grp_accumulate_fu_629_m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS => grp_accumulate_fu_629_m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION => grp_accumulate_fu_629_m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER => grp_accumulate_fu_629_m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID => grp_accumulate_fu_629_m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY => ap_const_logic_0,
        m_axi_z_colind_WDATA => grp_accumulate_fu_629_m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB => grp_accumulate_fu_629_m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST => grp_accumulate_fu_629_m_axi_z_colind_WLAST,
        m_axi_z_colind_WID => grp_accumulate_fu_629_m_axi_z_colind_WID,
        m_axi_z_colind_WUSER => grp_accumulate_fu_629_m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID => grp_accumulate_fu_629_m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY => z_colind_ARREADY,
        m_axi_z_colind_ARADDR => grp_accumulate_fu_629_m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID => grp_accumulate_fu_629_m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN => grp_accumulate_fu_629_m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE => grp_accumulate_fu_629_m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST => grp_accumulate_fu_629_m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK => grp_accumulate_fu_629_m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE => grp_accumulate_fu_629_m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT => grp_accumulate_fu_629_m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS => grp_accumulate_fu_629_m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION => grp_accumulate_fu_629_m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER => grp_accumulate_fu_629_m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID => z_colind_RVALID,
        m_axi_z_colind_RREADY => grp_accumulate_fu_629_m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA => z_colind_RDATA,
        m_axi_z_colind_RLAST => z_colind_RLAST,
        m_axi_z_colind_RID => z_colind_RID,
        m_axi_z_colind_RUSER => z_colind_RUSER,
        m_axi_z_colind_RRESP => z_colind_RRESP,
        m_axi_z_colind_BVALID => ap_const_logic_0,
        m_axi_z_colind_BREADY => grp_accumulate_fu_629_m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP => ap_const_lv2_0,
        m_axi_z_colind_BID => ap_const_lv1_0,
        m_axi_z_colind_BUSER => ap_const_lv1_0,
        m_axi_z_data_AWVALID => grp_accumulate_fu_629_m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY => ap_const_logic_0,
        m_axi_z_data_AWADDR => grp_accumulate_fu_629_m_axi_z_data_AWADDR,
        m_axi_z_data_AWID => grp_accumulate_fu_629_m_axi_z_data_AWID,
        m_axi_z_data_AWLEN => grp_accumulate_fu_629_m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE => grp_accumulate_fu_629_m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST => grp_accumulate_fu_629_m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK => grp_accumulate_fu_629_m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE => grp_accumulate_fu_629_m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT => grp_accumulate_fu_629_m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS => grp_accumulate_fu_629_m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION => grp_accumulate_fu_629_m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER => grp_accumulate_fu_629_m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID => grp_accumulate_fu_629_m_axi_z_data_WVALID,
        m_axi_z_data_WREADY => ap_const_logic_0,
        m_axi_z_data_WDATA => grp_accumulate_fu_629_m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB => grp_accumulate_fu_629_m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST => grp_accumulate_fu_629_m_axi_z_data_WLAST,
        m_axi_z_data_WID => grp_accumulate_fu_629_m_axi_z_data_WID,
        m_axi_z_data_WUSER => grp_accumulate_fu_629_m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID => grp_accumulate_fu_629_m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY => z_data_ARREADY,
        m_axi_z_data_ARADDR => grp_accumulate_fu_629_m_axi_z_data_ARADDR,
        m_axi_z_data_ARID => grp_accumulate_fu_629_m_axi_z_data_ARID,
        m_axi_z_data_ARLEN => grp_accumulate_fu_629_m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE => grp_accumulate_fu_629_m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST => grp_accumulate_fu_629_m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK => grp_accumulate_fu_629_m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE => grp_accumulate_fu_629_m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT => grp_accumulate_fu_629_m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS => grp_accumulate_fu_629_m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION => grp_accumulate_fu_629_m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER => grp_accumulate_fu_629_m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID => z_data_RVALID,
        m_axi_z_data_RREADY => grp_accumulate_fu_629_m_axi_z_data_RREADY,
        m_axi_z_data_RDATA => z_data_RDATA,
        m_axi_z_data_RLAST => z_data_RLAST,
        m_axi_z_data_RID => z_data_RID,
        m_axi_z_data_RUSER => z_data_RUSER,
        m_axi_z_data_RRESP => z_data_RRESP,
        m_axi_z_data_BVALID => ap_const_logic_0,
        m_axi_z_data_BREADY => grp_accumulate_fu_629_m_axi_z_data_BREADY,
        m_axi_z_data_BRESP => ap_const_lv2_0,
        m_axi_z_data_BID => ap_const_lv1_0,
        m_axi_z_data_BUSER => ap_const_lv1_0,
        csr2_rowptr_address0 => grp_accumulate_fu_629_csr2_rowptr_address0,
        csr2_rowptr_ce0 => grp_accumulate_fu_629_csr2_rowptr_ce0,
        csr2_rowptr_q0 => partial_z_rowptr_q0,
        csr2_rowptr_address1 => grp_accumulate_fu_629_csr2_rowptr_address1,
        csr2_rowptr_ce1 => grp_accumulate_fu_629_csr2_rowptr_ce1,
        csr2_rowptr_q1 => partial_z_rowptr_q1,
        csr2_colind_address0 => grp_accumulate_fu_629_csr2_colind_address0,
        csr2_colind_ce0 => grp_accumulate_fu_629_csr2_colind_ce0,
        csr2_colind_q0 => partial_z_colind_q0,
        csr2_data_address0 => grp_accumulate_fu_629_csr2_data_address0,
        csr2_data_ce0 => grp_accumulate_fu_629_csr2_data_ce0,
        csr2_data_q0 => partial_z_data_V_q0,
        out_csr_rowptr_address0 => grp_accumulate_fu_629_out_csr_rowptr_address0,
        out_csr_rowptr_ce0 => grp_accumulate_fu_629_out_csr_rowptr_ce0,
        out_csr_rowptr_we0 => grp_accumulate_fu_629_out_csr_rowptr_we0,
        out_csr_rowptr_d0 => grp_accumulate_fu_629_out_csr_rowptr_d0,
        out_csr_colind_address0 => grp_accumulate_fu_629_out_csr_colind_address0,
        out_csr_colind_ce0 => grp_accumulate_fu_629_out_csr_colind_ce0,
        out_csr_colind_we0 => grp_accumulate_fu_629_out_csr_colind_we0,
        out_csr_colind_d0 => grp_accumulate_fu_629_out_csr_colind_d0,
        out_csr_data_address0 => grp_accumulate_fu_629_out_csr_data_address0,
        out_csr_data_ce0 => grp_accumulate_fu_629_out_csr_data_ce0,
        out_csr_data_we0 => grp_accumulate_fu_629_out_csr_data_we0,
        out_csr_data_d0 => grp_accumulate_fu_629_out_csr_data_d0);

    grp_multiply_row_col_fu_645 : component outer_product_multiply_row_col
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_multiply_row_col_fu_645_ap_start,
        ap_done => grp_multiply_row_col_fu_645_ap_done,
        ap_idle => grp_multiply_row_col_fu_645_ap_idle,
        ap_ready => grp_multiply_row_col_fu_645_ap_ready,
        row_address0 => grp_multiply_row_col_fu_645_row_address0,
        row_ce0 => grp_multiply_row_col_fu_645_row_ce0,
        row_q0 => row_V_q0,
        p_read => col_V_3_1_load_1_reg_1299,
        p_read1 => col_V_3_2_load_1_reg_1304,
        p_read2 => col_V_3_3_load_1_reg_1309,
        p_read3 => col_V_3_4_load_1_reg_1314,
        out_rowptr_address0 => grp_multiply_row_col_fu_645_out_rowptr_address0,
        out_rowptr_ce0 => grp_multiply_row_col_fu_645_out_rowptr_ce0,
        out_rowptr_we0 => grp_multiply_row_col_fu_645_out_rowptr_we0,
        out_rowptr_d0 => grp_multiply_row_col_fu_645_out_rowptr_d0,
        out_colind_address0 => grp_multiply_row_col_fu_645_out_colind_address0,
        out_colind_ce0 => grp_multiply_row_col_fu_645_out_colind_ce0,
        out_colind_we0 => grp_multiply_row_col_fu_645_out_colind_we0,
        out_colind_d0 => grp_multiply_row_col_fu_645_out_colind_d0,
        out_data_address0 => grp_multiply_row_col_fu_645_out_data_address0,
        out_data_ce0 => grp_multiply_row_col_fu_645_out_data_ce0,
        out_data_we0 => grp_multiply_row_col_fu_645_out_data_we0,
        out_data_d0 => grp_multiply_row_col_fu_645_out_data_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_accumulate_fu_629_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_accumulate_fu_629_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    grp_accumulate_fu_629_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accumulate_fu_629_ap_ready = ap_const_logic_1)) then 
                    grp_accumulate_fu_629_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_multiply_row_col_fu_645_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_multiply_row_col_fu_645_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_1))) then 
                    grp_multiply_row_col_fu_645_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_multiply_row_col_fu_645_ap_ready = ap_const_logic_1)) then 
                    grp_multiply_row_col_fu_645_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_V_0_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln34_fu_772_p2) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                col_V_0_reg_531 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln34_reg_1195) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                col_V_0_reg_531 <= x_data_addr_read_reg_1206;
            end if; 
        end if;
    end process;

    i_10_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (z_rowptr_BVALID = ap_const_logic_1))) then 
                i_10_reg_596 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_boolean_0 = ap_block_state71_io))) then 
                i_10_reg_596 <= add_ln351_1_reg_1341;
            end if; 
        end if;
    end process;

    i_11_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_11_reg_497 <= ap_const_lv3_0;
            elsif ((not((((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_colind_BVALID = ap_const_logic_0)) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_data_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                i_11_reg_497 <= add_ln25_reg_1125;
            end if; 
        end if;
    end process;

    i_1_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_486 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln332_fu_696_p2 = ap_const_lv1_0))) then 
                i_1_reg_486 <= add_ln332_fu_690_p2;
            end if; 
        end if;
    end process;

    i_3_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_3_reg_509 <= add_ln28_reg_1155;
            elsif (((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_3_reg_509 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (y_colptr_RVALID = ap_const_logic_1))) then 
                i_4_reg_542 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                i_4_reg_542 <= add_ln9_reg_1233;
            end if; 
        end if;
    end process;

    i_5_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln9_fu_910_p2 = ap_const_lv1_1))) then 
                i_5_reg_563 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln325_1_fu_981_p2 = ap_const_lv1_0))) then 
                i_5_reg_563 <= add_ln325_1_fu_970_p2;
            end if; 
        end if;
    end process;

    i_6_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln325_1_fu_981_p2 = ap_const_lv1_1))) then 
                i_6_reg_574 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
                i_6_reg_574 <= add_ln332_1_fu_987_p2;
            end if; 
        end if;
    end process;

    i_7_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_multiply_row_col_fu_645_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state57_io))) and (icmp_ln435_reg_1319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                i_7_reg_607 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state79) and (z_rowptr_WREADY = ap_const_logic_1))) then 
                i_7_reg_607 <= add_ln344_reg_1369;
            end if; 
        end if;
    end process;

    i_8_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and (z_rowptr_AWREADY = ap_const_logic_1))) then 
                i_8_reg_585 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (z_rowptr_WREADY = ap_const_logic_1))) then 
                i_8_reg_585 <= add_ln344_1_reg_1323;
            end if; 
        end if;
    end process;

    i_9_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) and (z_rowptr_BVALID = ap_const_logic_1))) then 
                i_9_reg_618 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state87) and (ap_const_boolean_0 = ap_block_state87_io))) then 
                i_9_reg_618 <= add_ln351_reg_1387;
            end if; 
        end if;
    end process;

    i_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_475 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln325_fu_679_p2 = ap_const_lv1_0))) then 
                i_reg_475 <= add_ln325_fu_673_p2;
            end if; 
        end if;
    end process;

    j_2_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j_2_reg_521 <= j_5_reg_1218;
            elsif (((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_2_reg_521 <= start_idx_reg_1145;
            end if; 
        end if;
    end process;

    j_3_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (y_colptr_RVALID = ap_const_logic_1))) then 
                j_3_reg_553 <= start_idx_1_reg_1223;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j_3_reg_553 <= j_7_fu_962_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln25_reg_1125 <= add_ln25_fu_708_p2;
                icmp_ln399_reg_1130 <= icmp_ln399_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln28_reg_1155 <= add_ln28_fu_731_p2;
                    zext_ln28_reg_1160(2 downto 0) <= zext_ln28_fu_737_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                add_ln344_1_reg_1323 <= add_ln344_1_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                add_ln344_reg_1369 <= add_ln344_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                add_ln351_1_reg_1341 <= add_ln351_1_fu_1028_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln351_reg_1387 <= add_ln351_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln9_reg_1233 <= add_ln9_fu_896_p2;
                    zext_ln9_1_reg_1243(2 downto 0) <= zext_ln9_1_fu_906_p1(2 downto 0);
                    zext_ln9_reg_1238(2 downto 0) <= zext_ln9_fu_902_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                and_ln34_reg_1195 <= and_ln34_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                col_V_3_1_fu_174 <= col_V_3_9_fu_868_p3;
                col_V_3_2_fu_178 <= col_V_3_8_fu_860_p3;
                col_V_3_3_fu_182 <= col_V_3_6_fu_844_p3;
                col_V_3_4_fu_186 <= col_V_3_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_1))) then
                col_V_3_1_load_1_reg_1299 <= col_V_3_1_fu_174;
                col_V_3_2_load_1_reg_1304 <= col_V_3_2_fu_178;
                col_V_3_3_load_1_reg_1309 <= col_V_3_3_fu_182;
                col_V_3_4_load_1_reg_1314 <= col_V_3_4_fu_186;
                icmp_ln435_reg_1319 <= icmp_ln435_fu_1005_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                col_idx_reg_1268 <= y_rowind_RDATA;
                y_data_addr_read_reg_1273 <= y_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                compare_reg_1190 <= x_colind_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                end_idx_1_reg_1228 <= y_colptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                end_idx_reg_1150 <= x_rowptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln9_fu_910_p2 = ap_const_lv1_0))) then
                icmp_ln16_reg_1251 <= icmp_ln16_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln28_fu_741_p2 = ap_const_lv1_0))) then
                icmp_ln34_reg_1168 <= icmp_ln34_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                j_5_reg_1218 <= j_5_fu_792_p3;
                trunc_ln34_reg_1211 <= trunc_ln34_fu_782_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                partial_z_colind_load_reg_1405 <= partial_z_colind_q0;
                partial_z_data_V_load_reg_1410 <= partial_z_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                partial_z_rowptr_load_reg_1382 <= partial_z_rowptr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                sext_ln33_reg_1179 <= sext_ln33_fu_757_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                start_idx_1_reg_1223 <= y_colptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                start_idx_reg_1145 <= x_rowptr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                temp_colind_load_reg_1359 <= temp_colind_q0;
                temp_data_V_load_reg_1364 <= temp_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                temp_rowptr_load_reg_1336 <= temp_rowptr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                x_data_addr_read_reg_1206 <= x_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln34_fu_772_p2) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                x_data_addr_reg_1200 <= sext_ln33_reg_1179;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln28_fu_741_p2 = ap_const_lv1_1))) then
                    y_colptr_addr_reg_1173(2 downto 0) <= zext_ln399_reg_1134(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln399_reg_1134(2 downto 0) <= zext_ln399_fu_720_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln399_reg_1134(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_1160(31 downto 3) <= "00000000000000000000000000000";
    y_colptr_addr_reg_1173(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln9_reg_1238(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln9_1_reg_1243(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln399_reg_1130, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state53, ap_CS_fsm_state57, icmp_ln435_reg_1319, ap_CS_fsm_state84, ap_CS_fsm_state79, ap_CS_fsm_state60, ap_CS_fsm_state68, ap_CS_fsm_state63, ap_CS_fsm_state80, ap_CS_fsm_state87, ap_CS_fsm_state64, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state92, x_rowptr_RVALID, x_colind_ARREADY, x_colind_RVALID, x_data_ARREADY, x_data_RVALID, y_colptr_ARREADY, y_colptr_RVALID, y_rowind_RVALID, y_data_RVALID, z_rowptr_AWREADY, z_rowptr_WREADY, z_rowptr_BVALID, z_colind_BVALID, z_data_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state16, icmp_ln28_fu_741_p2, and_ln34_fu_772_p2, ap_CS_fsm_state25, ap_CS_fsm_state45, icmp_ln9_fu_910_p2, ap_CS_fsm_state55, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, ap_CS_fsm_state61, icmp_ln344_1_fu_1022_p2, ap_CS_fsm_state69, icmp_ln351_1_fu_1040_p2, ap_CS_fsm_state77, icmp_ln344_fu_1057_p2, ap_CS_fsm_state85, icmp_ln351_fu_1075_p2, grp_accumulate_fu_629_ap_done, grp_multiply_row_col_fu_645_ap_done, icmp_ln325_fu_679_p2, icmp_ln332_fu_696_p2, icmp_ln325_1_fu_981_p2, ap_block_state71_io, ap_block_state57_io, ap_block_state87_io, ap_CS_fsm_state59, ap_block_state7_io, ap_block_state46_io, ap_block_state64_io, ap_block_state80_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln325_fu_679_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln332_fu_696_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln399_reg_1130 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln399_reg_1130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln28_fu_741_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((x_colind_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((x_colind_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_lv1_0 = and_ln34_fu_772_p2) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((x_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((x_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (y_colptr_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (y_colptr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (y_colptr_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln9_fu_910_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_boolean_0 = ap_block_state46_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if ((not(((y_data_RVALID = ap_const_logic_0) or (y_rowind_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln325_1_fu_981_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                if ((not(((grp_multiply_row_col_fu_645_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state57_io))) and (icmp_ln435_reg_1319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                elsif ((not(((grp_multiply_row_col_fu_645_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state57_io))) and (icmp_ln435_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_accumulate_fu_629_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (z_rowptr_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (icmp_ln344_1_fu_1022_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (z_rowptr_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (z_rowptr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (icmp_ln351_1_fu_1040_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_boolean_0 = ap_block_state71_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if ((not((((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_colind_BVALID = ap_const_logic_0)) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_data_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln344_fu_1057_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (z_rowptr_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_const_boolean_0 = ap_block_state80_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (z_rowptr_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (icmp_ln351_fu_1075_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (ap_const_boolean_0 = ap_block_state87_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if ((not(((z_data_BVALID = ap_const_logic_0) or (z_colind_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_708_p2 <= std_logic_vector(unsigned(i_11_reg_497) + unsigned(ap_const_lv3_1));
    add_ln28_fu_731_p2 <= std_logic_vector(unsigned(i_3_reg_509) + unsigned(ap_const_lv3_1));
    add_ln325_1_fu_970_p2 <= std_logic_vector(unsigned(i_5_reg_563) + unsigned(ap_const_lv3_1));
    add_ln325_fu_673_p2 <= std_logic_vector(unsigned(i_reg_475) + unsigned(ap_const_lv3_1));
    add_ln332_1_fu_987_p2 <= std_logic_vector(unsigned(i_6_reg_574) + unsigned(ap_const_lv5_1));
    add_ln332_fu_690_p2 <= std_logic_vector(unsigned(i_1_reg_486) + unsigned(ap_const_lv5_1));
    add_ln344_1_fu_1011_p2 <= std_logic_vector(unsigned(i_8_reg_585) + unsigned(ap_const_lv3_1));
    add_ln344_fu_1046_p2 <= std_logic_vector(unsigned(i_7_reg_607) + unsigned(ap_const_lv3_1));
    add_ln351_1_fu_1028_p2 <= std_logic_vector(unsigned(i_10_reg_596) + unsigned(ap_const_lv5_1));
    add_ln351_fu_1063_p2 <= std_logic_vector(unsigned(i_9_reg_618) + unsigned(ap_const_lv5_1));
    add_ln9_fu_896_p2 <= std_logic_vector(unsigned(i_4_reg_542) + unsigned(ap_const_lv3_1));
    and_ln16_fu_943_p2 <= (icmp_ln16_reg_1251 and icmp_ln16_1_fu_939_p2);
    and_ln34_fu_772_p2 <= (icmp_ln34_reg_1168 and icmp_ln34_1_fu_768_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);

    ap_block_state46_io_assign_proc : process(y_rowind_ARREADY, y_data_ARREADY)
    begin
                ap_block_state46_io <= ((y_data_ARREADY = ap_const_logic_0) or (y_rowind_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state53_assign_proc : process(y_rowind_RVALID, y_data_RVALID)
    begin
                ap_block_state53 <= ((y_data_RVALID = ap_const_logic_0) or (y_rowind_RVALID = ap_const_logic_0));
    end process;


    ap_block_state57_io_assign_proc : process(icmp_ln435_reg_1319, z_rowptr_AWREADY)
    begin
                ap_block_state57_io <= ((icmp_ln435_reg_1319 = ap_const_lv1_1) and (z_rowptr_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state64_io_assign_proc : process(z_colind_AWREADY, z_data_AWREADY)
    begin
                ap_block_state64_io <= ((z_data_AWREADY = ap_const_logic_0) or (z_colind_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state71_io_assign_proc : process(z_colind_WREADY, z_data_WREADY)
    begin
                ap_block_state71_io <= ((z_data_WREADY = ap_const_logic_0) or (z_colind_WREADY = ap_const_logic_0));
    end process;


    ap_block_state76_assign_proc : process(icmp_ln435_reg_1319, z_colind_BVALID, z_data_BVALID)
    begin
                ap_block_state76 <= (((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_colind_BVALID = ap_const_logic_0)) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_data_BVALID = ap_const_logic_0)));
    end process;


    ap_block_state7_io_assign_proc : process(icmp_ln399_reg_1130, x_rowptr_ARREADY)
    begin
                ap_block_state7_io <= ((x_rowptr_ARREADY = ap_const_logic_0) and (icmp_ln399_reg_1130 = ap_const_lv1_0));
    end process;


    ap_block_state80_io_assign_proc : process(z_colind_AWREADY, z_data_AWREADY)
    begin
                ap_block_state80_io <= ((z_data_AWREADY = ap_const_logic_0) or (z_colind_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state87_io_assign_proc : process(z_colind_WREADY, z_data_WREADY)
    begin
                ap_block_state87_io <= ((z_data_WREADY = ap_const_logic_0) or (z_colind_WREADY = ap_const_logic_0));
    end process;


    ap_block_state92_assign_proc : process(z_colind_BVALID, z_data_BVALID)
    begin
                ap_block_state92 <= ((z_data_BVALID = ap_const_logic_0) or (z_colind_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, icmp_ln399_reg_1130, ap_block_state7_io)
    begin
        if (((icmp_ln399_reg_1130 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln399_reg_1130, ap_block_state7_io)
    begin
        if (((icmp_ln399_reg_1130 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_V_3_6_fu_844_p3 <= 
        col_V_3_3_fu_182 when (or_ln34_fu_814_p2(0) = '1') else 
        select_ln34_2_fu_836_p3;
    col_V_3_7_fu_852_p3 <= 
        col_V_0_reg_531 when (icmp_ln34_3_fu_804_p2(0) = '1') else 
        col_V_3_2_fu_178;
    col_V_3_8_fu_860_p3 <= 
        col_V_3_2_fu_178 when (icmp_ln34_4_fu_809_p2(0) = '1') else 
        col_V_3_7_fu_852_p3;
    col_V_3_9_fu_868_p3 <= 
        col_V_0_reg_531 when (icmp_ln34_4_fu_809_p2(0) = '1') else 
        col_V_3_1_fu_174;
    col_V_3_fu_828_p3 <= 
        col_V_3_4_fu_186 when (or_ln34_fu_814_p2(0) = '1') else 
        select_ln34_fu_820_p3;
    grp_accumulate_fu_629_ap_start <= grp_accumulate_fu_629_ap_start_reg;
    grp_multiply_row_col_fu_645_ap_start <= grp_multiply_row_col_fu_645_ap_start_reg;
    i_1_cast_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_486),64));
    i_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_475),64));
    icmp_ln16_1_fu_939_p2 <= "1" when (col_idx_reg_1268 = zext_ln9_1_reg_1243) else "0";
    icmp_ln16_fu_916_p2 <= "1" when (signed(j_3_reg_553) < signed(end_idx_1_reg_1228)) else "0";
    icmp_ln28_fu_741_p2 <= "1" when (i_3_reg_509 = ap_const_lv3_4) else "0";
    icmp_ln325_1_fu_981_p2 <= "1" when (i_5_reg_563 = ap_const_lv3_5) else "0";
    icmp_ln325_fu_679_p2 <= "1" when (i_reg_475 = ap_const_lv3_5) else "0";
    icmp_ln332_1_fu_999_p2 <= "1" when (i_6_reg_574 = ap_const_lv5_14) else "0";
    icmp_ln332_fu_696_p2 <= "1" when (i_1_reg_486 = ap_const_lv5_14) else "0";
    icmp_ln344_1_fu_1022_p2 <= "1" when (i_8_reg_585 = ap_const_lv3_5) else "0";
    icmp_ln344_fu_1057_p2 <= "1" when (i_7_reg_607 = ap_const_lv3_5) else "0";
    icmp_ln34_1_fu_768_p2 <= "1" when (compare_reg_1190 = zext_ln28_reg_1160) else "0";
    icmp_ln34_2_fu_799_p2 <= "1" when (trunc_ln34_reg_1211 = ap_const_lv2_2) else "0";
    icmp_ln34_3_fu_804_p2 <= "1" when (trunc_ln34_reg_1211 = ap_const_lv2_1) else "0";
    icmp_ln34_4_fu_809_p2 <= "1" when (trunc_ln34_reg_1211 = ap_const_lv2_0) else "0";
    icmp_ln34_fu_747_p2 <= "1" when (signed(j_2_reg_521) < signed(end_idx_reg_1150)) else "0";
    icmp_ln351_1_fu_1040_p2 <= "1" when (i_10_reg_596 = ap_const_lv5_14) else "0";
    icmp_ln351_fu_1075_p2 <= "1" when (i_9_reg_618 = ap_const_lv5_14) else "0";
    icmp_ln399_fu_714_p2 <= "1" when (i_11_reg_497 = ap_const_lv3_6) else "0";
    icmp_ln435_fu_1005_p2 <= "1" when (i_11_reg_497 = ap_const_lv3_0) else "0";
    icmp_ln9_fu_910_p2 <= "1" when (i_4_reg_542 = ap_const_lv3_5) else "0";
    j_4_fu_786_p2 <= std_logic_vector(signed(j_2_reg_521) + signed(ap_const_lv32_1));
    j_5_fu_792_p3 <= 
        j_4_fu_786_p2 when (and_ln34_reg_1195(0) = '1') else 
        j_2_reg_521;
    j_6_fu_956_p2 <= std_logic_vector(signed(j_3_reg_553) + signed(ap_const_lv32_1));
    j_7_fu_962_p3 <= 
        j_6_fu_956_p2 when (and_ln16_fu_943_p2(0) = '1') else 
        j_3_reg_553;
    or_ln34_fu_814_p2 <= (icmp_ln34_4_fu_809_p2 or icmp_ln34_3_fu_804_p2);

    partial_z_colind_address0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, ap_CS_fsm_state85, grp_accumulate_fu_629_csr2_colind_address0, grp_multiply_row_col_fu_645_out_colind_address0, ap_CS_fsm_state59, zext_ln332_fu_993_p1, zext_ln351_fu_1069_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            partial_z_colind_address0 <= zext_ln351_fu_1069_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_colind_address0 <= zext_ln332_fu_993_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_colind_address0 <= grp_multiply_row_col_fu_645_out_colind_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_colind_address0 <= grp_accumulate_fu_629_csr2_colind_address0;
        else 
            partial_z_colind_address0 <= "XXXXX";
        end if; 
    end process;


    partial_z_colind_ce0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, ap_CS_fsm_state85, grp_accumulate_fu_629_csr2_colind_ce0, grp_multiply_row_col_fu_645_out_colind_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0)))) then 
            partial_z_colind_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_colind_ce0 <= grp_multiply_row_col_fu_645_out_colind_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_colind_ce0 <= grp_accumulate_fu_629_csr2_colind_ce0;
        else 
            partial_z_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_colind_d0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, grp_multiply_row_col_fu_645_out_colind_d0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_colind_d0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_colind_d0 <= grp_multiply_row_col_fu_645_out_colind_d0;
        else 
            partial_z_colind_d0 <= "XXX";
        end if; 
    end process;


    partial_z_colind_we0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, grp_multiply_row_col_fu_645_out_colind_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_colind_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_colind_we0 <= grp_multiply_row_col_fu_645_out_colind_we0;
        else 
            partial_z_colind_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_data_V_address0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, ap_CS_fsm_state85, grp_accumulate_fu_629_csr2_data_address0, grp_multiply_row_col_fu_645_out_data_address0, ap_CS_fsm_state59, zext_ln332_fu_993_p1, zext_ln351_fu_1069_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            partial_z_data_V_address0 <= zext_ln351_fu_1069_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_data_V_address0 <= zext_ln332_fu_993_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_data_V_address0 <= grp_multiply_row_col_fu_645_out_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_data_V_address0 <= grp_accumulate_fu_629_csr2_data_address0;
        else 
            partial_z_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    partial_z_data_V_ce0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, ap_CS_fsm_state85, grp_accumulate_fu_629_csr2_data_ce0, grp_multiply_row_col_fu_645_out_data_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0)))) then 
            partial_z_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_data_V_ce0 <= grp_multiply_row_col_fu_645_out_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_data_V_ce0 <= grp_accumulate_fu_629_csr2_data_ce0;
        else 
            partial_z_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_data_V_d0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, grp_multiply_row_col_fu_645_out_data_d0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_data_V_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_data_V_d0 <= grp_multiply_row_col_fu_645_out_data_d0;
        else 
            partial_z_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_z_data_V_we0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state56, icmp_ln332_1_fu_999_p2, grp_multiply_row_col_fu_645_out_data_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln332_1_fu_999_p2 = ap_const_lv1_0))) then 
            partial_z_data_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_data_V_we0 <= grp_multiply_row_col_fu_645_out_data_we0;
        else 
            partial_z_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_address0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state55, ap_CS_fsm_state77, grp_accumulate_fu_629_csr2_rowptr_address0, grp_multiply_row_col_fu_645_out_rowptr_address0, ap_CS_fsm_state59, zext_ln325_fu_976_p1, zext_ln344_fu_1052_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            partial_z_rowptr_address0 <= zext_ln344_fu_1052_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            partial_z_rowptr_address0 <= zext_ln325_fu_976_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_rowptr_address0 <= grp_multiply_row_col_fu_645_out_rowptr_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_rowptr_address0 <= grp_accumulate_fu_629_csr2_rowptr_address0;
        else 
            partial_z_rowptr_address0 <= "XXX";
        end if; 
    end process;


    partial_z_rowptr_ce0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state55, ap_CS_fsm_state77, grp_accumulate_fu_629_csr2_rowptr_ce0, grp_multiply_row_col_fu_645_out_rowptr_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            partial_z_rowptr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_rowptr_ce0 <= grp_multiply_row_col_fu_645_out_rowptr_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_rowptr_ce0 <= grp_accumulate_fu_629_csr2_rowptr_ce0;
        else 
            partial_z_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_ce1_assign_proc : process(grp_accumulate_fu_629_csr2_rowptr_ce1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            partial_z_rowptr_ce1 <= grp_accumulate_fu_629_csr2_rowptr_ce1;
        else 
            partial_z_rowptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_z_rowptr_d0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state55, grp_multiply_row_col_fu_645_out_rowptr_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            partial_z_rowptr_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_rowptr_d0 <= grp_multiply_row_col_fu_645_out_rowptr_d0;
        else 
            partial_z_rowptr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_z_rowptr_we0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state55, grp_multiply_row_col_fu_645_out_rowptr_we0, icmp_ln325_1_fu_981_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (icmp_ln325_1_fu_981_p2 = ap_const_lv1_0))) then 
            partial_z_rowptr_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            partial_z_rowptr_we0 <= grp_multiply_row_col_fu_645_out_rowptr_we0;
        else 
            partial_z_rowptr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_V_address0_assign_proc : process(ap_CS_fsm_state57, zext_ln9_reg_1238, ap_CS_fsm_state54, grp_multiply_row_col_fu_645_row_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            row_V_address0 <= zext_ln9_reg_1238(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            row_V_address0 <= grp_multiply_row_col_fu_645_row_address0;
        else 
            row_V_address0 <= "XXX";
        end if; 
    end process;


    row_V_ce0_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state54, grp_multiply_row_col_fu_645_row_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            row_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            row_V_ce0 <= grp_multiply_row_col_fu_645_row_ce0;
        else 
            row_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_V_d0 <= 
        y_data_addr_read_reg_1273 when (and_ln16_fu_943_p2(0) = '1') else 
        ap_const_lv32_0;

    row_V_we0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            row_V_we0 <= ap_const_logic_1;
        else 
            row_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_2_fu_836_p3 <= 
        col_V_0_reg_531 when (icmp_ln34_2_fu_799_p2(0) = '1') else 
        col_V_3_3_fu_182;
    select_ln34_fu_820_p3 <= 
        col_V_3_4_fu_186 when (icmp_ln34_2_fu_799_p2(0) = '1') else 
        col_V_0_reg_531;
        sext_ln14_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_3_reg_553),64));

        sext_ln33_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_2_reg_521),64));


    temp_colind_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state69, grp_accumulate_fu_629_out_csr_colind_address0, ap_CS_fsm_state59, i_1_cast_fu_702_p1, zext_ln351_1_fu_1034_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            temp_colind_address0 <= zext_ln351_1_fu_1034_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_colind_address0 <= i_1_cast_fu_702_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_colind_address0 <= grp_accumulate_fu_629_out_csr_colind_address0;
        else 
            temp_colind_address0 <= "XXXXX";
        end if; 
    end process;


    temp_colind_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state69, grp_accumulate_fu_629_out_csr_colind_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp_colind_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_colind_ce0 <= grp_accumulate_fu_629_out_csr_colind_ce0;
        else 
            temp_colind_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_colind_d0_assign_proc : process(ap_CS_fsm_state4, grp_accumulate_fu_629_out_csr_colind_d0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_colind_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_colind_d0 <= grp_accumulate_fu_629_out_csr_colind_d0;
        else 
            temp_colind_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_colind_we0_assign_proc : process(ap_CS_fsm_state4, grp_accumulate_fu_629_out_csr_colind_we0, icmp_ln332_fu_696_p2, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln332_fu_696_p2 = ap_const_lv1_0))) then 
            temp_colind_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_colind_we0 <= grp_accumulate_fu_629_out_csr_colind_we0;
        else 
            temp_colind_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_data_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state69, grp_accumulate_fu_629_out_csr_data_address0, ap_CS_fsm_state59, i_1_cast_fu_702_p1, zext_ln351_1_fu_1034_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            temp_data_V_address0 <= zext_ln351_1_fu_1034_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_data_V_address0 <= i_1_cast_fu_702_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_data_V_address0 <= grp_accumulate_fu_629_out_csr_data_address0;
        else 
            temp_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    temp_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state69, grp_accumulate_fu_629_out_csr_data_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_data_V_ce0 <= grp_accumulate_fu_629_out_csr_data_ce0;
        else 
            temp_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_data_V_d0_assign_proc : process(ap_CS_fsm_state4, grp_accumulate_fu_629_out_csr_data_d0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_data_V_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_data_V_d0 <= grp_accumulate_fu_629_out_csr_data_d0;
        else 
            temp_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_data_V_we0_assign_proc : process(ap_CS_fsm_state4, grp_accumulate_fu_629_out_csr_data_we0, icmp_ln332_fu_696_p2, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln332_fu_696_p2 = ap_const_lv1_0))) then 
            temp_data_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_data_V_we0 <= grp_accumulate_fu_629_out_csr_data_we0;
        else 
            temp_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_rowptr_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state61, grp_accumulate_fu_629_out_csr_rowptr_address0, ap_CS_fsm_state59, i_cast_fu_685_p1, zext_ln344_1_fu_1017_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            temp_rowptr_address0 <= zext_ln344_1_fu_1017_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_rowptr_address0 <= i_cast_fu_685_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_rowptr_address0 <= grp_accumulate_fu_629_out_csr_rowptr_address0;
        else 
            temp_rowptr_address0 <= "XXX";
        end if; 
    end process;


    temp_rowptr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state61, grp_accumulate_fu_629_out_csr_rowptr_ce0, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_rowptr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_rowptr_ce0 <= grp_accumulate_fu_629_out_csr_rowptr_ce0;
        else 
            temp_rowptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_rowptr_d0_assign_proc : process(ap_CS_fsm_state2, grp_accumulate_fu_629_out_csr_rowptr_d0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_rowptr_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_rowptr_d0 <= grp_accumulate_fu_629_out_csr_rowptr_d0;
        else 
            temp_rowptr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_rowptr_we0_assign_proc : process(ap_CS_fsm_state2, grp_accumulate_fu_629_out_csr_rowptr_we0, icmp_ln325_fu_679_p2, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln325_fu_679_p2 = ap_const_lv1_0))) then 
            temp_rowptr_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            temp_rowptr_we0 <= grp_accumulate_fu_629_out_csr_rowptr_we0;
        else 
            temp_rowptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln34_fu_782_p1 <= i_3_reg_509(2 - 1 downto 0);

    x_colind_ARVALID_assign_proc : process(ap_CS_fsm_state17, x_colind_ARREADY)
    begin
        if (((x_colind_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x_colind_ARVALID <= ap_const_logic_1;
        else 
            x_colind_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    x_colind_RREADY_assign_proc : process(ap_CS_fsm_state24, x_colind_RVALID)
    begin
        if (((x_colind_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            x_colind_RREADY <= ap_const_logic_1;
        else 
            x_colind_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    x_colind_blk_n_AR_assign_proc : process(m_axi_x_colind_ARREADY, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x_colind_blk_n_AR <= m_axi_x_colind_ARREADY;
        else 
            x_colind_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    x_colind_blk_n_R_assign_proc : process(m_axi_x_colind_RVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x_colind_blk_n_R <= m_axi_x_colind_RVALID;
        else 
            x_colind_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    x_data_ARVALID_assign_proc : process(ap_CS_fsm_state26, x_data_ARREADY)
    begin
        if (((x_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            x_data_ARVALID <= ap_const_logic_1;
        else 
            x_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    x_data_RREADY_assign_proc : process(ap_CS_fsm_state33, x_data_RVALID)
    begin
        if (((x_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            x_data_RREADY <= ap_const_logic_1;
        else 
            x_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    x_data_blk_n_AR_assign_proc : process(m_axi_x_data_ARREADY, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x_data_blk_n_AR <= m_axi_x_data_ARREADY;
        else 
            x_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    x_data_blk_n_R_assign_proc : process(m_axi_x_data_RVALID, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x_data_blk_n_R <= m_axi_x_data_RVALID;
        else 
            x_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    x_rowptr_ARVALID_assign_proc : process(ap_CS_fsm_state7, icmp_ln399_reg_1130, ap_block_state7_io)
    begin
        if (((icmp_ln399_reg_1130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            x_rowptr_ARVALID <= ap_const_logic_1;
        else 
            x_rowptr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    x_rowptr_RREADY_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, x_rowptr_RVALID)
    begin
        if ((((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((x_rowptr_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            x_rowptr_RREADY <= ap_const_logic_1;
        else 
            x_rowptr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    x_rowptr_blk_n_AR_assign_proc : process(m_axi_x_rowptr_ARREADY, ap_CS_fsm_state7, icmp_ln399_reg_1130)
    begin
        if (((icmp_ln399_reg_1130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x_rowptr_blk_n_AR <= m_axi_x_rowptr_ARREADY;
        else 
            x_rowptr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    x_rowptr_blk_n_R_assign_proc : process(m_axi_x_rowptr_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            x_rowptr_blk_n_R <= m_axi_x_rowptr_RVALID;
        else 
            x_rowptr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    y_colptr_ARVALID_assign_proc : process(ap_CS_fsm_state36, y_colptr_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (y_colptr_ARREADY = ap_const_logic_1))) then 
            y_colptr_ARVALID <= ap_const_logic_1;
        else 
            y_colptr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    y_colptr_RREADY_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, y_colptr_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state44) and (y_colptr_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (y_colptr_RVALID = ap_const_logic_1)))) then 
            y_colptr_RREADY <= ap_const_logic_1;
        else 
            y_colptr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    y_colptr_blk_n_AR_assign_proc : process(m_axi_y_colptr_ARREADY, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_colptr_blk_n_AR <= m_axi_y_colptr_ARREADY;
        else 
            y_colptr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    y_colptr_blk_n_R_assign_proc : process(m_axi_y_colptr_RVALID, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            y_colptr_blk_n_R <= m_axi_y_colptr_RVALID;
        else 
            y_colptr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    y_data_ARVALID_assign_proc : process(ap_CS_fsm_state46, ap_block_state46_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_boolean_0 = ap_block_state46_io))) then 
            y_data_ARVALID <= ap_const_logic_1;
        else 
            y_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    y_data_RREADY_assign_proc : process(ap_CS_fsm_state53, y_rowind_RVALID, y_data_RVALID)
    begin
        if ((not(((y_data_RVALID = ap_const_logic_0) or (y_rowind_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            y_data_RREADY <= ap_const_logic_1;
        else 
            y_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    y_data_blk_n_AR_assign_proc : process(m_axi_y_data_ARREADY, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            y_data_blk_n_AR <= m_axi_y_data_ARREADY;
        else 
            y_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    y_data_blk_n_R_assign_proc : process(m_axi_y_data_RVALID, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            y_data_blk_n_R <= m_axi_y_data_RVALID;
        else 
            y_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    y_rowind_ARVALID_assign_proc : process(ap_CS_fsm_state46, ap_block_state46_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_boolean_0 = ap_block_state46_io))) then 
            y_rowind_ARVALID <= ap_const_logic_1;
        else 
            y_rowind_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    y_rowind_RREADY_assign_proc : process(ap_CS_fsm_state53, y_rowind_RVALID, y_data_RVALID)
    begin
        if ((not(((y_data_RVALID = ap_const_logic_0) or (y_rowind_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            y_rowind_RREADY <= ap_const_logic_1;
        else 
            y_rowind_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    y_rowind_blk_n_AR_assign_proc : process(m_axi_y_rowind_ARREADY, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            y_rowind_blk_n_AR <= m_axi_y_rowind_ARREADY;
        else 
            y_rowind_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    y_rowind_blk_n_R_assign_proc : process(m_axi_y_rowind_RVALID, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            y_rowind_blk_n_R <= m_axi_y_rowind_RVALID;
        else 
            y_rowind_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    z_colind_ARVALID_assign_proc : process(grp_accumulate_fu_629_m_axi_z_colind_ARVALID, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_colind_ARVALID <= grp_accumulate_fu_629_m_axi_z_colind_ARVALID;
        else 
            z_colind_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_colind_AWVALID_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state64, ap_block_state64_io, ap_block_state80_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_io)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_const_boolean_0 = ap_block_state80_io)))) then 
            z_colind_AWVALID <= ap_const_logic_1;
        else 
            z_colind_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_colind_BREADY_assign_proc : process(icmp_ln435_reg_1319, ap_CS_fsm_state76, ap_CS_fsm_state92, z_colind_BVALID, z_data_BVALID)
    begin
        if (((not(((z_data_BVALID = ap_const_logic_0) or (z_colind_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92)) or (not((((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_colind_BVALID = ap_const_logic_0)) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_data_BVALID = ap_const_logic_0)))) and (icmp_ln435_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            z_colind_BREADY <= ap_const_logic_1;
        else 
            z_colind_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_colind_RREADY_assign_proc : process(grp_accumulate_fu_629_m_axi_z_colind_RREADY, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_colind_RREADY <= grp_accumulate_fu_629_m_axi_z_colind_RREADY;
        else 
            z_colind_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_colind_WDATA_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state71, temp_colind_load_reg_1359, zext_ln356_fu_1081_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_colind_WDATA <= zext_ln356_fu_1081_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            z_colind_WDATA <= temp_colind_load_reg_1359;
        else 
            z_colind_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_colind_WVALID_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state71, ap_block_state71_io, ap_block_state87_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_boolean_0 = ap_block_state71_io)) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (ap_const_boolean_0 = ap_block_state87_io)))) then 
            z_colind_WVALID <= ap_const_logic_1;
        else 
            z_colind_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_colind_blk_n_AW_assign_proc : process(m_axi_z_colind_AWREADY, ap_CS_fsm_state80, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            z_colind_blk_n_AW <= m_axi_z_colind_AWREADY;
        else 
            z_colind_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    z_colind_blk_n_B_assign_proc : process(m_axi_z_colind_BVALID, icmp_ln435_reg_1319, ap_CS_fsm_state76, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            z_colind_blk_n_B <= m_axi_z_colind_BVALID;
        else 
            z_colind_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    z_colind_blk_n_W_assign_proc : process(m_axi_z_colind_WREADY, ap_CS_fsm_state87, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            z_colind_blk_n_W <= m_axi_z_colind_WREADY;
        else 
            z_colind_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    z_data_ARVALID_assign_proc : process(grp_accumulate_fu_629_m_axi_z_data_ARVALID, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_data_ARVALID <= grp_accumulate_fu_629_m_axi_z_data_ARVALID;
        else 
            z_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_data_AWVALID_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state64, ap_block_state64_io, ap_block_state80_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_io)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_const_boolean_0 = ap_block_state80_io)))) then 
            z_data_AWVALID <= ap_const_logic_1;
        else 
            z_data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_data_BREADY_assign_proc : process(icmp_ln435_reg_1319, ap_CS_fsm_state76, ap_CS_fsm_state92, z_colind_BVALID, z_data_BVALID)
    begin
        if (((not(((z_data_BVALID = ap_const_logic_0) or (z_colind_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state92)) or (not((((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_colind_BVALID = ap_const_logic_0)) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (z_data_BVALID = ap_const_logic_0)))) and (icmp_ln435_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            z_data_BREADY <= ap_const_logic_1;
        else 
            z_data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_data_RREADY_assign_proc : process(grp_accumulate_fu_629_m_axi_z_data_RREADY, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_data_RREADY <= grp_accumulate_fu_629_m_axi_z_data_RREADY;
        else 
            z_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_data_WDATA_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state71, temp_data_V_load_reg_1364, partial_z_data_V_load_reg_1410)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            z_data_WDATA <= partial_z_data_V_load_reg_1410;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            z_data_WDATA <= temp_data_V_load_reg_1364;
        else 
            z_data_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_data_WVALID_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state71, ap_block_state71_io, ap_block_state87_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_boolean_0 = ap_block_state71_io)) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (ap_const_boolean_0 = ap_block_state87_io)))) then 
            z_data_WVALID <= ap_const_logic_1;
        else 
            z_data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_data_blk_n_AW_assign_proc : process(m_axi_z_data_AWREADY, ap_CS_fsm_state80, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            z_data_blk_n_AW <= m_axi_z_data_AWREADY;
        else 
            z_data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    z_data_blk_n_B_assign_proc : process(m_axi_z_data_BVALID, icmp_ln435_reg_1319, ap_CS_fsm_state76, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or ((icmp_ln435_reg_1319 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            z_data_blk_n_B <= m_axi_z_data_BVALID;
        else 
            z_data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    z_data_blk_n_W_assign_proc : process(m_axi_z_data_WREADY, ap_CS_fsm_state87, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            z_data_blk_n_W <= m_axi_z_data_WREADY;
        else 
            z_data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    z_rowptr_ARVALID_assign_proc : process(grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_rowptr_ARVALID <= grp_accumulate_fu_629_m_axi_z_rowptr_ARVALID;
        else 
            z_rowptr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_rowptr_AWVALID_assign_proc : process(ap_CS_fsm_state57, icmp_ln435_reg_1319, ap_CS_fsm_state60, z_rowptr_AWREADY, grp_multiply_row_col_fu_645_ap_done, ap_block_state57_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state60) and (z_rowptr_AWREADY = ap_const_logic_1)) or (not(((grp_multiply_row_col_fu_645_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state57_io))) and (icmp_ln435_reg_1319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            z_rowptr_AWVALID <= ap_const_logic_1;
        else 
            z_rowptr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_rowptr_BREADY_assign_proc : process(ap_CS_fsm_state84, ap_CS_fsm_state68, z_rowptr_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state68) and (z_rowptr_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (z_rowptr_BVALID = ap_const_logic_1)))) then 
            z_rowptr_BREADY <= ap_const_logic_1;
        else 
            z_rowptr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_rowptr_RREADY_assign_proc : process(grp_accumulate_fu_629_m_axi_z_rowptr_RREADY, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            z_rowptr_RREADY <= grp_accumulate_fu_629_m_axi_z_rowptr_RREADY;
        else 
            z_rowptr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    z_rowptr_WDATA_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state63, temp_rowptr_load_reg_1336, partial_z_rowptr_load_reg_1382)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            z_rowptr_WDATA <= partial_z_rowptr_load_reg_1382;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            z_rowptr_WDATA <= temp_rowptr_load_reg_1336;
        else 
            z_rowptr_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_rowptr_WVALID_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state63, z_rowptr_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state63) and (z_rowptr_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (z_rowptr_WREADY = ap_const_logic_1)))) then 
            z_rowptr_WVALID <= ap_const_logic_1;
        else 
            z_rowptr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    z_rowptr_blk_n_AW_assign_proc : process(m_axi_z_rowptr_AWREADY, ap_CS_fsm_state57, icmp_ln435_reg_1319, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or ((icmp_ln435_reg_1319 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            z_rowptr_blk_n_AW <= m_axi_z_rowptr_AWREADY;
        else 
            z_rowptr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    z_rowptr_blk_n_B_assign_proc : process(m_axi_z_rowptr_BVALID, ap_CS_fsm_state84, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            z_rowptr_blk_n_B <= m_axi_z_rowptr_BVALID;
        else 
            z_rowptr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    z_rowptr_blk_n_W_assign_proc : process(m_axi_z_rowptr_WREADY, ap_CS_fsm_state79, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            z_rowptr_blk_n_W <= m_axi_z_rowptr_WREADY;
        else 
            z_rowptr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln28_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_509),32));
    zext_ln325_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_563),64));
    zext_ln332_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_574),64));
    zext_ln344_1_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_585),64));
    zext_ln344_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_607),64));
    zext_ln351_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_596),64));
    zext_ln351_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_618),64));
    zext_ln356_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partial_z_colind_load_reg_1405),32));
    zext_ln399_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_497),64));
    zext_ln9_1_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_542),32));
    zext_ln9_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_542),64));
end behav;
