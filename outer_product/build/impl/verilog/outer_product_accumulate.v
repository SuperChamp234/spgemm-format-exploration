// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module outer_product_accumulate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY,
        m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY,
        m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST,
        m_axi_z_rowptr_RID,
        m_axi_z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID,
        m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP,
        m_axi_z_rowptr_BID,
        m_axi_z_rowptr_BUSER,
        m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY,
        m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY,
        m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST,
        m_axi_z_colind_WID,
        m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY,
        m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID,
        m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA,
        m_axi_z_colind_RLAST,
        m_axi_z_colind_RID,
        m_axi_z_colind_RUSER,
        m_axi_z_colind_RRESP,
        m_axi_z_colind_BVALID,
        m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP,
        m_axi_z_colind_BID,
        m_axi_z_colind_BUSER,
        m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY,
        m_axi_z_data_AWADDR,
        m_axi_z_data_AWID,
        m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID,
        m_axi_z_data_WREADY,
        m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST,
        m_axi_z_data_WID,
        m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY,
        m_axi_z_data_ARADDR,
        m_axi_z_data_ARID,
        m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID,
        m_axi_z_data_RREADY,
        m_axi_z_data_RDATA,
        m_axi_z_data_RLAST,
        m_axi_z_data_RID,
        m_axi_z_data_RUSER,
        m_axi_z_data_RRESP,
        m_axi_z_data_BVALID,
        m_axi_z_data_BREADY,
        m_axi_z_data_BRESP,
        m_axi_z_data_BID,
        m_axi_z_data_BUSER,
        csr2_rowptr_address0,
        csr2_rowptr_ce0,
        csr2_rowptr_q0,
        csr2_rowptr_address1,
        csr2_rowptr_ce1,
        csr2_rowptr_q1,
        csr2_colind_address0,
        csr2_colind_ce0,
        csr2_colind_q0,
        csr2_data_address0,
        csr2_data_ce0,
        csr2_data_q0,
        out_csr_rowptr_address0,
        out_csr_rowptr_ce0,
        out_csr_rowptr_we0,
        out_csr_rowptr_d0,
        out_csr_colind_address0,
        out_csr_colind_ce0,
        out_csr_colind_we0,
        out_csr_colind_d0,
        out_csr_data_address0,
        out_csr_data_ce0,
        out_csr_data_we0,
        out_csr_data_d0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_pp0_stage0 = 27'd524288;
parameter    ap_ST_fsm_state23 = 27'd1048576;
parameter    ap_ST_fsm_state24 = 27'd2097152;
parameter    ap_ST_fsm_pp1_stage0 = 27'd4194304;
parameter    ap_ST_fsm_state27 = 27'd8388608;
parameter    ap_ST_fsm_state28 = 27'd16777216;
parameter    ap_ST_fsm_pp2_stage0 = 27'd33554432;
parameter    ap_ST_fsm_state31 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_z_rowptr_AWVALID;
input   m_axi_z_rowptr_AWREADY;
output  [63:0] m_axi_z_rowptr_AWADDR;
output  [0:0] m_axi_z_rowptr_AWID;
output  [31:0] m_axi_z_rowptr_AWLEN;
output  [2:0] m_axi_z_rowptr_AWSIZE;
output  [1:0] m_axi_z_rowptr_AWBURST;
output  [1:0] m_axi_z_rowptr_AWLOCK;
output  [3:0] m_axi_z_rowptr_AWCACHE;
output  [2:0] m_axi_z_rowptr_AWPROT;
output  [3:0] m_axi_z_rowptr_AWQOS;
output  [3:0] m_axi_z_rowptr_AWREGION;
output  [0:0] m_axi_z_rowptr_AWUSER;
output   m_axi_z_rowptr_WVALID;
input   m_axi_z_rowptr_WREADY;
output  [31:0] m_axi_z_rowptr_WDATA;
output  [3:0] m_axi_z_rowptr_WSTRB;
output   m_axi_z_rowptr_WLAST;
output  [0:0] m_axi_z_rowptr_WID;
output  [0:0] m_axi_z_rowptr_WUSER;
output   m_axi_z_rowptr_ARVALID;
input   m_axi_z_rowptr_ARREADY;
output  [63:0] m_axi_z_rowptr_ARADDR;
output  [0:0] m_axi_z_rowptr_ARID;
output  [31:0] m_axi_z_rowptr_ARLEN;
output  [2:0] m_axi_z_rowptr_ARSIZE;
output  [1:0] m_axi_z_rowptr_ARBURST;
output  [1:0] m_axi_z_rowptr_ARLOCK;
output  [3:0] m_axi_z_rowptr_ARCACHE;
output  [2:0] m_axi_z_rowptr_ARPROT;
output  [3:0] m_axi_z_rowptr_ARQOS;
output  [3:0] m_axi_z_rowptr_ARREGION;
output  [0:0] m_axi_z_rowptr_ARUSER;
input   m_axi_z_rowptr_RVALID;
output   m_axi_z_rowptr_RREADY;
input  [31:0] m_axi_z_rowptr_RDATA;
input   m_axi_z_rowptr_RLAST;
input  [0:0] m_axi_z_rowptr_RID;
input  [0:0] m_axi_z_rowptr_RUSER;
input  [1:0] m_axi_z_rowptr_RRESP;
input   m_axi_z_rowptr_BVALID;
output   m_axi_z_rowptr_BREADY;
input  [1:0] m_axi_z_rowptr_BRESP;
input  [0:0] m_axi_z_rowptr_BID;
input  [0:0] m_axi_z_rowptr_BUSER;
output   m_axi_z_colind_AWVALID;
input   m_axi_z_colind_AWREADY;
output  [63:0] m_axi_z_colind_AWADDR;
output  [0:0] m_axi_z_colind_AWID;
output  [31:0] m_axi_z_colind_AWLEN;
output  [2:0] m_axi_z_colind_AWSIZE;
output  [1:0] m_axi_z_colind_AWBURST;
output  [1:0] m_axi_z_colind_AWLOCK;
output  [3:0] m_axi_z_colind_AWCACHE;
output  [2:0] m_axi_z_colind_AWPROT;
output  [3:0] m_axi_z_colind_AWQOS;
output  [3:0] m_axi_z_colind_AWREGION;
output  [0:0] m_axi_z_colind_AWUSER;
output   m_axi_z_colind_WVALID;
input   m_axi_z_colind_WREADY;
output  [31:0] m_axi_z_colind_WDATA;
output  [3:0] m_axi_z_colind_WSTRB;
output   m_axi_z_colind_WLAST;
output  [0:0] m_axi_z_colind_WID;
output  [0:0] m_axi_z_colind_WUSER;
output   m_axi_z_colind_ARVALID;
input   m_axi_z_colind_ARREADY;
output  [63:0] m_axi_z_colind_ARADDR;
output  [0:0] m_axi_z_colind_ARID;
output  [31:0] m_axi_z_colind_ARLEN;
output  [2:0] m_axi_z_colind_ARSIZE;
output  [1:0] m_axi_z_colind_ARBURST;
output  [1:0] m_axi_z_colind_ARLOCK;
output  [3:0] m_axi_z_colind_ARCACHE;
output  [2:0] m_axi_z_colind_ARPROT;
output  [3:0] m_axi_z_colind_ARQOS;
output  [3:0] m_axi_z_colind_ARREGION;
output  [0:0] m_axi_z_colind_ARUSER;
input   m_axi_z_colind_RVALID;
output   m_axi_z_colind_RREADY;
input  [31:0] m_axi_z_colind_RDATA;
input   m_axi_z_colind_RLAST;
input  [0:0] m_axi_z_colind_RID;
input  [0:0] m_axi_z_colind_RUSER;
input  [1:0] m_axi_z_colind_RRESP;
input   m_axi_z_colind_BVALID;
output   m_axi_z_colind_BREADY;
input  [1:0] m_axi_z_colind_BRESP;
input  [0:0] m_axi_z_colind_BID;
input  [0:0] m_axi_z_colind_BUSER;
output   m_axi_z_data_AWVALID;
input   m_axi_z_data_AWREADY;
output  [63:0] m_axi_z_data_AWADDR;
output  [0:0] m_axi_z_data_AWID;
output  [31:0] m_axi_z_data_AWLEN;
output  [2:0] m_axi_z_data_AWSIZE;
output  [1:0] m_axi_z_data_AWBURST;
output  [1:0] m_axi_z_data_AWLOCK;
output  [3:0] m_axi_z_data_AWCACHE;
output  [2:0] m_axi_z_data_AWPROT;
output  [3:0] m_axi_z_data_AWQOS;
output  [3:0] m_axi_z_data_AWREGION;
output  [0:0] m_axi_z_data_AWUSER;
output   m_axi_z_data_WVALID;
input   m_axi_z_data_WREADY;
output  [31:0] m_axi_z_data_WDATA;
output  [3:0] m_axi_z_data_WSTRB;
output   m_axi_z_data_WLAST;
output  [0:0] m_axi_z_data_WID;
output  [0:0] m_axi_z_data_WUSER;
output   m_axi_z_data_ARVALID;
input   m_axi_z_data_ARREADY;
output  [63:0] m_axi_z_data_ARADDR;
output  [0:0] m_axi_z_data_ARID;
output  [31:0] m_axi_z_data_ARLEN;
output  [2:0] m_axi_z_data_ARSIZE;
output  [1:0] m_axi_z_data_ARBURST;
output  [1:0] m_axi_z_data_ARLOCK;
output  [3:0] m_axi_z_data_ARCACHE;
output  [2:0] m_axi_z_data_ARPROT;
output  [3:0] m_axi_z_data_ARQOS;
output  [3:0] m_axi_z_data_ARREGION;
output  [0:0] m_axi_z_data_ARUSER;
input   m_axi_z_data_RVALID;
output   m_axi_z_data_RREADY;
input  [31:0] m_axi_z_data_RDATA;
input   m_axi_z_data_RLAST;
input  [0:0] m_axi_z_data_RID;
input  [0:0] m_axi_z_data_RUSER;
input  [1:0] m_axi_z_data_RRESP;
input   m_axi_z_data_BVALID;
output   m_axi_z_data_BREADY;
input  [1:0] m_axi_z_data_BRESP;
input  [0:0] m_axi_z_data_BID;
input  [0:0] m_axi_z_data_BUSER;
output  [2:0] csr2_rowptr_address0;
output   csr2_rowptr_ce0;
input  [31:0] csr2_rowptr_q0;
output  [2:0] csr2_rowptr_address1;
output   csr2_rowptr_ce1;
input  [31:0] csr2_rowptr_q1;
output  [4:0] csr2_colind_address0;
output   csr2_colind_ce0;
input  [2:0] csr2_colind_q0;
output  [4:0] csr2_data_address0;
output   csr2_data_ce0;
input  [31:0] csr2_data_q0;
output  [2:0] out_csr_rowptr_address0;
output   out_csr_rowptr_ce0;
output   out_csr_rowptr_we0;
output  [31:0] out_csr_rowptr_d0;
output  [4:0] out_csr_colind_address0;
output   out_csr_colind_ce0;
output   out_csr_colind_we0;
output  [31:0] out_csr_colind_d0;
output  [4:0] out_csr_data_address0;
output   out_csr_data_ce0;
output   out_csr_data_we0;
output  [31:0] out_csr_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_z_rowptr_ARVALID;
reg m_axi_z_rowptr_RREADY;
reg m_axi_z_colind_ARVALID;
reg m_axi_z_colind_RREADY;
reg m_axi_z_data_ARVALID;
reg m_axi_z_data_RREADY;
reg csr2_rowptr_ce0;
reg csr2_rowptr_ce1;
reg csr2_colind_ce0;
reg csr2_data_ce0;
reg[2:0] out_csr_rowptr_address0;
reg out_csr_rowptr_ce0;
reg out_csr_rowptr_we0;
reg out_csr_colind_ce0;
reg out_csr_colind_we0;
reg out_csr_data_ce0;
reg out_csr_data_we0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    z_rowptr_blk_n_AR;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln262_reg_560;
reg    z_rowptr_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    z_colind_blk_n_AR;
wire    ap_CS_fsm_state13;
reg    z_colind_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln202_1_reg_633;
reg    z_data_blk_n_AR;
reg    z_data_blk_n_R;
reg   [63:0] i_12_reg_314;
reg   [63:0] i_14_reg_323;
reg   [4:0] nnz_1_reg_334;
reg   [30:0] j_09_reg_344;
wire   [0:0] icmp_ln262_fu_374_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln198_fu_380_p2;
reg   [2:0] add_ln198_reg_564;
reg  signed [31:0] start_idx_reg_576;
reg  signed [31:0] end_idx_reg_583;
wire   [63:0] zext_ln262_fu_401_p1;
reg   [63:0] zext_ln262_reg_590;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln198_fu_405_p1;
reg   [63:0] zext_ln198_reg_596;
wire   [0:0] icmp_ln202_fu_408_p2;
wire   [31:0] sub_ln202_fu_412_p2;
reg   [31:0] sub_ln202_reg_605;
wire  signed [63:0] sext_ln202_fu_416_p1;
reg  signed [63:0] sext_ln202_reg_611;
wire  signed [63:0] sext_ln202_1_fu_433_p1;
reg  signed [63:0] sext_ln202_1_reg_628;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln202_1_fu_436_p2;
wire    ap_block_state20_pp0_stage0_iter0;
reg    ap_block_state21_pp0_stage0_iter1;
wire    colind1_full_n;
reg    colind1_write;
reg   [0:0] icmp_ln202_1_reg_633_pp0_iter1_reg;
wire    data1_full_n;
reg    data1_write;
reg    ap_block_state22_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln202_fu_441_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] z_colind_addr_read_reg_642;
reg   [31:0] z_data_addr_read_reg_647;
wire    ap_CS_fsm_state23;
wire  signed [63:0] sext_ln202_2_fu_447_p1;
wire    ap_CS_fsm_state24;
wire  signed [63:0] sext_ln202_3_fu_451_p1;
reg  signed [63:0] sext_ln202_3_reg_667;
wire   [0:0] icmp_ln202_2_fu_455_p2;
reg   [0:0] icmp_ln202_2_reg_672;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state25_pp1_stage0_iter0;
wire   [31:0] colind2_din;
wire    colind2_full_n;
reg    colind2_write;
wire    data2_full_n;
reg    data2_write;
reg    ap_block_state26_pp1_stage0_iter1;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [63:0] add_ln202_1_fu_460_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] nnz_load_1_reg_691;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_mergeRows_fu_355_ap_return;
reg   [31:0] merge_data_size_reg_696;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln287_fu_471_p2;
reg   [0:0] icmp_ln287_reg_702;
wire   [4:0] trunc_ln287_fu_477_p1;
wire   [30:0] j_fu_480_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state29_pp2_stage0_iter0;
wire   [31:0] merged_colind_dout;
wire    merged_colind_empty_n;
reg    merged_colind_read;
reg   [0:0] icmp_ln287_1_reg_716;
wire   [31:0] merged_data_dout;
wire    merged_data_empty_n;
reg    merged_data_read;
reg    ap_block_state30_pp2_stage0_iter1;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln287_1_fu_490_p2;
wire   [4:0] add_ln294_fu_501_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
wire    grp_mergeRows_fu_355_ap_ready;
wire    grp_mergeRows_fu_355_ap_done;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
wire    grp_mergeRows_fu_355_ap_start;
wire    grp_mergeRows_fu_355_ap_idle;
wire    grp_mergeRows_fu_355_colind1_read;
wire    grp_mergeRows_fu_355_colind2_read;
wire    grp_mergeRows_fu_355_data1_read;
wire    grp_mergeRows_fu_355_data2_read;
wire   [31:0] grp_mergeRows_fu_355_merged_colind_din;
wire    grp_mergeRows_fu_355_merged_colind_write;
wire   [31:0] grp_mergeRows_fu_355_merged_data_din;
wire    grp_mergeRows_fu_355_merged_data_write;
reg   [2:0] i_15_reg_302;
wire    ap_CS_fsm_state31;
reg    grp_mergeRows_fu_355_ap_start_reg;
wire   [31:0] colind1_dout;
wire    colind1_empty_n;
reg    colind1_read;
wire   [31:0] colind2_dout;
wire    colind2_empty_n;
reg    colind2_read;
wire   [31:0] data1_dout;
wire    data1_empty_n;
reg    data1_read;
wire   [31:0] data2_dout;
wire    data2_empty_n;
reg    data2_read;
wire    merged_colind_full_n;
reg    merged_colind_write;
wire    merged_data_full_n;
reg    merged_data_write;
wire    ap_block_pp1_stage0;
wire   [63:0] nnz_1_cast_fu_495_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln197_fu_390_p1;
reg    ap_block_state3_io;
reg    ap_block_state13_io;
reg   [31:0] nnz_fu_104;
wire   [31:0] add_ln262_fu_507_p2;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] trunc_ln197_fu_386_p1;
wire   [31:0] j_09_cast_fu_486_p1;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_mergeRows_fu_355_ap_start_reg = 1'b0;
end

outer_product_mergeRows grp_mergeRows_fu_355(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mergeRows_fu_355_ap_start),
    .ap_done(grp_mergeRows_fu_355_ap_done),
    .ap_idle(grp_mergeRows_fu_355_ap_idle),
    .ap_ready(grp_mergeRows_fu_355_ap_ready),
    .colind1_dout(colind1_dout),
    .colind1_empty_n(colind1_empty_n),
    .colind1_read(grp_mergeRows_fu_355_colind1_read),
    .colind2_dout(colind2_dout),
    .colind2_empty_n(colind2_empty_n),
    .colind2_read(grp_mergeRows_fu_355_colind2_read),
    .data1_dout(data1_dout),
    .data1_empty_n(data1_empty_n),
    .data1_read(grp_mergeRows_fu_355_data1_read),
    .data2_dout(data2_dout),
    .data2_empty_n(data2_empty_n),
    .data2_read(grp_mergeRows_fu_355_data2_read),
    .merged_colind_din(grp_mergeRows_fu_355_merged_colind_din),
    .merged_colind_full_n(merged_colind_full_n),
    .merged_colind_write(grp_mergeRows_fu_355_merged_colind_write),
    .merged_data_din(grp_mergeRows_fu_355_merged_data_din),
    .merged_data_full_n(merged_data_full_n),
    .merged_data_write(grp_mergeRows_fu_355_merged_data_write),
    .ap_return(grp_mergeRows_fu_355_ap_return)
);

outer_product_fifo_w32_d2_S_x colind1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(z_colind_addr_read_reg_642),
    .if_full_n(colind1_full_n),
    .if_write(colind1_write),
    .if_dout(colind1_dout),
    .if_empty_n(colind1_empty_n),
    .if_read(colind1_read)
);

outer_product_fifo_w32_d2_S_x colind2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(colind2_din),
    .if_full_n(colind2_full_n),
    .if_write(colind2_write),
    .if_dout(colind2_dout),
    .if_empty_n(colind2_empty_n),
    .if_read(colind2_read)
);

outer_product_fifo_w32_d2_S_x data1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(z_data_addr_read_reg_647),
    .if_full_n(data1_full_n),
    .if_write(data1_write),
    .if_dout(data1_dout),
    .if_empty_n(data1_empty_n),
    .if_read(data1_read)
);

outer_product_fifo_w32_d2_S_x data2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(csr2_data_q0),
    .if_full_n(data2_full_n),
    .if_write(data2_write),
    .if_dout(data2_dout),
    .if_empty_n(data2_empty_n),
    .if_read(data2_read)
);

outer_product_fifo_w32_d2_S_x merged_colind_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_mergeRows_fu_355_merged_colind_din),
    .if_full_n(merged_colind_full_n),
    .if_write(merged_colind_write),
    .if_dout(merged_colind_dout),
    .if_empty_n(merged_colind_empty_n),
    .if_read(merged_colind_read)
);

outer_product_fifo_w32_d2_S_x merged_data_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_mergeRows_fu_355_merged_data_din),
    .if_full_n(merged_data_full_n),
    .if_write(merged_data_write),
    .if_dout(merged_data_dout),
    .if_empty_n(merged_data_empty_n),
    .if_read(merged_data_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state20)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state29))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mergeRows_fu_355_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            grp_mergeRows_fu_355_ap_start_reg <= 1'b1;
        end else if ((grp_mergeRows_fu_355_ap_ready == 1'b1)) begin
            grp_mergeRows_fu_355_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_12_reg_314 <= sext_ln202_reg_611;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln202_1_fu_436_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_12_reg_314 <= add_ln202_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_14_reg_323 <= sext_ln202_2_fu_447_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln202_2_fu_455_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_14_reg_323 <= add_ln202_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_15_reg_302 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_15_reg_302 <= add_ln198_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        j_09_reg_344 <= 31'd0;
    end else if (((icmp_ln287_1_fu_490_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_09_reg_344 <= j_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        nnz_1_reg_334 <= trunc_ln287_fu_477_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln287_1_reg_716 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        nnz_1_reg_334 <= add_ln294_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nnz_fu_104 <= 32'd0;
    end else if (((icmp_ln287_reg_702 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        nnz_fu_104 <= add_ln262_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln198_reg_564 <= add_ln198_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        end_idx_reg_583 <= m_axi_z_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln202_1_reg_633 <= icmp_ln202_1_fu_436_p2;
        icmp_ln202_1_reg_633_pp0_iter1_reg <= icmp_ln202_1_reg_633;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln202_2_reg_672 <= icmp_ln202_2_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln262_reg_560 <= icmp_ln262_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln287_1_reg_716 <= icmp_ln287_1_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln287_reg_702 <= icmp_ln287_fu_471_p2;
        merge_data_size_reg_696 <= grp_mergeRows_fu_355_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nnz_load_1_reg_691 <= nnz_fu_104;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sext_ln202_1_reg_628 <= sext_ln202_1_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        sext_ln202_3_reg_667 <= sext_ln202_3_fu_451_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln202_reg_611 <= sext_ln202_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        start_idx_reg_576 <= m_axi_z_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        sub_ln202_reg_605 <= sub_ln202_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_1_reg_633 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_colind_addr_read_reg_642 <= m_axi_z_colind_RDATA;
        z_data_addr_read_reg_647 <= m_axi_z_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        zext_ln198_reg_596[2 : 0] <= zext_ln198_fu_405_p1[2 : 0];
        zext_ln262_reg_590[2 : 0] <= zext_ln262_fu_401_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln202_1_fu_436_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln202_2_fu_455_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln287_1_fu_490_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        colind1_read = grp_mergeRows_fu_355_colind1_read;
    end else begin
        colind1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        colind1_write = 1'b1;
    end else begin
        colind1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        colind2_read = grp_mergeRows_fu_355_colind2_read;
    end else begin
        colind2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln202_2_reg_672 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        colind2_write = 1'b1;
    end else begin
        colind2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        csr2_colind_ce0 = 1'b1;
    end else begin
        csr2_colind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        csr2_data_ce0 = 1'b1;
    end else begin
        csr2_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        csr2_rowptr_ce0 = 1'b1;
    end else begin
        csr2_rowptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        csr2_rowptr_ce1 = 1'b1;
    end else begin
        csr2_rowptr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        data1_read = grp_mergeRows_fu_355_data1_read;
    end else begin
        data1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data1_write = 1'b1;
    end else begin
        data1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        data2_read = grp_mergeRows_fu_355_data2_read;
    end else begin
        data2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln202_2_reg_672 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data2_write = 1'b1;
    end else begin
        data2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_z_colind_ARVALID = 1'b1;
    end else begin
        m_axi_z_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln202_1_reg_633 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_z_colind_RREADY = 1'b1;
    end else begin
        m_axi_z_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_z_data_ARVALID = 1'b1;
    end else begin
        m_axi_z_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln202_1_reg_633 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_z_data_RREADY = 1'b1;
    end else begin
        m_axi_z_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_z_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_z_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_z_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_z_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_z_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln287_1_reg_716 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        merged_colind_read = 1'b1;
    end else begin
        merged_colind_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        merged_colind_write = grp_mergeRows_fu_355_merged_colind_write;
    end else begin
        merged_colind_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln287_1_reg_716 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        merged_data_read = 1'b1;
    end else begin
        merged_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        merged_data_write = grp_mergeRows_fu_355_merged_data_write;
    end else begin
        merged_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_csr_colind_ce0 = 1'b1;
    end else begin
        out_csr_colind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln287_1_reg_716 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_csr_colind_we0 = 1'b1;
    end else begin
        out_csr_colind_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_csr_data_ce0 = 1'b1;
    end else begin
        out_csr_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln287_1_reg_716 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        out_csr_data_we0 = 1'b1;
    end else begin
        out_csr_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        out_csr_rowptr_address0 = zext_ln262_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_csr_rowptr_address0 = 64'd4;
    end else begin
        out_csr_rowptr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_csr_rowptr_ce0 = 1'b1;
    end else begin
        out_csr_rowptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_csr_rowptr_we0 = 1'b1;
    end else begin
        out_csr_rowptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        z_colind_blk_n_AR = m_axi_z_colind_ARREADY;
    end else begin
        z_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln202_1_reg_633 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_colind_blk_n_R = m_axi_z_colind_RVALID;
    end else begin
        z_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        z_data_blk_n_AR = m_axi_z_data_ARREADY;
    end else begin
        z_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln202_1_reg_633 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_data_blk_n_R = m_axi_z_data_RVALID;
    end else begin
        z_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln262_reg_560 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        z_rowptr_blk_n_AR = m_axi_z_rowptr_ARREADY;
    end else begin
        z_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        z_rowptr_blk_n_R = m_axi_z_rowptr_RVALID;
    end else begin
        z_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state3_io) & (icmp_ln262_reg_560 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_z_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_z_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln202_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln202_1_fu_436_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln202_1_fu_436_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln202_2_fu_455_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln202_2_fu_455_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((grp_mergeRows_fu_355_ap_done == 1'b1) & (icmp_ln287_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln287_1_fu_490_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln287_1_fu_490_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln198_fu_380_p2 = (i_15_reg_302 + 3'd1);

assign add_ln202_1_fu_460_p2 = (i_14_reg_323 + 64'd1);

assign add_ln202_fu_441_p2 = (i_12_reg_314 + 64'd1);

assign add_ln262_fu_507_p2 = (merge_data_size_reg_696 + nnz_fu_104);

assign add_ln294_fu_501_p2 = (nnz_1_reg_334 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((data1_full_n == 1'b0) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0)) | ((icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (colind1_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_data_RVALID == 1'b0)) | ((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_colind_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((data1_full_n == 1'b0) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0)) | ((icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (colind1_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_data_RVALID == 1'b0)) | ((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_colind_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((data1_full_n == 1'b0) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0)) | ((icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (colind1_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_data_RVALID == 1'b0)) | ((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_colind_RVALID == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((data2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1)) | ((colind2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((data2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1)) | ((colind2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((data2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1)) | ((colind2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((merged_data_empty_n == 1'b0) & (icmp_ln287_1_reg_716 == 1'd0)) | ((icmp_ln287_1_reg_716 == 1'd0) & (merged_colind_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((merged_data_empty_n == 1'b0) & (icmp_ln287_1_reg_716 == 1'd0)) | ((icmp_ln287_1_reg_716 == 1'd0) & (merged_colind_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_z_data_ARREADY == 1'b0) | (m_axi_z_colind_ARREADY == 1'b0));
end

assign ap_block_state20_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage0_iter1 = (((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_data_RVALID == 1'b0)) | ((icmp_ln202_1_reg_633 == 1'd0) & (m_axi_z_colind_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state22_pp0_stage0_iter2 = (((data1_full_n == 1'b0) & (icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0)) | ((icmp_ln202_1_reg_633_pp0_iter1_reg == 1'd0) & (colind1_full_n == 1'b0)));
end

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp1_stage0_iter1 = (((data2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1)) | ((colind2_full_n == 1'b0) & (icmp_ln202_2_reg_672 == 1'd1)));
end

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp2_stage0_iter1 = (((merged_data_empty_n == 1'b0) & (icmp_ln287_1_reg_716 == 1'd0)) | ((icmp_ln287_1_reg_716 == 1'd0) & (merged_colind_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_z_rowptr_ARREADY == 1'b0) & (icmp_ln262_reg_560 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign colind2_din = csr2_colind_q0;

assign csr2_colind_address0 = i_14_reg_323;

assign csr2_data_address0 = i_14_reg_323;

assign csr2_rowptr_address0 = zext_ln198_reg_596;

assign csr2_rowptr_address1 = zext_ln262_reg_590;

assign grp_mergeRows_fu_355_ap_start = grp_mergeRows_fu_355_ap_start_reg;

assign icmp_ln202_1_fu_436_p2 = ((i_12_reg_314 == sext_ln202_1_reg_628) ? 1'b1 : 1'b0);

assign icmp_ln202_2_fu_455_p2 = (($signed(i_14_reg_323) < $signed(sext_ln202_3_reg_667)) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_408_p2 = (($signed(start_idx_reg_576) < $signed(end_idx_reg_583)) ? 1'b1 : 1'b0);

assign icmp_ln262_fu_374_p2 = ((i_15_reg_302 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln287_1_fu_490_p2 = ((j_09_cast_fu_486_p1 == merge_data_size_reg_696) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_471_p2 = (($signed(grp_mergeRows_fu_355_ap_return) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign j_09_cast_fu_486_p1 = j_09_reg_344;

assign j_fu_480_p2 = (j_09_reg_344 + 31'd1);

assign m_axi_z_colind_ARADDR = sext_ln202_fu_416_p1;

assign m_axi_z_colind_ARBURST = 2'd0;

assign m_axi_z_colind_ARCACHE = 4'd0;

assign m_axi_z_colind_ARID = 1'd0;

assign m_axi_z_colind_ARLEN = sub_ln202_reg_605;

assign m_axi_z_colind_ARLOCK = 2'd0;

assign m_axi_z_colind_ARPROT = 3'd0;

assign m_axi_z_colind_ARQOS = 4'd0;

assign m_axi_z_colind_ARREGION = 4'd0;

assign m_axi_z_colind_ARSIZE = 3'd0;

assign m_axi_z_colind_ARUSER = 1'd0;

assign m_axi_z_colind_AWADDR = 64'd0;

assign m_axi_z_colind_AWBURST = 2'd0;

assign m_axi_z_colind_AWCACHE = 4'd0;

assign m_axi_z_colind_AWID = 1'd0;

assign m_axi_z_colind_AWLEN = 32'd0;

assign m_axi_z_colind_AWLOCK = 2'd0;

assign m_axi_z_colind_AWPROT = 3'd0;

assign m_axi_z_colind_AWQOS = 4'd0;

assign m_axi_z_colind_AWREGION = 4'd0;

assign m_axi_z_colind_AWSIZE = 3'd0;

assign m_axi_z_colind_AWUSER = 1'd0;

assign m_axi_z_colind_AWVALID = 1'b0;

assign m_axi_z_colind_BREADY = 1'b0;

assign m_axi_z_colind_WDATA = 32'd0;

assign m_axi_z_colind_WID = 1'd0;

assign m_axi_z_colind_WLAST = 1'b0;

assign m_axi_z_colind_WSTRB = 4'd0;

assign m_axi_z_colind_WUSER = 1'd0;

assign m_axi_z_colind_WVALID = 1'b0;

assign m_axi_z_data_ARADDR = sext_ln202_fu_416_p1;

assign m_axi_z_data_ARBURST = 2'd0;

assign m_axi_z_data_ARCACHE = 4'd0;

assign m_axi_z_data_ARID = 1'd0;

assign m_axi_z_data_ARLEN = sub_ln202_reg_605;

assign m_axi_z_data_ARLOCK = 2'd0;

assign m_axi_z_data_ARPROT = 3'd0;

assign m_axi_z_data_ARQOS = 4'd0;

assign m_axi_z_data_ARREGION = 4'd0;

assign m_axi_z_data_ARSIZE = 3'd0;

assign m_axi_z_data_ARUSER = 1'd0;

assign m_axi_z_data_AWADDR = 64'd0;

assign m_axi_z_data_AWBURST = 2'd0;

assign m_axi_z_data_AWCACHE = 4'd0;

assign m_axi_z_data_AWID = 1'd0;

assign m_axi_z_data_AWLEN = 32'd0;

assign m_axi_z_data_AWLOCK = 2'd0;

assign m_axi_z_data_AWPROT = 3'd0;

assign m_axi_z_data_AWQOS = 4'd0;

assign m_axi_z_data_AWREGION = 4'd0;

assign m_axi_z_data_AWSIZE = 3'd0;

assign m_axi_z_data_AWUSER = 1'd0;

assign m_axi_z_data_AWVALID = 1'b0;

assign m_axi_z_data_BREADY = 1'b0;

assign m_axi_z_data_WDATA = 32'd0;

assign m_axi_z_data_WID = 1'd0;

assign m_axi_z_data_WLAST = 1'b0;

assign m_axi_z_data_WSTRB = 4'd0;

assign m_axi_z_data_WUSER = 1'd0;

assign m_axi_z_data_WVALID = 1'b0;

assign m_axi_z_rowptr_ARADDR = zext_ln197_fu_390_p1;

assign m_axi_z_rowptr_ARBURST = 2'd0;

assign m_axi_z_rowptr_ARCACHE = 4'd0;

assign m_axi_z_rowptr_ARID = 1'd0;

assign m_axi_z_rowptr_ARLEN = 32'd2;

assign m_axi_z_rowptr_ARLOCK = 2'd0;

assign m_axi_z_rowptr_ARPROT = 3'd0;

assign m_axi_z_rowptr_ARQOS = 4'd0;

assign m_axi_z_rowptr_ARREGION = 4'd0;

assign m_axi_z_rowptr_ARSIZE = 3'd0;

assign m_axi_z_rowptr_ARUSER = 1'd0;

assign m_axi_z_rowptr_AWADDR = 64'd0;

assign m_axi_z_rowptr_AWBURST = 2'd0;

assign m_axi_z_rowptr_AWCACHE = 4'd0;

assign m_axi_z_rowptr_AWID = 1'd0;

assign m_axi_z_rowptr_AWLEN = 32'd0;

assign m_axi_z_rowptr_AWLOCK = 2'd0;

assign m_axi_z_rowptr_AWPROT = 3'd0;

assign m_axi_z_rowptr_AWQOS = 4'd0;

assign m_axi_z_rowptr_AWREGION = 4'd0;

assign m_axi_z_rowptr_AWSIZE = 3'd0;

assign m_axi_z_rowptr_AWUSER = 1'd0;

assign m_axi_z_rowptr_AWVALID = 1'b0;

assign m_axi_z_rowptr_BREADY = 1'b0;

assign m_axi_z_rowptr_WDATA = 32'd0;

assign m_axi_z_rowptr_WID = 1'd0;

assign m_axi_z_rowptr_WLAST = 1'b0;

assign m_axi_z_rowptr_WSTRB = 4'd0;

assign m_axi_z_rowptr_WUSER = 1'd0;

assign m_axi_z_rowptr_WVALID = 1'b0;

assign nnz_1_cast_fu_495_p1 = nnz_1_reg_334;

assign out_csr_colind_address0 = nnz_1_cast_fu_495_p1;

assign out_csr_colind_d0 = merged_colind_dout;

assign out_csr_data_address0 = nnz_1_cast_fu_495_p1;

assign out_csr_data_d0 = merged_data_dout;

assign out_csr_rowptr_d0 = nnz_fu_104;

assign sext_ln202_1_fu_433_p1 = end_idx_reg_583;

assign sext_ln202_2_fu_447_p1 = $signed(csr2_rowptr_q1);

assign sext_ln202_3_fu_451_p1 = $signed(csr2_rowptr_q0);

assign sext_ln202_fu_416_p1 = start_idx_reg_576;

assign sub_ln202_fu_412_p2 = ($signed(end_idx_reg_583) - $signed(start_idx_reg_576));

assign trunc_ln197_fu_386_p1 = i_15_reg_302[1:0];

assign trunc_ln287_fu_477_p1 = nnz_load_1_reg_691[4:0];

assign zext_ln197_fu_390_p1 = trunc_ln197_fu_386_p1;

assign zext_ln198_fu_405_p1 = add_ln198_reg_564;

assign zext_ln262_fu_401_p1 = i_15_reg_302;

always @ (posedge ap_clk) begin
    zext_ln262_reg_590[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln198_reg_596[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //outer_product_accumulate
