// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="row_product_row_product,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=6681,HLS_SYN_LUT=7095,HLS_VERSION=2020_2}" *)

module row_product (
        ap_clk,
        ap_rst_n,
        m_axi_x_rowptr_AWVALID,
        m_axi_x_rowptr_AWREADY,
        m_axi_x_rowptr_AWADDR,
        m_axi_x_rowptr_AWID,
        m_axi_x_rowptr_AWLEN,
        m_axi_x_rowptr_AWSIZE,
        m_axi_x_rowptr_AWBURST,
        m_axi_x_rowptr_AWLOCK,
        m_axi_x_rowptr_AWCACHE,
        m_axi_x_rowptr_AWPROT,
        m_axi_x_rowptr_AWQOS,
        m_axi_x_rowptr_AWREGION,
        m_axi_x_rowptr_AWUSER,
        m_axi_x_rowptr_WVALID,
        m_axi_x_rowptr_WREADY,
        m_axi_x_rowptr_WDATA,
        m_axi_x_rowptr_WSTRB,
        m_axi_x_rowptr_WLAST,
        m_axi_x_rowptr_WID,
        m_axi_x_rowptr_WUSER,
        m_axi_x_rowptr_ARVALID,
        m_axi_x_rowptr_ARREADY,
        m_axi_x_rowptr_ARADDR,
        m_axi_x_rowptr_ARID,
        m_axi_x_rowptr_ARLEN,
        m_axi_x_rowptr_ARSIZE,
        m_axi_x_rowptr_ARBURST,
        m_axi_x_rowptr_ARLOCK,
        m_axi_x_rowptr_ARCACHE,
        m_axi_x_rowptr_ARPROT,
        m_axi_x_rowptr_ARQOS,
        m_axi_x_rowptr_ARREGION,
        m_axi_x_rowptr_ARUSER,
        m_axi_x_rowptr_RVALID,
        m_axi_x_rowptr_RREADY,
        m_axi_x_rowptr_RDATA,
        m_axi_x_rowptr_RLAST,
        m_axi_x_rowptr_RID,
        m_axi_x_rowptr_RUSER,
        m_axi_x_rowptr_RRESP,
        m_axi_x_rowptr_BVALID,
        m_axi_x_rowptr_BREADY,
        m_axi_x_rowptr_BRESP,
        m_axi_x_rowptr_BID,
        m_axi_x_rowptr_BUSER,
        m_axi_x_colind_AWVALID,
        m_axi_x_colind_AWREADY,
        m_axi_x_colind_AWADDR,
        m_axi_x_colind_AWID,
        m_axi_x_colind_AWLEN,
        m_axi_x_colind_AWSIZE,
        m_axi_x_colind_AWBURST,
        m_axi_x_colind_AWLOCK,
        m_axi_x_colind_AWCACHE,
        m_axi_x_colind_AWPROT,
        m_axi_x_colind_AWQOS,
        m_axi_x_colind_AWREGION,
        m_axi_x_colind_AWUSER,
        m_axi_x_colind_WVALID,
        m_axi_x_colind_WREADY,
        m_axi_x_colind_WDATA,
        m_axi_x_colind_WSTRB,
        m_axi_x_colind_WLAST,
        m_axi_x_colind_WID,
        m_axi_x_colind_WUSER,
        m_axi_x_colind_ARVALID,
        m_axi_x_colind_ARREADY,
        m_axi_x_colind_ARADDR,
        m_axi_x_colind_ARID,
        m_axi_x_colind_ARLEN,
        m_axi_x_colind_ARSIZE,
        m_axi_x_colind_ARBURST,
        m_axi_x_colind_ARLOCK,
        m_axi_x_colind_ARCACHE,
        m_axi_x_colind_ARPROT,
        m_axi_x_colind_ARQOS,
        m_axi_x_colind_ARREGION,
        m_axi_x_colind_ARUSER,
        m_axi_x_colind_RVALID,
        m_axi_x_colind_RREADY,
        m_axi_x_colind_RDATA,
        m_axi_x_colind_RLAST,
        m_axi_x_colind_RID,
        m_axi_x_colind_RUSER,
        m_axi_x_colind_RRESP,
        m_axi_x_colind_BVALID,
        m_axi_x_colind_BREADY,
        m_axi_x_colind_BRESP,
        m_axi_x_colind_BID,
        m_axi_x_colind_BUSER,
        m_axi_x_data_AWVALID,
        m_axi_x_data_AWREADY,
        m_axi_x_data_AWADDR,
        m_axi_x_data_AWID,
        m_axi_x_data_AWLEN,
        m_axi_x_data_AWSIZE,
        m_axi_x_data_AWBURST,
        m_axi_x_data_AWLOCK,
        m_axi_x_data_AWCACHE,
        m_axi_x_data_AWPROT,
        m_axi_x_data_AWQOS,
        m_axi_x_data_AWREGION,
        m_axi_x_data_AWUSER,
        m_axi_x_data_WVALID,
        m_axi_x_data_WREADY,
        m_axi_x_data_WDATA,
        m_axi_x_data_WSTRB,
        m_axi_x_data_WLAST,
        m_axi_x_data_WID,
        m_axi_x_data_WUSER,
        m_axi_x_data_ARVALID,
        m_axi_x_data_ARREADY,
        m_axi_x_data_ARADDR,
        m_axi_x_data_ARID,
        m_axi_x_data_ARLEN,
        m_axi_x_data_ARSIZE,
        m_axi_x_data_ARBURST,
        m_axi_x_data_ARLOCK,
        m_axi_x_data_ARCACHE,
        m_axi_x_data_ARPROT,
        m_axi_x_data_ARQOS,
        m_axi_x_data_ARREGION,
        m_axi_x_data_ARUSER,
        m_axi_x_data_RVALID,
        m_axi_x_data_RREADY,
        m_axi_x_data_RDATA,
        m_axi_x_data_RLAST,
        m_axi_x_data_RID,
        m_axi_x_data_RUSER,
        m_axi_x_data_RRESP,
        m_axi_x_data_BVALID,
        m_axi_x_data_BREADY,
        m_axi_x_data_BRESP,
        m_axi_x_data_BID,
        m_axi_x_data_BUSER,
        m_axi_y_rowptr_AWVALID,
        m_axi_y_rowptr_AWREADY,
        m_axi_y_rowptr_AWADDR,
        m_axi_y_rowptr_AWID,
        m_axi_y_rowptr_AWLEN,
        m_axi_y_rowptr_AWSIZE,
        m_axi_y_rowptr_AWBURST,
        m_axi_y_rowptr_AWLOCK,
        m_axi_y_rowptr_AWCACHE,
        m_axi_y_rowptr_AWPROT,
        m_axi_y_rowptr_AWQOS,
        m_axi_y_rowptr_AWREGION,
        m_axi_y_rowptr_AWUSER,
        m_axi_y_rowptr_WVALID,
        m_axi_y_rowptr_WREADY,
        m_axi_y_rowptr_WDATA,
        m_axi_y_rowptr_WSTRB,
        m_axi_y_rowptr_WLAST,
        m_axi_y_rowptr_WID,
        m_axi_y_rowptr_WUSER,
        m_axi_y_rowptr_ARVALID,
        m_axi_y_rowptr_ARREADY,
        m_axi_y_rowptr_ARADDR,
        m_axi_y_rowptr_ARID,
        m_axi_y_rowptr_ARLEN,
        m_axi_y_rowptr_ARSIZE,
        m_axi_y_rowptr_ARBURST,
        m_axi_y_rowptr_ARLOCK,
        m_axi_y_rowptr_ARCACHE,
        m_axi_y_rowptr_ARPROT,
        m_axi_y_rowptr_ARQOS,
        m_axi_y_rowptr_ARREGION,
        m_axi_y_rowptr_ARUSER,
        m_axi_y_rowptr_RVALID,
        m_axi_y_rowptr_RREADY,
        m_axi_y_rowptr_RDATA,
        m_axi_y_rowptr_RLAST,
        m_axi_y_rowptr_RID,
        m_axi_y_rowptr_RUSER,
        m_axi_y_rowptr_RRESP,
        m_axi_y_rowptr_BVALID,
        m_axi_y_rowptr_BREADY,
        m_axi_y_rowptr_BRESP,
        m_axi_y_rowptr_BID,
        m_axi_y_rowptr_BUSER,
        m_axi_y_colind_AWVALID,
        m_axi_y_colind_AWREADY,
        m_axi_y_colind_AWADDR,
        m_axi_y_colind_AWID,
        m_axi_y_colind_AWLEN,
        m_axi_y_colind_AWSIZE,
        m_axi_y_colind_AWBURST,
        m_axi_y_colind_AWLOCK,
        m_axi_y_colind_AWCACHE,
        m_axi_y_colind_AWPROT,
        m_axi_y_colind_AWQOS,
        m_axi_y_colind_AWREGION,
        m_axi_y_colind_AWUSER,
        m_axi_y_colind_WVALID,
        m_axi_y_colind_WREADY,
        m_axi_y_colind_WDATA,
        m_axi_y_colind_WSTRB,
        m_axi_y_colind_WLAST,
        m_axi_y_colind_WID,
        m_axi_y_colind_WUSER,
        m_axi_y_colind_ARVALID,
        m_axi_y_colind_ARREADY,
        m_axi_y_colind_ARADDR,
        m_axi_y_colind_ARID,
        m_axi_y_colind_ARLEN,
        m_axi_y_colind_ARSIZE,
        m_axi_y_colind_ARBURST,
        m_axi_y_colind_ARLOCK,
        m_axi_y_colind_ARCACHE,
        m_axi_y_colind_ARPROT,
        m_axi_y_colind_ARQOS,
        m_axi_y_colind_ARREGION,
        m_axi_y_colind_ARUSER,
        m_axi_y_colind_RVALID,
        m_axi_y_colind_RREADY,
        m_axi_y_colind_RDATA,
        m_axi_y_colind_RLAST,
        m_axi_y_colind_RID,
        m_axi_y_colind_RUSER,
        m_axi_y_colind_RRESP,
        m_axi_y_colind_BVALID,
        m_axi_y_colind_BREADY,
        m_axi_y_colind_BRESP,
        m_axi_y_colind_BID,
        m_axi_y_colind_BUSER,
        m_axi_y_data_AWVALID,
        m_axi_y_data_AWREADY,
        m_axi_y_data_AWADDR,
        m_axi_y_data_AWID,
        m_axi_y_data_AWLEN,
        m_axi_y_data_AWSIZE,
        m_axi_y_data_AWBURST,
        m_axi_y_data_AWLOCK,
        m_axi_y_data_AWCACHE,
        m_axi_y_data_AWPROT,
        m_axi_y_data_AWQOS,
        m_axi_y_data_AWREGION,
        m_axi_y_data_AWUSER,
        m_axi_y_data_WVALID,
        m_axi_y_data_WREADY,
        m_axi_y_data_WDATA,
        m_axi_y_data_WSTRB,
        m_axi_y_data_WLAST,
        m_axi_y_data_WID,
        m_axi_y_data_WUSER,
        m_axi_y_data_ARVALID,
        m_axi_y_data_ARREADY,
        m_axi_y_data_ARADDR,
        m_axi_y_data_ARID,
        m_axi_y_data_ARLEN,
        m_axi_y_data_ARSIZE,
        m_axi_y_data_ARBURST,
        m_axi_y_data_ARLOCK,
        m_axi_y_data_ARCACHE,
        m_axi_y_data_ARPROT,
        m_axi_y_data_ARQOS,
        m_axi_y_data_ARREGION,
        m_axi_y_data_ARUSER,
        m_axi_y_data_RVALID,
        m_axi_y_data_RREADY,
        m_axi_y_data_RDATA,
        m_axi_y_data_RLAST,
        m_axi_y_data_RID,
        m_axi_y_data_RUSER,
        m_axi_y_data_RRESP,
        m_axi_y_data_BVALID,
        m_axi_y_data_BREADY,
        m_axi_y_data_BRESP,
        m_axi_y_data_BID,
        m_axi_y_data_BUSER,
        m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY,
        m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY,
        m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST,
        m_axi_z_rowptr_RID,
        m_axi_z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID,
        m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP,
        m_axi_z_rowptr_BID,
        m_axi_z_rowptr_BUSER,
        m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY,
        m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY,
        m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST,
        m_axi_z_colind_WID,
        m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY,
        m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID,
        m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA,
        m_axi_z_colind_RLAST,
        m_axi_z_colind_RID,
        m_axi_z_colind_RUSER,
        m_axi_z_colind_RRESP,
        m_axi_z_colind_BVALID,
        m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP,
        m_axi_z_colind_BID,
        m_axi_z_colind_BUSER,
        m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY,
        m_axi_z_data_AWADDR,
        m_axi_z_data_AWID,
        m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID,
        m_axi_z_data_WREADY,
        m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST,
        m_axi_z_data_WID,
        m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY,
        m_axi_z_data_ARADDR,
        m_axi_z_data_ARID,
        m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID,
        m_axi_z_data_RREADY,
        m_axi_z_data_RDATA,
        m_axi_z_data_RLAST,
        m_axi_z_data_RID,
        m_axi_z_data_RUSER,
        m_axi_z_data_RRESP,
        m_axi_z_data_BVALID,
        m_axi_z_data_BREADY,
        m_axi_z_data_BRESP,
        m_axi_z_data_BID,
        m_axi_z_data_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 64'd1073741824;
parameter    ap_ST_fsm_state43 = 64'd2147483648;
parameter    ap_ST_fsm_state44 = 64'd4294967296;
parameter    ap_ST_fsm_state45 = 64'd8589934592;
parameter    ap_ST_fsm_state46 = 64'd17179869184;
parameter    ap_ST_fsm_state47 = 64'd34359738368;
parameter    ap_ST_fsm_state48 = 64'd68719476736;
parameter    ap_ST_fsm_state49 = 64'd137438953472;
parameter    ap_ST_fsm_state50 = 64'd274877906944;
parameter    ap_ST_fsm_state51 = 64'd549755813888;
parameter    ap_ST_fsm_state52 = 64'd1099511627776;
parameter    ap_ST_fsm_pp3_stage0 = 64'd2199023255552;
parameter    ap_ST_fsm_pp3_stage1 = 64'd4398046511104;
parameter    ap_ST_fsm_pp3_stage2 = 64'd8796093022208;
parameter    ap_ST_fsm_pp3_stage3 = 64'd17592186044416;
parameter    ap_ST_fsm_pp3_stage4 = 64'd35184372088832;
parameter    ap_ST_fsm_pp3_stage5 = 64'd70368744177664;
parameter    ap_ST_fsm_pp3_stage6 = 64'd140737488355328;
parameter    ap_ST_fsm_pp3_stage7 = 64'd281474976710656;
parameter    ap_ST_fsm_pp3_stage8 = 64'd562949953421312;
parameter    ap_ST_fsm_state64 = 64'd1125899906842624;
parameter    ap_ST_fsm_pp4_stage0 = 64'd2251799813685248;
parameter    ap_ST_fsm_state70 = 64'd4503599627370496;
parameter    ap_ST_fsm_pp5_stage0 = 64'd9007199254740992;
parameter    ap_ST_fsm_state74 = 64'd18014398509481984;
parameter    ap_ST_fsm_pp6_stage0 = 64'd36028797018963968;
parameter    ap_ST_fsm_state84 = 64'd72057594037927936;
parameter    ap_ST_fsm_state85 = 64'd144115188075855872;
parameter    ap_ST_fsm_state86 = 64'd288230376151711744;
parameter    ap_ST_fsm_state87 = 64'd576460752303423488;
parameter    ap_ST_fsm_state88 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state89 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state90 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state91 = 64'd9223372036854775808;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_X_ROWPTR_ID_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_ROWPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_X_ROWPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_ROWPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_X_ROWPTR_USER_VALUE = 0;
parameter    C_M_AXI_X_ROWPTR_PROT_VALUE = 0;
parameter    C_M_AXI_X_ROWPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_X_COLIND_ID_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_COLIND_DATA_WIDTH = 32;
parameter    C_M_AXI_X_COLIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_COLIND_TARGET_ADDR = 0;
parameter    C_M_AXI_X_COLIND_USER_VALUE = 0;
parameter    C_M_AXI_X_COLIND_PROT_VALUE = 0;
parameter    C_M_AXI_X_COLIND_CACHE_VALUE = 3;
parameter    C_M_AXI_X_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_X_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_X_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_X_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_X_DATA_USER_VALUE = 0;
parameter    C_M_AXI_X_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_X_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_ROWPTR_ID_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_ROWPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_ROWPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ROWPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_ROWPTR_USER_VALUE = 0;
parameter    C_M_AXI_Y_ROWPTR_PROT_VALUE = 0;
parameter    C_M_AXI_Y_ROWPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_COLIND_ID_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_COLIND_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_COLIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_COLIND_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_COLIND_USER_VALUE = 0;
parameter    C_M_AXI_Y_COLIND_PROT_VALUE = 0;
parameter    C_M_AXI_Y_COLIND_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_Y_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_DATA_USER_VALUE = 0;
parameter    C_M_AXI_Y_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_Y_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_ROWPTR_ID_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_ROWPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_ROWPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_ROWPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_ROWPTR_USER_VALUE = 0;
parameter    C_M_AXI_Z_ROWPTR_PROT_VALUE = 0;
parameter    C_M_AXI_Z_ROWPTR_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_COLIND_ID_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_COLIND_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_COLIND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_COLIND_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_COLIND_USER_VALUE = 0;
parameter    C_M_AXI_Z_COLIND_PROT_VALUE = 0;
parameter    C_M_AXI_Z_COLIND_CACHE_VALUE = 3;
parameter    C_M_AXI_Z_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_Z_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_Z_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_Z_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_Z_DATA_USER_VALUE = 0;
parameter    C_M_AXI_Z_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_Z_DATA_CACHE_VALUE = 3;

parameter C_M_AXI_Y_COLIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_COLIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Z_ROWPTR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Y_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Y_ROWPTR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_COLIND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_ROWPTR_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_x_rowptr_AWVALID;
input   m_axi_x_rowptr_AWREADY;
output  [C_M_AXI_X_ROWPTR_ADDR_WIDTH - 1:0] m_axi_x_rowptr_AWADDR;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_AWID;
output  [7:0] m_axi_x_rowptr_AWLEN;
output  [2:0] m_axi_x_rowptr_AWSIZE;
output  [1:0] m_axi_x_rowptr_AWBURST;
output  [1:0] m_axi_x_rowptr_AWLOCK;
output  [3:0] m_axi_x_rowptr_AWCACHE;
output  [2:0] m_axi_x_rowptr_AWPROT;
output  [3:0] m_axi_x_rowptr_AWQOS;
output  [3:0] m_axi_x_rowptr_AWREGION;
output  [C_M_AXI_X_ROWPTR_AWUSER_WIDTH - 1:0] m_axi_x_rowptr_AWUSER;
output   m_axi_x_rowptr_WVALID;
input   m_axi_x_rowptr_WREADY;
output  [C_M_AXI_X_ROWPTR_DATA_WIDTH - 1:0] m_axi_x_rowptr_WDATA;
output  [C_M_AXI_X_ROWPTR_WSTRB_WIDTH - 1:0] m_axi_x_rowptr_WSTRB;
output   m_axi_x_rowptr_WLAST;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_WID;
output  [C_M_AXI_X_ROWPTR_WUSER_WIDTH - 1:0] m_axi_x_rowptr_WUSER;
output   m_axi_x_rowptr_ARVALID;
input   m_axi_x_rowptr_ARREADY;
output  [C_M_AXI_X_ROWPTR_ADDR_WIDTH - 1:0] m_axi_x_rowptr_ARADDR;
output  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_ARID;
output  [7:0] m_axi_x_rowptr_ARLEN;
output  [2:0] m_axi_x_rowptr_ARSIZE;
output  [1:0] m_axi_x_rowptr_ARBURST;
output  [1:0] m_axi_x_rowptr_ARLOCK;
output  [3:0] m_axi_x_rowptr_ARCACHE;
output  [2:0] m_axi_x_rowptr_ARPROT;
output  [3:0] m_axi_x_rowptr_ARQOS;
output  [3:0] m_axi_x_rowptr_ARREGION;
output  [C_M_AXI_X_ROWPTR_ARUSER_WIDTH - 1:0] m_axi_x_rowptr_ARUSER;
input   m_axi_x_rowptr_RVALID;
output   m_axi_x_rowptr_RREADY;
input  [C_M_AXI_X_ROWPTR_DATA_WIDTH - 1:0] m_axi_x_rowptr_RDATA;
input   m_axi_x_rowptr_RLAST;
input  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_RID;
input  [C_M_AXI_X_ROWPTR_RUSER_WIDTH - 1:0] m_axi_x_rowptr_RUSER;
input  [1:0] m_axi_x_rowptr_RRESP;
input   m_axi_x_rowptr_BVALID;
output   m_axi_x_rowptr_BREADY;
input  [1:0] m_axi_x_rowptr_BRESP;
input  [C_M_AXI_X_ROWPTR_ID_WIDTH - 1:0] m_axi_x_rowptr_BID;
input  [C_M_AXI_X_ROWPTR_BUSER_WIDTH - 1:0] m_axi_x_rowptr_BUSER;
output   m_axi_x_colind_AWVALID;
input   m_axi_x_colind_AWREADY;
output  [C_M_AXI_X_COLIND_ADDR_WIDTH - 1:0] m_axi_x_colind_AWADDR;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_AWID;
output  [7:0] m_axi_x_colind_AWLEN;
output  [2:0] m_axi_x_colind_AWSIZE;
output  [1:0] m_axi_x_colind_AWBURST;
output  [1:0] m_axi_x_colind_AWLOCK;
output  [3:0] m_axi_x_colind_AWCACHE;
output  [2:0] m_axi_x_colind_AWPROT;
output  [3:0] m_axi_x_colind_AWQOS;
output  [3:0] m_axi_x_colind_AWREGION;
output  [C_M_AXI_X_COLIND_AWUSER_WIDTH - 1:0] m_axi_x_colind_AWUSER;
output   m_axi_x_colind_WVALID;
input   m_axi_x_colind_WREADY;
output  [C_M_AXI_X_COLIND_DATA_WIDTH - 1:0] m_axi_x_colind_WDATA;
output  [C_M_AXI_X_COLIND_WSTRB_WIDTH - 1:0] m_axi_x_colind_WSTRB;
output   m_axi_x_colind_WLAST;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_WID;
output  [C_M_AXI_X_COLIND_WUSER_WIDTH - 1:0] m_axi_x_colind_WUSER;
output   m_axi_x_colind_ARVALID;
input   m_axi_x_colind_ARREADY;
output  [C_M_AXI_X_COLIND_ADDR_WIDTH - 1:0] m_axi_x_colind_ARADDR;
output  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_ARID;
output  [7:0] m_axi_x_colind_ARLEN;
output  [2:0] m_axi_x_colind_ARSIZE;
output  [1:0] m_axi_x_colind_ARBURST;
output  [1:0] m_axi_x_colind_ARLOCK;
output  [3:0] m_axi_x_colind_ARCACHE;
output  [2:0] m_axi_x_colind_ARPROT;
output  [3:0] m_axi_x_colind_ARQOS;
output  [3:0] m_axi_x_colind_ARREGION;
output  [C_M_AXI_X_COLIND_ARUSER_WIDTH - 1:0] m_axi_x_colind_ARUSER;
input   m_axi_x_colind_RVALID;
output   m_axi_x_colind_RREADY;
input  [C_M_AXI_X_COLIND_DATA_WIDTH - 1:0] m_axi_x_colind_RDATA;
input   m_axi_x_colind_RLAST;
input  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_RID;
input  [C_M_AXI_X_COLIND_RUSER_WIDTH - 1:0] m_axi_x_colind_RUSER;
input  [1:0] m_axi_x_colind_RRESP;
input   m_axi_x_colind_BVALID;
output   m_axi_x_colind_BREADY;
input  [1:0] m_axi_x_colind_BRESP;
input  [C_M_AXI_X_COLIND_ID_WIDTH - 1:0] m_axi_x_colind_BID;
input  [C_M_AXI_X_COLIND_BUSER_WIDTH - 1:0] m_axi_x_colind_BUSER;
output   m_axi_x_data_AWVALID;
input   m_axi_x_data_AWREADY;
output  [C_M_AXI_X_DATA_ADDR_WIDTH - 1:0] m_axi_x_data_AWADDR;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_AWID;
output  [7:0] m_axi_x_data_AWLEN;
output  [2:0] m_axi_x_data_AWSIZE;
output  [1:0] m_axi_x_data_AWBURST;
output  [1:0] m_axi_x_data_AWLOCK;
output  [3:0] m_axi_x_data_AWCACHE;
output  [2:0] m_axi_x_data_AWPROT;
output  [3:0] m_axi_x_data_AWQOS;
output  [3:0] m_axi_x_data_AWREGION;
output  [C_M_AXI_X_DATA_AWUSER_WIDTH - 1:0] m_axi_x_data_AWUSER;
output   m_axi_x_data_WVALID;
input   m_axi_x_data_WREADY;
output  [C_M_AXI_X_DATA_DATA_WIDTH - 1:0] m_axi_x_data_WDATA;
output  [C_M_AXI_X_DATA_WSTRB_WIDTH - 1:0] m_axi_x_data_WSTRB;
output   m_axi_x_data_WLAST;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_WID;
output  [C_M_AXI_X_DATA_WUSER_WIDTH - 1:0] m_axi_x_data_WUSER;
output   m_axi_x_data_ARVALID;
input   m_axi_x_data_ARREADY;
output  [C_M_AXI_X_DATA_ADDR_WIDTH - 1:0] m_axi_x_data_ARADDR;
output  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_ARID;
output  [7:0] m_axi_x_data_ARLEN;
output  [2:0] m_axi_x_data_ARSIZE;
output  [1:0] m_axi_x_data_ARBURST;
output  [1:0] m_axi_x_data_ARLOCK;
output  [3:0] m_axi_x_data_ARCACHE;
output  [2:0] m_axi_x_data_ARPROT;
output  [3:0] m_axi_x_data_ARQOS;
output  [3:0] m_axi_x_data_ARREGION;
output  [C_M_AXI_X_DATA_ARUSER_WIDTH - 1:0] m_axi_x_data_ARUSER;
input   m_axi_x_data_RVALID;
output   m_axi_x_data_RREADY;
input  [C_M_AXI_X_DATA_DATA_WIDTH - 1:0] m_axi_x_data_RDATA;
input   m_axi_x_data_RLAST;
input  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_RID;
input  [C_M_AXI_X_DATA_RUSER_WIDTH - 1:0] m_axi_x_data_RUSER;
input  [1:0] m_axi_x_data_RRESP;
input   m_axi_x_data_BVALID;
output   m_axi_x_data_BREADY;
input  [1:0] m_axi_x_data_BRESP;
input  [C_M_AXI_X_DATA_ID_WIDTH - 1:0] m_axi_x_data_BID;
input  [C_M_AXI_X_DATA_BUSER_WIDTH - 1:0] m_axi_x_data_BUSER;
output   m_axi_y_rowptr_AWVALID;
input   m_axi_y_rowptr_AWREADY;
output  [C_M_AXI_Y_ROWPTR_ADDR_WIDTH - 1:0] m_axi_y_rowptr_AWADDR;
output  [C_M_AXI_Y_ROWPTR_ID_WIDTH - 1:0] m_axi_y_rowptr_AWID;
output  [7:0] m_axi_y_rowptr_AWLEN;
output  [2:0] m_axi_y_rowptr_AWSIZE;
output  [1:0] m_axi_y_rowptr_AWBURST;
output  [1:0] m_axi_y_rowptr_AWLOCK;
output  [3:0] m_axi_y_rowptr_AWCACHE;
output  [2:0] m_axi_y_rowptr_AWPROT;
output  [3:0] m_axi_y_rowptr_AWQOS;
output  [3:0] m_axi_y_rowptr_AWREGION;
output  [C_M_AXI_Y_ROWPTR_AWUSER_WIDTH - 1:0] m_axi_y_rowptr_AWUSER;
output   m_axi_y_rowptr_WVALID;
input   m_axi_y_rowptr_WREADY;
output  [C_M_AXI_Y_ROWPTR_DATA_WIDTH - 1:0] m_axi_y_rowptr_WDATA;
output  [C_M_AXI_Y_ROWPTR_WSTRB_WIDTH - 1:0] m_axi_y_rowptr_WSTRB;
output   m_axi_y_rowptr_WLAST;
output  [C_M_AXI_Y_ROWPTR_ID_WIDTH - 1:0] m_axi_y_rowptr_WID;
output  [C_M_AXI_Y_ROWPTR_WUSER_WIDTH - 1:0] m_axi_y_rowptr_WUSER;
output   m_axi_y_rowptr_ARVALID;
input   m_axi_y_rowptr_ARREADY;
output  [C_M_AXI_Y_ROWPTR_ADDR_WIDTH - 1:0] m_axi_y_rowptr_ARADDR;
output  [C_M_AXI_Y_ROWPTR_ID_WIDTH - 1:0] m_axi_y_rowptr_ARID;
output  [7:0] m_axi_y_rowptr_ARLEN;
output  [2:0] m_axi_y_rowptr_ARSIZE;
output  [1:0] m_axi_y_rowptr_ARBURST;
output  [1:0] m_axi_y_rowptr_ARLOCK;
output  [3:0] m_axi_y_rowptr_ARCACHE;
output  [2:0] m_axi_y_rowptr_ARPROT;
output  [3:0] m_axi_y_rowptr_ARQOS;
output  [3:0] m_axi_y_rowptr_ARREGION;
output  [C_M_AXI_Y_ROWPTR_ARUSER_WIDTH - 1:0] m_axi_y_rowptr_ARUSER;
input   m_axi_y_rowptr_RVALID;
output   m_axi_y_rowptr_RREADY;
input  [C_M_AXI_Y_ROWPTR_DATA_WIDTH - 1:0] m_axi_y_rowptr_RDATA;
input   m_axi_y_rowptr_RLAST;
input  [C_M_AXI_Y_ROWPTR_ID_WIDTH - 1:0] m_axi_y_rowptr_RID;
input  [C_M_AXI_Y_ROWPTR_RUSER_WIDTH - 1:0] m_axi_y_rowptr_RUSER;
input  [1:0] m_axi_y_rowptr_RRESP;
input   m_axi_y_rowptr_BVALID;
output   m_axi_y_rowptr_BREADY;
input  [1:0] m_axi_y_rowptr_BRESP;
input  [C_M_AXI_Y_ROWPTR_ID_WIDTH - 1:0] m_axi_y_rowptr_BID;
input  [C_M_AXI_Y_ROWPTR_BUSER_WIDTH - 1:0] m_axi_y_rowptr_BUSER;
output   m_axi_y_colind_AWVALID;
input   m_axi_y_colind_AWREADY;
output  [C_M_AXI_Y_COLIND_ADDR_WIDTH - 1:0] m_axi_y_colind_AWADDR;
output  [C_M_AXI_Y_COLIND_ID_WIDTH - 1:0] m_axi_y_colind_AWID;
output  [7:0] m_axi_y_colind_AWLEN;
output  [2:0] m_axi_y_colind_AWSIZE;
output  [1:0] m_axi_y_colind_AWBURST;
output  [1:0] m_axi_y_colind_AWLOCK;
output  [3:0] m_axi_y_colind_AWCACHE;
output  [2:0] m_axi_y_colind_AWPROT;
output  [3:0] m_axi_y_colind_AWQOS;
output  [3:0] m_axi_y_colind_AWREGION;
output  [C_M_AXI_Y_COLIND_AWUSER_WIDTH - 1:0] m_axi_y_colind_AWUSER;
output   m_axi_y_colind_WVALID;
input   m_axi_y_colind_WREADY;
output  [C_M_AXI_Y_COLIND_DATA_WIDTH - 1:0] m_axi_y_colind_WDATA;
output  [C_M_AXI_Y_COLIND_WSTRB_WIDTH - 1:0] m_axi_y_colind_WSTRB;
output   m_axi_y_colind_WLAST;
output  [C_M_AXI_Y_COLIND_ID_WIDTH - 1:0] m_axi_y_colind_WID;
output  [C_M_AXI_Y_COLIND_WUSER_WIDTH - 1:0] m_axi_y_colind_WUSER;
output   m_axi_y_colind_ARVALID;
input   m_axi_y_colind_ARREADY;
output  [C_M_AXI_Y_COLIND_ADDR_WIDTH - 1:0] m_axi_y_colind_ARADDR;
output  [C_M_AXI_Y_COLIND_ID_WIDTH - 1:0] m_axi_y_colind_ARID;
output  [7:0] m_axi_y_colind_ARLEN;
output  [2:0] m_axi_y_colind_ARSIZE;
output  [1:0] m_axi_y_colind_ARBURST;
output  [1:0] m_axi_y_colind_ARLOCK;
output  [3:0] m_axi_y_colind_ARCACHE;
output  [2:0] m_axi_y_colind_ARPROT;
output  [3:0] m_axi_y_colind_ARQOS;
output  [3:0] m_axi_y_colind_ARREGION;
output  [C_M_AXI_Y_COLIND_ARUSER_WIDTH - 1:0] m_axi_y_colind_ARUSER;
input   m_axi_y_colind_RVALID;
output   m_axi_y_colind_RREADY;
input  [C_M_AXI_Y_COLIND_DATA_WIDTH - 1:0] m_axi_y_colind_RDATA;
input   m_axi_y_colind_RLAST;
input  [C_M_AXI_Y_COLIND_ID_WIDTH - 1:0] m_axi_y_colind_RID;
input  [C_M_AXI_Y_COLIND_RUSER_WIDTH - 1:0] m_axi_y_colind_RUSER;
input  [1:0] m_axi_y_colind_RRESP;
input   m_axi_y_colind_BVALID;
output   m_axi_y_colind_BREADY;
input  [1:0] m_axi_y_colind_BRESP;
input  [C_M_AXI_Y_COLIND_ID_WIDTH - 1:0] m_axi_y_colind_BID;
input  [C_M_AXI_Y_COLIND_BUSER_WIDTH - 1:0] m_axi_y_colind_BUSER;
output   m_axi_y_data_AWVALID;
input   m_axi_y_data_AWREADY;
output  [C_M_AXI_Y_DATA_ADDR_WIDTH - 1:0] m_axi_y_data_AWADDR;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_AWID;
output  [7:0] m_axi_y_data_AWLEN;
output  [2:0] m_axi_y_data_AWSIZE;
output  [1:0] m_axi_y_data_AWBURST;
output  [1:0] m_axi_y_data_AWLOCK;
output  [3:0] m_axi_y_data_AWCACHE;
output  [2:0] m_axi_y_data_AWPROT;
output  [3:0] m_axi_y_data_AWQOS;
output  [3:0] m_axi_y_data_AWREGION;
output  [C_M_AXI_Y_DATA_AWUSER_WIDTH - 1:0] m_axi_y_data_AWUSER;
output   m_axi_y_data_WVALID;
input   m_axi_y_data_WREADY;
output  [C_M_AXI_Y_DATA_DATA_WIDTH - 1:0] m_axi_y_data_WDATA;
output  [C_M_AXI_Y_DATA_WSTRB_WIDTH - 1:0] m_axi_y_data_WSTRB;
output   m_axi_y_data_WLAST;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_WID;
output  [C_M_AXI_Y_DATA_WUSER_WIDTH - 1:0] m_axi_y_data_WUSER;
output   m_axi_y_data_ARVALID;
input   m_axi_y_data_ARREADY;
output  [C_M_AXI_Y_DATA_ADDR_WIDTH - 1:0] m_axi_y_data_ARADDR;
output  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_ARID;
output  [7:0] m_axi_y_data_ARLEN;
output  [2:0] m_axi_y_data_ARSIZE;
output  [1:0] m_axi_y_data_ARBURST;
output  [1:0] m_axi_y_data_ARLOCK;
output  [3:0] m_axi_y_data_ARCACHE;
output  [2:0] m_axi_y_data_ARPROT;
output  [3:0] m_axi_y_data_ARQOS;
output  [3:0] m_axi_y_data_ARREGION;
output  [C_M_AXI_Y_DATA_ARUSER_WIDTH - 1:0] m_axi_y_data_ARUSER;
input   m_axi_y_data_RVALID;
output   m_axi_y_data_RREADY;
input  [C_M_AXI_Y_DATA_DATA_WIDTH - 1:0] m_axi_y_data_RDATA;
input   m_axi_y_data_RLAST;
input  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_RID;
input  [C_M_AXI_Y_DATA_RUSER_WIDTH - 1:0] m_axi_y_data_RUSER;
input  [1:0] m_axi_y_data_RRESP;
input   m_axi_y_data_BVALID;
output   m_axi_y_data_BREADY;
input  [1:0] m_axi_y_data_BRESP;
input  [C_M_AXI_Y_DATA_ID_WIDTH - 1:0] m_axi_y_data_BID;
input  [C_M_AXI_Y_DATA_BUSER_WIDTH - 1:0] m_axi_y_data_BUSER;
output   m_axi_z_rowptr_AWVALID;
input   m_axi_z_rowptr_AWREADY;
output  [C_M_AXI_Z_ROWPTR_ADDR_WIDTH - 1:0] m_axi_z_rowptr_AWADDR;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_AWID;
output  [7:0] m_axi_z_rowptr_AWLEN;
output  [2:0] m_axi_z_rowptr_AWSIZE;
output  [1:0] m_axi_z_rowptr_AWBURST;
output  [1:0] m_axi_z_rowptr_AWLOCK;
output  [3:0] m_axi_z_rowptr_AWCACHE;
output  [2:0] m_axi_z_rowptr_AWPROT;
output  [3:0] m_axi_z_rowptr_AWQOS;
output  [3:0] m_axi_z_rowptr_AWREGION;
output  [C_M_AXI_Z_ROWPTR_AWUSER_WIDTH - 1:0] m_axi_z_rowptr_AWUSER;
output   m_axi_z_rowptr_WVALID;
input   m_axi_z_rowptr_WREADY;
output  [C_M_AXI_Z_ROWPTR_DATA_WIDTH - 1:0] m_axi_z_rowptr_WDATA;
output  [C_M_AXI_Z_ROWPTR_WSTRB_WIDTH - 1:0] m_axi_z_rowptr_WSTRB;
output   m_axi_z_rowptr_WLAST;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_WID;
output  [C_M_AXI_Z_ROWPTR_WUSER_WIDTH - 1:0] m_axi_z_rowptr_WUSER;
output   m_axi_z_rowptr_ARVALID;
input   m_axi_z_rowptr_ARREADY;
output  [C_M_AXI_Z_ROWPTR_ADDR_WIDTH - 1:0] m_axi_z_rowptr_ARADDR;
output  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_ARID;
output  [7:0] m_axi_z_rowptr_ARLEN;
output  [2:0] m_axi_z_rowptr_ARSIZE;
output  [1:0] m_axi_z_rowptr_ARBURST;
output  [1:0] m_axi_z_rowptr_ARLOCK;
output  [3:0] m_axi_z_rowptr_ARCACHE;
output  [2:0] m_axi_z_rowptr_ARPROT;
output  [3:0] m_axi_z_rowptr_ARQOS;
output  [3:0] m_axi_z_rowptr_ARREGION;
output  [C_M_AXI_Z_ROWPTR_ARUSER_WIDTH - 1:0] m_axi_z_rowptr_ARUSER;
input   m_axi_z_rowptr_RVALID;
output   m_axi_z_rowptr_RREADY;
input  [C_M_AXI_Z_ROWPTR_DATA_WIDTH - 1:0] m_axi_z_rowptr_RDATA;
input   m_axi_z_rowptr_RLAST;
input  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_RID;
input  [C_M_AXI_Z_ROWPTR_RUSER_WIDTH - 1:0] m_axi_z_rowptr_RUSER;
input  [1:0] m_axi_z_rowptr_RRESP;
input   m_axi_z_rowptr_BVALID;
output   m_axi_z_rowptr_BREADY;
input  [1:0] m_axi_z_rowptr_BRESP;
input  [C_M_AXI_Z_ROWPTR_ID_WIDTH - 1:0] m_axi_z_rowptr_BID;
input  [C_M_AXI_Z_ROWPTR_BUSER_WIDTH - 1:0] m_axi_z_rowptr_BUSER;
output   m_axi_z_colind_AWVALID;
input   m_axi_z_colind_AWREADY;
output  [C_M_AXI_Z_COLIND_ADDR_WIDTH - 1:0] m_axi_z_colind_AWADDR;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_AWID;
output  [7:0] m_axi_z_colind_AWLEN;
output  [2:0] m_axi_z_colind_AWSIZE;
output  [1:0] m_axi_z_colind_AWBURST;
output  [1:0] m_axi_z_colind_AWLOCK;
output  [3:0] m_axi_z_colind_AWCACHE;
output  [2:0] m_axi_z_colind_AWPROT;
output  [3:0] m_axi_z_colind_AWQOS;
output  [3:0] m_axi_z_colind_AWREGION;
output  [C_M_AXI_Z_COLIND_AWUSER_WIDTH - 1:0] m_axi_z_colind_AWUSER;
output   m_axi_z_colind_WVALID;
input   m_axi_z_colind_WREADY;
output  [C_M_AXI_Z_COLIND_DATA_WIDTH - 1:0] m_axi_z_colind_WDATA;
output  [C_M_AXI_Z_COLIND_WSTRB_WIDTH - 1:0] m_axi_z_colind_WSTRB;
output   m_axi_z_colind_WLAST;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_WID;
output  [C_M_AXI_Z_COLIND_WUSER_WIDTH - 1:0] m_axi_z_colind_WUSER;
output   m_axi_z_colind_ARVALID;
input   m_axi_z_colind_ARREADY;
output  [C_M_AXI_Z_COLIND_ADDR_WIDTH - 1:0] m_axi_z_colind_ARADDR;
output  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_ARID;
output  [7:0] m_axi_z_colind_ARLEN;
output  [2:0] m_axi_z_colind_ARSIZE;
output  [1:0] m_axi_z_colind_ARBURST;
output  [1:0] m_axi_z_colind_ARLOCK;
output  [3:0] m_axi_z_colind_ARCACHE;
output  [2:0] m_axi_z_colind_ARPROT;
output  [3:0] m_axi_z_colind_ARQOS;
output  [3:0] m_axi_z_colind_ARREGION;
output  [C_M_AXI_Z_COLIND_ARUSER_WIDTH - 1:0] m_axi_z_colind_ARUSER;
input   m_axi_z_colind_RVALID;
output   m_axi_z_colind_RREADY;
input  [C_M_AXI_Z_COLIND_DATA_WIDTH - 1:0] m_axi_z_colind_RDATA;
input   m_axi_z_colind_RLAST;
input  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_RID;
input  [C_M_AXI_Z_COLIND_RUSER_WIDTH - 1:0] m_axi_z_colind_RUSER;
input  [1:0] m_axi_z_colind_RRESP;
input   m_axi_z_colind_BVALID;
output   m_axi_z_colind_BREADY;
input  [1:0] m_axi_z_colind_BRESP;
input  [C_M_AXI_Z_COLIND_ID_WIDTH - 1:0] m_axi_z_colind_BID;
input  [C_M_AXI_Z_COLIND_BUSER_WIDTH - 1:0] m_axi_z_colind_BUSER;
output   m_axi_z_data_AWVALID;
input   m_axi_z_data_AWREADY;
output  [C_M_AXI_Z_DATA_ADDR_WIDTH - 1:0] m_axi_z_data_AWADDR;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_AWID;
output  [7:0] m_axi_z_data_AWLEN;
output  [2:0] m_axi_z_data_AWSIZE;
output  [1:0] m_axi_z_data_AWBURST;
output  [1:0] m_axi_z_data_AWLOCK;
output  [3:0] m_axi_z_data_AWCACHE;
output  [2:0] m_axi_z_data_AWPROT;
output  [3:0] m_axi_z_data_AWQOS;
output  [3:0] m_axi_z_data_AWREGION;
output  [C_M_AXI_Z_DATA_AWUSER_WIDTH - 1:0] m_axi_z_data_AWUSER;
output   m_axi_z_data_WVALID;
input   m_axi_z_data_WREADY;
output  [C_M_AXI_Z_DATA_DATA_WIDTH - 1:0] m_axi_z_data_WDATA;
output  [C_M_AXI_Z_DATA_WSTRB_WIDTH - 1:0] m_axi_z_data_WSTRB;
output   m_axi_z_data_WLAST;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_WID;
output  [C_M_AXI_Z_DATA_WUSER_WIDTH - 1:0] m_axi_z_data_WUSER;
output   m_axi_z_data_ARVALID;
input   m_axi_z_data_ARREADY;
output  [C_M_AXI_Z_DATA_ADDR_WIDTH - 1:0] m_axi_z_data_ARADDR;
output  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_ARID;
output  [7:0] m_axi_z_data_ARLEN;
output  [2:0] m_axi_z_data_ARSIZE;
output  [1:0] m_axi_z_data_ARBURST;
output  [1:0] m_axi_z_data_ARLOCK;
output  [3:0] m_axi_z_data_ARCACHE;
output  [2:0] m_axi_z_data_ARPROT;
output  [3:0] m_axi_z_data_ARQOS;
output  [3:0] m_axi_z_data_ARREGION;
output  [C_M_AXI_Z_DATA_ARUSER_WIDTH - 1:0] m_axi_z_data_ARUSER;
input   m_axi_z_data_RVALID;
output   m_axi_z_data_RREADY;
input  [C_M_AXI_Z_DATA_DATA_WIDTH - 1:0] m_axi_z_data_RDATA;
input   m_axi_z_data_RLAST;
input  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_RID;
input  [C_M_AXI_Z_DATA_RUSER_WIDTH - 1:0] m_axi_z_data_RUSER;
input  [1:0] m_axi_z_data_RRESP;
input   m_axi_z_data_BVALID;
output   m_axi_z_data_BREADY;
input  [1:0] m_axi_z_data_BRESP;
input  [C_M_AXI_Z_DATA_ID_WIDTH - 1:0] m_axi_z_data_BID;
input  [C_M_AXI_Z_DATA_BUSER_WIDTH - 1:0] m_axi_z_data_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    x_rowptr_blk_n_AR;
wire    ap_CS_fsm_state13;
reg    x_rowptr_blk_n_R;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    x_colind_blk_n_AR;
wire    ap_CS_fsm_state24;
reg   [0:0] cmp1_i_reg_981;
reg    x_colind_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln32_reg_1030;
reg    x_data_blk_n_AR;
reg    ap_enable_reg_pp2_iter3;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter2_reg;
reg   [0:0] icmp_ln38_reg_1044;
reg    x_data_blk_n_R;
reg    ap_enable_reg_pp2_iter10;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter9_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter9_reg;
reg    y_rowptr_blk_n_AR;
wire    ap_CS_fsm_state44;
reg    y_rowptr_blk_n_R;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
reg    y_colind_blk_n_AR;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage1;
reg   [0:0] icmp_ln14_reg_1079;
reg    y_colind_blk_n_R;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_pp3_stage8;
reg    y_data_blk_n_AR;
reg    y_data_blk_n_R;
reg    z_rowptr_blk_n_AW;
reg    z_rowptr_blk_n_W;
wire    ap_CS_fsm_state2;
reg    z_rowptr_blk_n_B;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state91;
reg    z_colind_blk_n_AW;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln1499_reg_1209;
reg    z_colind_blk_n_W;
reg    ap_enable_reg_pp6_iter3;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter2_reg;
reg    z_colind_blk_n_B;
reg    ap_enable_reg_pp6_iter8;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter7_reg;
reg    z_data_blk_n_AW;
reg    z_data_blk_n_W;
reg    z_data_blk_n_B;
wire    x_rowptr_AWREADY;
wire    x_rowptr_WREADY;
reg    x_rowptr_ARVALID;
wire    x_rowptr_ARREADY;
wire    x_rowptr_RVALID;
reg    x_rowptr_RREADY;
wire   [31:0] x_rowptr_RDATA;
wire    x_rowptr_RLAST;
wire   [0:0] x_rowptr_RID;
wire   [0:0] x_rowptr_RUSER;
wire   [1:0] x_rowptr_RRESP;
wire    x_rowptr_BVALID;
wire   [1:0] x_rowptr_BRESP;
wire   [0:0] x_rowptr_BID;
wire   [0:0] x_rowptr_BUSER;
wire    x_colind_AWREADY;
wire    x_colind_WREADY;
reg    x_colind_ARVALID;
wire    x_colind_ARREADY;
wire    x_colind_RVALID;
reg    x_colind_RREADY;
wire   [31:0] x_colind_RDATA;
wire    x_colind_RLAST;
wire   [0:0] x_colind_RID;
wire   [0:0] x_colind_RUSER;
wire   [1:0] x_colind_RRESP;
wire    x_colind_BVALID;
wire   [1:0] x_colind_BRESP;
wire   [0:0] x_colind_BID;
wire   [0:0] x_colind_BUSER;
wire    x_data_AWREADY;
wire    x_data_WREADY;
reg    x_data_ARVALID;
wire    x_data_ARREADY;
wire    x_data_RVALID;
reg    x_data_RREADY;
wire   [31:0] x_data_RDATA;
wire    x_data_RLAST;
wire   [0:0] x_data_RID;
wire   [0:0] x_data_RUSER;
wire   [1:0] x_data_RRESP;
wire    x_data_BVALID;
wire   [1:0] x_data_BRESP;
wire   [0:0] x_data_BID;
wire   [0:0] x_data_BUSER;
wire    y_rowptr_AWREADY;
wire    y_rowptr_WREADY;
reg    y_rowptr_ARVALID;
wire    y_rowptr_ARREADY;
wire    y_rowptr_RVALID;
reg    y_rowptr_RREADY;
wire   [31:0] y_rowptr_RDATA;
wire    y_rowptr_RLAST;
wire   [0:0] y_rowptr_RID;
wire   [0:0] y_rowptr_RUSER;
wire   [1:0] y_rowptr_RRESP;
wire    y_rowptr_BVALID;
wire   [1:0] y_rowptr_BRESP;
wire   [0:0] y_rowptr_BID;
wire   [0:0] y_rowptr_BUSER;
wire    y_colind_AWREADY;
wire    y_colind_WREADY;
reg    y_colind_ARVALID;
wire    y_colind_ARREADY;
wire    y_colind_RVALID;
reg    y_colind_RREADY;
wire   [31:0] y_colind_RDATA;
wire    y_colind_RLAST;
wire   [0:0] y_colind_RID;
wire   [0:0] y_colind_RUSER;
wire   [1:0] y_colind_RRESP;
wire    y_colind_BVALID;
wire   [1:0] y_colind_BRESP;
wire   [0:0] y_colind_BID;
wire   [0:0] y_colind_BUSER;
wire    y_data_AWREADY;
wire    y_data_WREADY;
reg    y_data_ARVALID;
wire    y_data_ARREADY;
wire    y_data_RVALID;
reg    y_data_RREADY;
wire   [31:0] y_data_RDATA;
wire    y_data_RLAST;
wire   [0:0] y_data_RID;
wire   [0:0] y_data_RUSER;
wire   [1:0] y_data_RRESP;
wire    y_data_BVALID;
wire   [1:0] y_data_BRESP;
wire   [0:0] y_data_BID;
wire   [0:0] y_data_BUSER;
reg    z_rowptr_AWVALID;
wire    z_rowptr_AWREADY;
reg   [63:0] z_rowptr_AWADDR;
reg   [31:0] z_rowptr_AWLEN;
reg    z_rowptr_WVALID;
wire    z_rowptr_WREADY;
reg   [31:0] z_rowptr_WDATA;
wire    z_rowptr_ARREADY;
wire    z_rowptr_RVALID;
wire   [31:0] z_rowptr_RDATA;
wire    z_rowptr_RLAST;
wire   [0:0] z_rowptr_RID;
wire   [0:0] z_rowptr_RUSER;
wire   [1:0] z_rowptr_RRESP;
wire    z_rowptr_BVALID;
reg    z_rowptr_BREADY;
wire   [1:0] z_rowptr_BRESP;
wire   [0:0] z_rowptr_BID;
wire   [0:0] z_rowptr_BUSER;
reg    z_colind_AWVALID;
wire    z_colind_AWREADY;
reg    z_colind_WVALID;
wire    z_colind_WREADY;
wire   [31:0] z_colind_WDATA;
wire    z_colind_ARREADY;
wire    z_colind_RVALID;
wire   [31:0] z_colind_RDATA;
wire    z_colind_RLAST;
wire   [0:0] z_colind_RID;
wire   [0:0] z_colind_RUSER;
wire   [1:0] z_colind_RRESP;
wire    z_colind_BVALID;
reg    z_colind_BREADY;
wire   [1:0] z_colind_BRESP;
wire   [0:0] z_colind_BID;
wire   [0:0] z_colind_BUSER;
reg    z_data_AWVALID;
wire    z_data_AWREADY;
reg    z_data_WVALID;
wire    z_data_WREADY;
wire    z_data_ARREADY;
wire    z_data_RVALID;
wire   [31:0] z_data_RDATA;
wire    z_data_RLAST;
wire   [0:0] z_data_RID;
wire   [0:0] z_data_RUSER;
wire   [1:0] z_data_RRESP;
wire    z_data_BVALID;
reg    z_data_BREADY;
wire   [1:0] z_data_BRESP;
wire   [0:0] z_data_BID;
wire   [0:0] z_data_BUSER;
reg   [63:0] j_2_reg_412;
reg   [63:0] j_2_reg_412_pp2_iter1_reg;
wire    ap_block_state31_pp2_stage0_iter0;
reg    ap_block_state32_pp2_stage0_iter1;
wire    ap_block_state33_pp2_stage0_iter2;
wire    ap_block_state34_pp2_stage0_iter3;
reg    ap_predicate_op203_readreq_state34;
reg    ap_block_state34_io;
wire    ap_block_state35_pp2_stage0_iter4;
wire    ap_block_state36_pp2_stage0_iter5;
wire    ap_block_state37_pp2_stage0_iter6;
wire    ap_block_state38_pp2_stage0_iter7;
wire    ap_block_state39_pp2_stage0_iter8;
wire    ap_block_state40_pp2_stage0_iter9;
reg    ap_predicate_op210_read_state41;
reg    ap_block_state41_pp2_stage0_iter10;
wire    ap_block_state42_pp2_stage0_iter11;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] extracted_scalar_V_2_reg_422;
reg   [0:0] found_reg_432;
reg   [8:0] i_5_reg_481;
reg   [8:0] i_5_reg_481_pp3_iter1_reg;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state53_pp3_stage0_iter0;
wire    ap_block_state62_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
reg  signed [31:0] j_4_reg_493;
reg   [8:0] i_6_reg_503;
reg   [8:0] i_7_reg_514;
reg   [8:0] i_9_reg_525;
reg   [8:0] i_9_reg_525_pp6_iter1_reg;
wire    ap_CS_fsm_pp6_stage0;
wire    ap_block_state75_pp6_stage0_iter0;
wire    ap_block_state76_pp6_stage0_iter1;
wire    ap_block_state77_pp6_stage0_iter2;
reg    ap_block_state77_io;
wire    ap_block_state78_pp6_stage0_iter3;
reg    ap_block_state78_io;
wire    ap_block_state79_pp6_stage0_iter4;
wire    ap_block_state80_pp6_stage0_iter5;
wire    ap_block_state81_pp6_stage0_iter6;
wire    ap_block_state82_pp6_stage0_iter7;
reg    ap_block_state83_pp6_stage0_iter8;
reg    ap_block_pp6_stage0_11001;
reg   [8:0] i_9_reg_525_pp6_iter2_reg;
wire   [8:0] add_ln102_fu_552_p2;
wire    ap_CS_fsm_state8;
wire   [8:0] add_ln102_1_fu_569_p2;
wire    ap_CS_fsm_state10;
wire   [8:0] indvars_iv_next145_fu_603_p2;
reg   [8:0] indvars_iv_next145_reg_953;
wire    ap_CS_fsm_state12;
reg  signed [31:0] start_idx_reg_967;
reg  signed [31:0] end_idx_reg_974;
wire   [0:0] cmp1_i_fu_626_p2;
wire    ap_CS_fsm_state22;
wire  signed [63:0] sext_ln154_fu_630_p1;
reg  signed [63:0] sext_ln154_reg_985;
wire  signed [63:0] sext_ln154_1_fu_633_p1;
reg  signed [63:0] sext_ln154_1_reg_990;
wire   [31:0] sub_ln32_fu_636_p2;
reg   [31:0] sub_ln32_reg_995;
reg   [63:0] x_colind_addr_reg_1000;
wire   [8:0] add_ln154_fu_646_p2;
reg   [8:0] add_ln154_reg_1006;
wire    ap_CS_fsm_state23;
reg   [31:0] extracted_scalar_V_1_reg_1011;
wire   [0:0] icmp_ln154_fu_655_p2;
wire   [63:0] zext_ln154_fu_661_p1;
reg   [63:0] zext_ln154_reg_1020;
wire   [31:0] zext_ln154_1_fu_665_p1;
reg   [31:0] zext_ln154_1_reg_1025;
wire   [0:0] icmp_ln32_fu_669_p2;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter1_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter3_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter4_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter5_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter6_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter7_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter8_reg;
reg   [0:0] icmp_ln32_reg_1030_pp2_iter10_reg;
wire   [63:0] add_ln32_fu_674_p2;
reg   [63:0] add_ln32_reg_1034;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] col_idx_1_reg_1039;
wire   [0:0] icmp_ln38_fu_680_p2;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter3_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter4_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter5_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter6_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter7_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter8_reg;
reg   [0:0] icmp_ln38_reg_1044_pp2_iter10_reg;
reg   [63:0] x_data_addr_reg_1048;
reg   [31:0] extracted_scalar_V_3_reg_1054;
wire   [0:0] icmp_ln1499_1_fu_690_p2;
wire    ap_CS_fsm_state43;
reg   [63:0] y_rowptr_addr_reg_1063;
reg   [31:0] start_idx_2_reg_1069;
reg   [31:0] end_idx_1_reg_1074;
wire   [0:0] icmp_ln14_fu_701_p2;
reg   [0:0] icmp_ln14_reg_1079_pp3_iter1_reg;
wire    ap_block_state54_pp3_stage1_iter0;
reg    ap_block_state54_io;
wire    ap_block_state63_pp3_stage1_iter1;
reg    ap_block_pp3_stage1_11001;
wire   [0:0] icmp_ln21_fu_725_p2;
reg   [0:0] icmp_ln21_reg_1095;
wire   [8:0] add_ln14_fu_730_p2;
reg   [8:0] add_ln14_reg_1100;
wire    ap_CS_fsm_pp3_stage4;
wire    ap_block_state57_pp3_stage4_iter0;
wire    ap_block_pp3_stage4_11001;
wire   [31:0] j_5_fu_736_p2;
reg   [31:0] j_5_reg_1105;
wire    ap_CS_fsm_pp3_stage7;
wire    ap_block_state60_pp3_stage7_iter0;
wire    ap_block_pp3_stage7_11001;
reg   [31:0] col_idx_2_reg_1110;
reg    ap_block_state61_pp3_stage8_iter0;
reg    ap_block_pp3_stage8_11001;
reg   [31:0] y_data_addr_read_reg_1115;
wire   [0:0] and_ln21_fu_751_p2;
reg   [0:0] and_ln21_reg_1120;
wire   [31:0] j_6_fu_756_p3;
reg   [31:0] j_6_reg_1125;
reg    ap_enable_reg_pp3_iter1;
wire  signed [47:0] sext_ln54_fu_775_p1;
reg  signed [47:0] sext_ln54_reg_1130;
wire    ap_CS_fsm_state64;
wire   [8:0] add_ln54_fu_779_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state65_pp4_stage0_iter0;
wire    ap_block_state66_pp4_stage0_iter1;
wire    ap_block_state67_pp4_stage0_iter2;
wire    ap_block_state68_pp4_stage0_iter3;
wire    ap_block_state69_pp4_stage0_iter4;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln54_fu_785_p2;
reg   [0:0] icmp_ln54_reg_1140;
reg   [0:0] icmp_ln54_reg_1140_pp4_iter1_reg;
reg   [0:0] icmp_ln54_reg_1140_pp4_iter2_reg;
reg   [0:0] icmp_ln54_reg_1140_pp4_iter3_reg;
reg   [8:0] row_V_addr_2_reg_1144;
reg   [8:0] row_V_addr_2_reg_1144_pp4_iter1_reg;
reg   [8:0] row_V_addr_2_reg_1144_pp4_iter2_reg;
reg   [8:0] row_V_addr_2_reg_1144_pp4_iter3_reg;
wire   [31:0] extracted_row_V_q1;
reg  signed [31:0] r_V_reg_1150;
reg    ap_enable_reg_pp4_iter1;
reg   [31:0] trunc_ln_reg_1160;
wire   [8:0] add_ln66_fu_814_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state71_pp5_stage0_iter0;
wire    ap_block_state72_pp5_stage0_iter1;
wire    ap_block_state73_pp5_stage0_iter2;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln66_fu_820_p2;
reg   [0:0] icmp_ln66_reg_1170;
reg   [0:0] icmp_ln66_reg_1170_pp5_iter1_reg;
reg   [8:0] row_V_1_addr_3_reg_1174;
reg   [8:0] row_V_1_addr_3_reg_1174_pp5_iter1_reg;
wire   [31:0] add_ln703_fu_832_p2;
reg   [31:0] add_ln703_reg_1185;
wire   [8:0] add_ln82_fu_843_p2;
reg   [8:0] add_ln82_reg_1190;
reg    ap_enable_reg_pp6_iter0;
wire   [0:0] icmp_ln82_fu_849_p2;
reg   [0:0] icmp_ln82_reg_1195;
wire   [31:0] buffer_row_V_q0;
reg   [31:0] row_V_1_load_reg_1204;
reg    ap_enable_reg_pp6_iter1;
reg   [31:0] row_V_1_load_reg_1204_pp6_iter2_reg;
wire   [0:0] icmp_ln1499_fu_860_p2;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter3_reg;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter4_reg;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter5_reg;
reg   [0:0] icmp_ln1499_reg_1209_pp6_iter6_reg;
wire   [8:0] add_ln102_2_fu_900_p2;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state30;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter11;
wire    ap_block_pp3_stage4_subdone;
reg    ap_condition_pp3_exit_iter0_state57;
reg    ap_block_pp3_stage8_subdone;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state65;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
wire    ap_CS_fsm_state70;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state71;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state75;
reg    ap_enable_reg_pp6_iter4;
reg    ap_enable_reg_pp6_iter5;
reg    ap_enable_reg_pp6_iter6;
reg    ap_enable_reg_pp6_iter7;
reg   [8:0] extracted_row_V_address0;
reg    extracted_row_V_ce0;
reg    extracted_row_V_we0;
reg   [31:0] extracted_row_V_d0;
wire   [31:0] extracted_row_V_q0;
wire   [8:0] extracted_row_V_address1;
reg    extracted_row_V_ce1;
reg   [8:0] buffer_row_V_address0;
reg    buffer_row_V_ce0;
reg    buffer_row_V_we0;
reg   [31:0] buffer_row_V_d0;
wire   [8:0] buffer_row_V_address1;
reg    buffer_row_V_ce1;
wire   [31:0] buffer_row_V_q1;
reg   [8:0] i_reg_366;
wire   [0:0] icmp_ln102_fu_558_p2;
reg   [8:0] i_1_reg_377;
wire   [0:0] icmp_ln102_1_fu_575_p2;
wire    ap_CS_fsm_state9;
reg   [8:0] i_8_reg_388;
wire    ap_CS_fsm_state86;
reg   [8:0] k_reg_400;
wire    ap_CS_fsm_state74;
reg   [63:0] ap_phi_mux_j_2_phi_fu_415_p4;
reg   [31:0] ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4;
reg   [0:0] ap_phi_mux_found_1_phi_fu_460_p4;
wire   [31:0] ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_444;
wire   [0:0] ap_phi_reg_pp2_iter11_found_1_reg_456;
reg  signed [31:0] ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4;
reg  signed [31:0] extracted_scalar_V_6_reg_469;
reg   [8:0] ap_phi_mux_i_5_phi_fu_485_p4;
wire    ap_block_pp3_stage0;
reg  signed [31:0] ap_phi_mux_j_4_phi_fu_496_p4;
reg   [8:0] ap_phi_mux_i_9_phi_fu_529_p4;
reg   [8:0] i_4_reg_537;
wire   [0:0] icmp_ln102_2_fu_906_p2;
wire   [63:0] i_cast_fu_564_p1;
wire   [63:0] i_1_cast_fu_581_p1;
wire   [63:0] i_5_cast3_fu_763_p1;
wire   [63:0] i_6_cast_fu_791_p1;
wire    ap_block_pp4_stage0;
wire   [63:0] i_7_cast_fu_826_p1;
wire    ap_block_pp5_stage0;
wire   [63:0] trunc_ln91_cast_fu_855_p1;
wire   [63:0] i_4_cast_fu_912_p1;
wire   [63:0] zext_ln81_fu_615_p1;
wire   [63:0] sext_ln19_fu_707_p1;
wire   [63:0] sext_ln91_fu_866_p1;
reg    ap_block_state24_io;
reg    ap_block_pp6_stage0_01001;
reg   [31:0] extracted_scalar_V_fu_144;
reg   [31:0] start_idx_1_fu_148;
wire   [31:0] j_1_fu_884_p2;
wire   [31:0] select_ln21_fu_768_p3;
wire    ap_block_pp3_stage4;
wire    ap_block_pp3_stage7;
wire   [31:0] i_5_cast_fu_742_p1;
wire   [0:0] icmp_ln21_1_fu_746_p2;
wire  signed [31:0] grp_fu_799_p1;
wire   [47:0] grp_fu_799_p2;
wire  signed [31:0] sext_ln91_fu_866_p0;
wire  signed [31:0] j_1_fu_884_p0;
wire   [0:0] icmp_ln149_fu_609_p2;
reg   [63:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
reg    ap_block_pp3_stage1_subdone;
wire    ap_block_state55_pp3_stage2_iter0;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_pp3_stage2_11001;
wire    ap_block_state56_pp3_stage3_iter0;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_pp3_stage3_11001;
wire    ap_block_state58_pp3_stage5_iter0;
wire    ap_block_pp3_stage5_subdone;
wire    ap_block_pp3_stage5_11001;
wire    ap_block_state59_pp3_stage6_iter0;
wire    ap_block_pp3_stage6_subdone;
wire    ap_block_pp3_stage6_11001;
wire    ap_block_pp3_stage7_subdone;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 64'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter3 = 1'b0;
#0 ap_enable_reg_pp6_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter4 = 1'b0;
#0 ap_enable_reg_pp6_iter5 = 1'b0;
#0 ap_enable_reg_pp6_iter6 = 1'b0;
#0 ap_enable_reg_pp6_iter7 = 1'b0;
end

row_product_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

row_product_x_rowptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_ROWPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_ROWPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_ROWPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_ROWPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_ROWPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_ROWPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_ROWPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_ROWPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_ROWPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_ROWPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_ROWPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_ROWPTR_CACHE_VALUE ))
x_rowptr_m_axi_U(
    .AWVALID(m_axi_x_rowptr_AWVALID),
    .AWREADY(m_axi_x_rowptr_AWREADY),
    .AWADDR(m_axi_x_rowptr_AWADDR),
    .AWID(m_axi_x_rowptr_AWID),
    .AWLEN(m_axi_x_rowptr_AWLEN),
    .AWSIZE(m_axi_x_rowptr_AWSIZE),
    .AWBURST(m_axi_x_rowptr_AWBURST),
    .AWLOCK(m_axi_x_rowptr_AWLOCK),
    .AWCACHE(m_axi_x_rowptr_AWCACHE),
    .AWPROT(m_axi_x_rowptr_AWPROT),
    .AWQOS(m_axi_x_rowptr_AWQOS),
    .AWREGION(m_axi_x_rowptr_AWREGION),
    .AWUSER(m_axi_x_rowptr_AWUSER),
    .WVALID(m_axi_x_rowptr_WVALID),
    .WREADY(m_axi_x_rowptr_WREADY),
    .WDATA(m_axi_x_rowptr_WDATA),
    .WSTRB(m_axi_x_rowptr_WSTRB),
    .WLAST(m_axi_x_rowptr_WLAST),
    .WID(m_axi_x_rowptr_WID),
    .WUSER(m_axi_x_rowptr_WUSER),
    .ARVALID(m_axi_x_rowptr_ARVALID),
    .ARREADY(m_axi_x_rowptr_ARREADY),
    .ARADDR(m_axi_x_rowptr_ARADDR),
    .ARID(m_axi_x_rowptr_ARID),
    .ARLEN(m_axi_x_rowptr_ARLEN),
    .ARSIZE(m_axi_x_rowptr_ARSIZE),
    .ARBURST(m_axi_x_rowptr_ARBURST),
    .ARLOCK(m_axi_x_rowptr_ARLOCK),
    .ARCACHE(m_axi_x_rowptr_ARCACHE),
    .ARPROT(m_axi_x_rowptr_ARPROT),
    .ARQOS(m_axi_x_rowptr_ARQOS),
    .ARREGION(m_axi_x_rowptr_ARREGION),
    .ARUSER(m_axi_x_rowptr_ARUSER),
    .RVALID(m_axi_x_rowptr_RVALID),
    .RREADY(m_axi_x_rowptr_RREADY),
    .RDATA(m_axi_x_rowptr_RDATA),
    .RLAST(m_axi_x_rowptr_RLAST),
    .RID(m_axi_x_rowptr_RID),
    .RUSER(m_axi_x_rowptr_RUSER),
    .RRESP(m_axi_x_rowptr_RRESP),
    .BVALID(m_axi_x_rowptr_BVALID),
    .BREADY(m_axi_x_rowptr_BREADY),
    .BRESP(m_axi_x_rowptr_BRESP),
    .BID(m_axi_x_rowptr_BID),
    .BUSER(m_axi_x_rowptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_rowptr_ARVALID),
    .I_ARREADY(x_rowptr_ARREADY),
    .I_ARADDR(zext_ln81_fu_615_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_rowptr_RVALID),
    .I_RREADY(x_rowptr_RREADY),
    .I_RDATA(x_rowptr_RDATA),
    .I_RID(x_rowptr_RID),
    .I_RUSER(x_rowptr_RUSER),
    .I_RRESP(x_rowptr_RRESP),
    .I_RLAST(x_rowptr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_rowptr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_rowptr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_rowptr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_rowptr_BRESP),
    .I_BID(x_rowptr_BID),
    .I_BUSER(x_rowptr_BUSER)
);

row_product_x_colind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_COLIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_COLIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_COLIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_COLIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_COLIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_COLIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_COLIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_COLIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_COLIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_COLIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_COLIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_COLIND_CACHE_VALUE ))
x_colind_m_axi_U(
    .AWVALID(m_axi_x_colind_AWVALID),
    .AWREADY(m_axi_x_colind_AWREADY),
    .AWADDR(m_axi_x_colind_AWADDR),
    .AWID(m_axi_x_colind_AWID),
    .AWLEN(m_axi_x_colind_AWLEN),
    .AWSIZE(m_axi_x_colind_AWSIZE),
    .AWBURST(m_axi_x_colind_AWBURST),
    .AWLOCK(m_axi_x_colind_AWLOCK),
    .AWCACHE(m_axi_x_colind_AWCACHE),
    .AWPROT(m_axi_x_colind_AWPROT),
    .AWQOS(m_axi_x_colind_AWQOS),
    .AWREGION(m_axi_x_colind_AWREGION),
    .AWUSER(m_axi_x_colind_AWUSER),
    .WVALID(m_axi_x_colind_WVALID),
    .WREADY(m_axi_x_colind_WREADY),
    .WDATA(m_axi_x_colind_WDATA),
    .WSTRB(m_axi_x_colind_WSTRB),
    .WLAST(m_axi_x_colind_WLAST),
    .WID(m_axi_x_colind_WID),
    .WUSER(m_axi_x_colind_WUSER),
    .ARVALID(m_axi_x_colind_ARVALID),
    .ARREADY(m_axi_x_colind_ARREADY),
    .ARADDR(m_axi_x_colind_ARADDR),
    .ARID(m_axi_x_colind_ARID),
    .ARLEN(m_axi_x_colind_ARLEN),
    .ARSIZE(m_axi_x_colind_ARSIZE),
    .ARBURST(m_axi_x_colind_ARBURST),
    .ARLOCK(m_axi_x_colind_ARLOCK),
    .ARCACHE(m_axi_x_colind_ARCACHE),
    .ARPROT(m_axi_x_colind_ARPROT),
    .ARQOS(m_axi_x_colind_ARQOS),
    .ARREGION(m_axi_x_colind_ARREGION),
    .ARUSER(m_axi_x_colind_ARUSER),
    .RVALID(m_axi_x_colind_RVALID),
    .RREADY(m_axi_x_colind_RREADY),
    .RDATA(m_axi_x_colind_RDATA),
    .RLAST(m_axi_x_colind_RLAST),
    .RID(m_axi_x_colind_RID),
    .RUSER(m_axi_x_colind_RUSER),
    .RRESP(m_axi_x_colind_RRESP),
    .BVALID(m_axi_x_colind_BVALID),
    .BREADY(m_axi_x_colind_BREADY),
    .BRESP(m_axi_x_colind_BRESP),
    .BID(m_axi_x_colind_BID),
    .BUSER(m_axi_x_colind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_colind_ARVALID),
    .I_ARREADY(x_colind_ARREADY),
    .I_ARADDR(x_colind_addr_reg_1000),
    .I_ARID(1'd0),
    .I_ARLEN(sub_ln32_reg_995),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_colind_RVALID),
    .I_RREADY(x_colind_RREADY),
    .I_RDATA(x_colind_RDATA),
    .I_RID(x_colind_RID),
    .I_RUSER(x_colind_RUSER),
    .I_RRESP(x_colind_RRESP),
    .I_RLAST(x_colind_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_colind_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_colind_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_colind_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_colind_BRESP),
    .I_BID(x_colind_BID),
    .I_BUSER(x_colind_BUSER)
);

row_product_x_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_DATA_CACHE_VALUE ))
x_data_m_axi_U(
    .AWVALID(m_axi_x_data_AWVALID),
    .AWREADY(m_axi_x_data_AWREADY),
    .AWADDR(m_axi_x_data_AWADDR),
    .AWID(m_axi_x_data_AWID),
    .AWLEN(m_axi_x_data_AWLEN),
    .AWSIZE(m_axi_x_data_AWSIZE),
    .AWBURST(m_axi_x_data_AWBURST),
    .AWLOCK(m_axi_x_data_AWLOCK),
    .AWCACHE(m_axi_x_data_AWCACHE),
    .AWPROT(m_axi_x_data_AWPROT),
    .AWQOS(m_axi_x_data_AWQOS),
    .AWREGION(m_axi_x_data_AWREGION),
    .AWUSER(m_axi_x_data_AWUSER),
    .WVALID(m_axi_x_data_WVALID),
    .WREADY(m_axi_x_data_WREADY),
    .WDATA(m_axi_x_data_WDATA),
    .WSTRB(m_axi_x_data_WSTRB),
    .WLAST(m_axi_x_data_WLAST),
    .WID(m_axi_x_data_WID),
    .WUSER(m_axi_x_data_WUSER),
    .ARVALID(m_axi_x_data_ARVALID),
    .ARREADY(m_axi_x_data_ARREADY),
    .ARADDR(m_axi_x_data_ARADDR),
    .ARID(m_axi_x_data_ARID),
    .ARLEN(m_axi_x_data_ARLEN),
    .ARSIZE(m_axi_x_data_ARSIZE),
    .ARBURST(m_axi_x_data_ARBURST),
    .ARLOCK(m_axi_x_data_ARLOCK),
    .ARCACHE(m_axi_x_data_ARCACHE),
    .ARPROT(m_axi_x_data_ARPROT),
    .ARQOS(m_axi_x_data_ARQOS),
    .ARREGION(m_axi_x_data_ARREGION),
    .ARUSER(m_axi_x_data_ARUSER),
    .RVALID(m_axi_x_data_RVALID),
    .RREADY(m_axi_x_data_RREADY),
    .RDATA(m_axi_x_data_RDATA),
    .RLAST(m_axi_x_data_RLAST),
    .RID(m_axi_x_data_RID),
    .RUSER(m_axi_x_data_RUSER),
    .RRESP(m_axi_x_data_RRESP),
    .BVALID(m_axi_x_data_BVALID),
    .BREADY(m_axi_x_data_BREADY),
    .BRESP(m_axi_x_data_BRESP),
    .BID(m_axi_x_data_BID),
    .BUSER(m_axi_x_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_data_ARVALID),
    .I_ARREADY(x_data_ARREADY),
    .I_ARADDR(x_data_addr_reg_1048),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_data_RVALID),
    .I_RREADY(x_data_RREADY),
    .I_RDATA(x_data_RDATA),
    .I_RID(x_data_RID),
    .I_RUSER(x_data_RUSER),
    .I_RRESP(x_data_RRESP),
    .I_RLAST(x_data_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_data_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_data_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_data_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_data_BRESP),
    .I_BID(x_data_BID),
    .I_BUSER(x_data_BUSER)
);

row_product_y_rowptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_ROWPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_ROWPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_ROWPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_ROWPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_ROWPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_ROWPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_ROWPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_ROWPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_ROWPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_ROWPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_ROWPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_ROWPTR_CACHE_VALUE ))
y_rowptr_m_axi_U(
    .AWVALID(m_axi_y_rowptr_AWVALID),
    .AWREADY(m_axi_y_rowptr_AWREADY),
    .AWADDR(m_axi_y_rowptr_AWADDR),
    .AWID(m_axi_y_rowptr_AWID),
    .AWLEN(m_axi_y_rowptr_AWLEN),
    .AWSIZE(m_axi_y_rowptr_AWSIZE),
    .AWBURST(m_axi_y_rowptr_AWBURST),
    .AWLOCK(m_axi_y_rowptr_AWLOCK),
    .AWCACHE(m_axi_y_rowptr_AWCACHE),
    .AWPROT(m_axi_y_rowptr_AWPROT),
    .AWQOS(m_axi_y_rowptr_AWQOS),
    .AWREGION(m_axi_y_rowptr_AWREGION),
    .AWUSER(m_axi_y_rowptr_AWUSER),
    .WVALID(m_axi_y_rowptr_WVALID),
    .WREADY(m_axi_y_rowptr_WREADY),
    .WDATA(m_axi_y_rowptr_WDATA),
    .WSTRB(m_axi_y_rowptr_WSTRB),
    .WLAST(m_axi_y_rowptr_WLAST),
    .WID(m_axi_y_rowptr_WID),
    .WUSER(m_axi_y_rowptr_WUSER),
    .ARVALID(m_axi_y_rowptr_ARVALID),
    .ARREADY(m_axi_y_rowptr_ARREADY),
    .ARADDR(m_axi_y_rowptr_ARADDR),
    .ARID(m_axi_y_rowptr_ARID),
    .ARLEN(m_axi_y_rowptr_ARLEN),
    .ARSIZE(m_axi_y_rowptr_ARSIZE),
    .ARBURST(m_axi_y_rowptr_ARBURST),
    .ARLOCK(m_axi_y_rowptr_ARLOCK),
    .ARCACHE(m_axi_y_rowptr_ARCACHE),
    .ARPROT(m_axi_y_rowptr_ARPROT),
    .ARQOS(m_axi_y_rowptr_ARQOS),
    .ARREGION(m_axi_y_rowptr_ARREGION),
    .ARUSER(m_axi_y_rowptr_ARUSER),
    .RVALID(m_axi_y_rowptr_RVALID),
    .RREADY(m_axi_y_rowptr_RREADY),
    .RDATA(m_axi_y_rowptr_RDATA),
    .RLAST(m_axi_y_rowptr_RLAST),
    .RID(m_axi_y_rowptr_RID),
    .RUSER(m_axi_y_rowptr_RUSER),
    .RRESP(m_axi_y_rowptr_RRESP),
    .BVALID(m_axi_y_rowptr_BVALID),
    .BREADY(m_axi_y_rowptr_BREADY),
    .BRESP(m_axi_y_rowptr_BRESP),
    .BID(m_axi_y_rowptr_BID),
    .BUSER(m_axi_y_rowptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_rowptr_ARVALID),
    .I_ARREADY(y_rowptr_ARREADY),
    .I_ARADDR(y_rowptr_addr_reg_1063),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_rowptr_RVALID),
    .I_RREADY(y_rowptr_RREADY),
    .I_RDATA(y_rowptr_RDATA),
    .I_RID(y_rowptr_RID),
    .I_RUSER(y_rowptr_RUSER),
    .I_RRESP(y_rowptr_RRESP),
    .I_RLAST(y_rowptr_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_rowptr_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_rowptr_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_rowptr_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_rowptr_BRESP),
    .I_BID(y_rowptr_BID),
    .I_BUSER(y_rowptr_BUSER)
);

row_product_y_colind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_COLIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_COLIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_COLIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_COLIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_COLIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_COLIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_COLIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_COLIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_COLIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_COLIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_COLIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_COLIND_CACHE_VALUE ))
y_colind_m_axi_U(
    .AWVALID(m_axi_y_colind_AWVALID),
    .AWREADY(m_axi_y_colind_AWREADY),
    .AWADDR(m_axi_y_colind_AWADDR),
    .AWID(m_axi_y_colind_AWID),
    .AWLEN(m_axi_y_colind_AWLEN),
    .AWSIZE(m_axi_y_colind_AWSIZE),
    .AWBURST(m_axi_y_colind_AWBURST),
    .AWLOCK(m_axi_y_colind_AWLOCK),
    .AWCACHE(m_axi_y_colind_AWCACHE),
    .AWPROT(m_axi_y_colind_AWPROT),
    .AWQOS(m_axi_y_colind_AWQOS),
    .AWREGION(m_axi_y_colind_AWREGION),
    .AWUSER(m_axi_y_colind_AWUSER),
    .WVALID(m_axi_y_colind_WVALID),
    .WREADY(m_axi_y_colind_WREADY),
    .WDATA(m_axi_y_colind_WDATA),
    .WSTRB(m_axi_y_colind_WSTRB),
    .WLAST(m_axi_y_colind_WLAST),
    .WID(m_axi_y_colind_WID),
    .WUSER(m_axi_y_colind_WUSER),
    .ARVALID(m_axi_y_colind_ARVALID),
    .ARREADY(m_axi_y_colind_ARREADY),
    .ARADDR(m_axi_y_colind_ARADDR),
    .ARID(m_axi_y_colind_ARID),
    .ARLEN(m_axi_y_colind_ARLEN),
    .ARSIZE(m_axi_y_colind_ARSIZE),
    .ARBURST(m_axi_y_colind_ARBURST),
    .ARLOCK(m_axi_y_colind_ARLOCK),
    .ARCACHE(m_axi_y_colind_ARCACHE),
    .ARPROT(m_axi_y_colind_ARPROT),
    .ARQOS(m_axi_y_colind_ARQOS),
    .ARREGION(m_axi_y_colind_ARREGION),
    .ARUSER(m_axi_y_colind_ARUSER),
    .RVALID(m_axi_y_colind_RVALID),
    .RREADY(m_axi_y_colind_RREADY),
    .RDATA(m_axi_y_colind_RDATA),
    .RLAST(m_axi_y_colind_RLAST),
    .RID(m_axi_y_colind_RID),
    .RUSER(m_axi_y_colind_RUSER),
    .RRESP(m_axi_y_colind_RRESP),
    .BVALID(m_axi_y_colind_BVALID),
    .BREADY(m_axi_y_colind_BREADY),
    .BRESP(m_axi_y_colind_BRESP),
    .BID(m_axi_y_colind_BID),
    .BUSER(m_axi_y_colind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_colind_ARVALID),
    .I_ARREADY(y_colind_ARREADY),
    .I_ARADDR(sext_ln19_fu_707_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_colind_RVALID),
    .I_RREADY(y_colind_RREADY),
    .I_RDATA(y_colind_RDATA),
    .I_RID(y_colind_RID),
    .I_RUSER(y_colind_RUSER),
    .I_RRESP(y_colind_RRESP),
    .I_RLAST(y_colind_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_colind_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_colind_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_colind_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_colind_BRESP),
    .I_BID(y_colind_BID),
    .I_BUSER(y_colind_BUSER)
);

row_product_y_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Y_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Y_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Y_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Y_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Y_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Y_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Y_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Y_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Y_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Y_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Y_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Y_DATA_CACHE_VALUE ))
y_data_m_axi_U(
    .AWVALID(m_axi_y_data_AWVALID),
    .AWREADY(m_axi_y_data_AWREADY),
    .AWADDR(m_axi_y_data_AWADDR),
    .AWID(m_axi_y_data_AWID),
    .AWLEN(m_axi_y_data_AWLEN),
    .AWSIZE(m_axi_y_data_AWSIZE),
    .AWBURST(m_axi_y_data_AWBURST),
    .AWLOCK(m_axi_y_data_AWLOCK),
    .AWCACHE(m_axi_y_data_AWCACHE),
    .AWPROT(m_axi_y_data_AWPROT),
    .AWQOS(m_axi_y_data_AWQOS),
    .AWREGION(m_axi_y_data_AWREGION),
    .AWUSER(m_axi_y_data_AWUSER),
    .WVALID(m_axi_y_data_WVALID),
    .WREADY(m_axi_y_data_WREADY),
    .WDATA(m_axi_y_data_WDATA),
    .WSTRB(m_axi_y_data_WSTRB),
    .WLAST(m_axi_y_data_WLAST),
    .WID(m_axi_y_data_WID),
    .WUSER(m_axi_y_data_WUSER),
    .ARVALID(m_axi_y_data_ARVALID),
    .ARREADY(m_axi_y_data_ARREADY),
    .ARADDR(m_axi_y_data_ARADDR),
    .ARID(m_axi_y_data_ARID),
    .ARLEN(m_axi_y_data_ARLEN),
    .ARSIZE(m_axi_y_data_ARSIZE),
    .ARBURST(m_axi_y_data_ARBURST),
    .ARLOCK(m_axi_y_data_ARLOCK),
    .ARCACHE(m_axi_y_data_ARCACHE),
    .ARPROT(m_axi_y_data_ARPROT),
    .ARQOS(m_axi_y_data_ARQOS),
    .ARREGION(m_axi_y_data_ARREGION),
    .ARUSER(m_axi_y_data_ARUSER),
    .RVALID(m_axi_y_data_RVALID),
    .RREADY(m_axi_y_data_RREADY),
    .RDATA(m_axi_y_data_RDATA),
    .RLAST(m_axi_y_data_RLAST),
    .RID(m_axi_y_data_RID),
    .RUSER(m_axi_y_data_RUSER),
    .RRESP(m_axi_y_data_RRESP),
    .BVALID(m_axi_y_data_BVALID),
    .BREADY(m_axi_y_data_BREADY),
    .BRESP(m_axi_y_data_BRESP),
    .BID(m_axi_y_data_BID),
    .BUSER(m_axi_y_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(y_data_ARVALID),
    .I_ARREADY(y_data_ARREADY),
    .I_ARADDR(sext_ln19_fu_707_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(y_data_RVALID),
    .I_RREADY(y_data_RREADY),
    .I_RDATA(y_data_RDATA),
    .I_RID(y_data_RID),
    .I_RUSER(y_data_RUSER),
    .I_RRESP(y_data_RRESP),
    .I_RLAST(y_data_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(y_data_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(y_data_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(y_data_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(y_data_BRESP),
    .I_BID(y_data_BID),
    .I_BUSER(y_data_BUSER)
);

row_product_z_rowptr_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_ROWPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_ROWPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_ROWPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_ROWPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_ROWPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_ROWPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_ROWPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_ROWPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_ROWPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_ROWPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_ROWPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_ROWPTR_CACHE_VALUE ))
z_rowptr_m_axi_U(
    .AWVALID(m_axi_z_rowptr_AWVALID),
    .AWREADY(m_axi_z_rowptr_AWREADY),
    .AWADDR(m_axi_z_rowptr_AWADDR),
    .AWID(m_axi_z_rowptr_AWID),
    .AWLEN(m_axi_z_rowptr_AWLEN),
    .AWSIZE(m_axi_z_rowptr_AWSIZE),
    .AWBURST(m_axi_z_rowptr_AWBURST),
    .AWLOCK(m_axi_z_rowptr_AWLOCK),
    .AWCACHE(m_axi_z_rowptr_AWCACHE),
    .AWPROT(m_axi_z_rowptr_AWPROT),
    .AWQOS(m_axi_z_rowptr_AWQOS),
    .AWREGION(m_axi_z_rowptr_AWREGION),
    .AWUSER(m_axi_z_rowptr_AWUSER),
    .WVALID(m_axi_z_rowptr_WVALID),
    .WREADY(m_axi_z_rowptr_WREADY),
    .WDATA(m_axi_z_rowptr_WDATA),
    .WSTRB(m_axi_z_rowptr_WSTRB),
    .WLAST(m_axi_z_rowptr_WLAST),
    .WID(m_axi_z_rowptr_WID),
    .WUSER(m_axi_z_rowptr_WUSER),
    .ARVALID(m_axi_z_rowptr_ARVALID),
    .ARREADY(m_axi_z_rowptr_ARREADY),
    .ARADDR(m_axi_z_rowptr_ARADDR),
    .ARID(m_axi_z_rowptr_ARID),
    .ARLEN(m_axi_z_rowptr_ARLEN),
    .ARSIZE(m_axi_z_rowptr_ARSIZE),
    .ARBURST(m_axi_z_rowptr_ARBURST),
    .ARLOCK(m_axi_z_rowptr_ARLOCK),
    .ARCACHE(m_axi_z_rowptr_ARCACHE),
    .ARPROT(m_axi_z_rowptr_ARPROT),
    .ARQOS(m_axi_z_rowptr_ARQOS),
    .ARREGION(m_axi_z_rowptr_ARREGION),
    .ARUSER(m_axi_z_rowptr_ARUSER),
    .RVALID(m_axi_z_rowptr_RVALID),
    .RREADY(m_axi_z_rowptr_RREADY),
    .RDATA(m_axi_z_rowptr_RDATA),
    .RLAST(m_axi_z_rowptr_RLAST),
    .RID(m_axi_z_rowptr_RID),
    .RUSER(m_axi_z_rowptr_RUSER),
    .RRESP(m_axi_z_rowptr_RRESP),
    .BVALID(m_axi_z_rowptr_BVALID),
    .BREADY(m_axi_z_rowptr_BREADY),
    .BRESP(m_axi_z_rowptr_BRESP),
    .BID(m_axi_z_rowptr_BID),
    .BUSER(m_axi_z_rowptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(z_rowptr_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(z_rowptr_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(z_rowptr_RDATA),
    .I_RID(z_rowptr_RID),
    .I_RUSER(z_rowptr_RUSER),
    .I_RRESP(z_rowptr_RRESP),
    .I_RLAST(z_rowptr_RLAST),
    .I_AWVALID(z_rowptr_AWVALID),
    .I_AWREADY(z_rowptr_AWREADY),
    .I_AWADDR(z_rowptr_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(z_rowptr_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_rowptr_WVALID),
    .I_WREADY(z_rowptr_WREADY),
    .I_WDATA(z_rowptr_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_rowptr_BVALID),
    .I_BREADY(z_rowptr_BREADY),
    .I_BRESP(z_rowptr_BRESP),
    .I_BID(z_rowptr_BID),
    .I_BUSER(z_rowptr_BUSER)
);

row_product_z_colind_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_COLIND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_COLIND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_COLIND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_COLIND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_COLIND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_COLIND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_COLIND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_COLIND_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_COLIND_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_COLIND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_COLIND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_COLIND_CACHE_VALUE ))
z_colind_m_axi_U(
    .AWVALID(m_axi_z_colind_AWVALID),
    .AWREADY(m_axi_z_colind_AWREADY),
    .AWADDR(m_axi_z_colind_AWADDR),
    .AWID(m_axi_z_colind_AWID),
    .AWLEN(m_axi_z_colind_AWLEN),
    .AWSIZE(m_axi_z_colind_AWSIZE),
    .AWBURST(m_axi_z_colind_AWBURST),
    .AWLOCK(m_axi_z_colind_AWLOCK),
    .AWCACHE(m_axi_z_colind_AWCACHE),
    .AWPROT(m_axi_z_colind_AWPROT),
    .AWQOS(m_axi_z_colind_AWQOS),
    .AWREGION(m_axi_z_colind_AWREGION),
    .AWUSER(m_axi_z_colind_AWUSER),
    .WVALID(m_axi_z_colind_WVALID),
    .WREADY(m_axi_z_colind_WREADY),
    .WDATA(m_axi_z_colind_WDATA),
    .WSTRB(m_axi_z_colind_WSTRB),
    .WLAST(m_axi_z_colind_WLAST),
    .WID(m_axi_z_colind_WID),
    .WUSER(m_axi_z_colind_WUSER),
    .ARVALID(m_axi_z_colind_ARVALID),
    .ARREADY(m_axi_z_colind_ARREADY),
    .ARADDR(m_axi_z_colind_ARADDR),
    .ARID(m_axi_z_colind_ARID),
    .ARLEN(m_axi_z_colind_ARLEN),
    .ARSIZE(m_axi_z_colind_ARSIZE),
    .ARBURST(m_axi_z_colind_ARBURST),
    .ARLOCK(m_axi_z_colind_ARLOCK),
    .ARCACHE(m_axi_z_colind_ARCACHE),
    .ARPROT(m_axi_z_colind_ARPROT),
    .ARQOS(m_axi_z_colind_ARQOS),
    .ARREGION(m_axi_z_colind_ARREGION),
    .ARUSER(m_axi_z_colind_ARUSER),
    .RVALID(m_axi_z_colind_RVALID),
    .RREADY(m_axi_z_colind_RREADY),
    .RDATA(m_axi_z_colind_RDATA),
    .RLAST(m_axi_z_colind_RLAST),
    .RID(m_axi_z_colind_RID),
    .RUSER(m_axi_z_colind_RUSER),
    .RRESP(m_axi_z_colind_RRESP),
    .BVALID(m_axi_z_colind_BVALID),
    .BREADY(m_axi_z_colind_BREADY),
    .BRESP(m_axi_z_colind_BRESP),
    .BID(m_axi_z_colind_BID),
    .BUSER(m_axi_z_colind_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(z_colind_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(z_colind_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(z_colind_RDATA),
    .I_RID(z_colind_RID),
    .I_RUSER(z_colind_RUSER),
    .I_RRESP(z_colind_RRESP),
    .I_RLAST(z_colind_RLAST),
    .I_AWVALID(z_colind_AWVALID),
    .I_AWREADY(z_colind_AWREADY),
    .I_AWADDR(sext_ln91_fu_866_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_colind_WVALID),
    .I_WREADY(z_colind_WREADY),
    .I_WDATA(z_colind_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_colind_BVALID),
    .I_BREADY(z_colind_BREADY),
    .I_BRESP(z_colind_BRESP),
    .I_BID(z_colind_BID),
    .I_BUSER(z_colind_BUSER)
);

row_product_z_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_Z_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_Z_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_Z_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_Z_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_Z_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_Z_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_Z_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_Z_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_Z_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_Z_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_Z_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_Z_DATA_CACHE_VALUE ))
z_data_m_axi_U(
    .AWVALID(m_axi_z_data_AWVALID),
    .AWREADY(m_axi_z_data_AWREADY),
    .AWADDR(m_axi_z_data_AWADDR),
    .AWID(m_axi_z_data_AWID),
    .AWLEN(m_axi_z_data_AWLEN),
    .AWSIZE(m_axi_z_data_AWSIZE),
    .AWBURST(m_axi_z_data_AWBURST),
    .AWLOCK(m_axi_z_data_AWLOCK),
    .AWCACHE(m_axi_z_data_AWCACHE),
    .AWPROT(m_axi_z_data_AWPROT),
    .AWQOS(m_axi_z_data_AWQOS),
    .AWREGION(m_axi_z_data_AWREGION),
    .AWUSER(m_axi_z_data_AWUSER),
    .WVALID(m_axi_z_data_WVALID),
    .WREADY(m_axi_z_data_WREADY),
    .WDATA(m_axi_z_data_WDATA),
    .WSTRB(m_axi_z_data_WSTRB),
    .WLAST(m_axi_z_data_WLAST),
    .WID(m_axi_z_data_WID),
    .WUSER(m_axi_z_data_WUSER),
    .ARVALID(m_axi_z_data_ARVALID),
    .ARREADY(m_axi_z_data_ARREADY),
    .ARADDR(m_axi_z_data_ARADDR),
    .ARID(m_axi_z_data_ARID),
    .ARLEN(m_axi_z_data_ARLEN),
    .ARSIZE(m_axi_z_data_ARSIZE),
    .ARBURST(m_axi_z_data_ARBURST),
    .ARLOCK(m_axi_z_data_ARLOCK),
    .ARCACHE(m_axi_z_data_ARCACHE),
    .ARPROT(m_axi_z_data_ARPROT),
    .ARQOS(m_axi_z_data_ARQOS),
    .ARREGION(m_axi_z_data_ARREGION),
    .ARUSER(m_axi_z_data_ARUSER),
    .RVALID(m_axi_z_data_RVALID),
    .RREADY(m_axi_z_data_RREADY),
    .RDATA(m_axi_z_data_RDATA),
    .RLAST(m_axi_z_data_RLAST),
    .RID(m_axi_z_data_RID),
    .RUSER(m_axi_z_data_RUSER),
    .RRESP(m_axi_z_data_RRESP),
    .BVALID(m_axi_z_data_BVALID),
    .BREADY(m_axi_z_data_BREADY),
    .BRESP(m_axi_z_data_BRESP),
    .BID(m_axi_z_data_BID),
    .BUSER(m_axi_z_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(z_data_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(z_data_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(z_data_RDATA),
    .I_RID(z_data_RID),
    .I_RUSER(z_data_RUSER),
    .I_RRESP(z_data_RRESP),
    .I_RLAST(z_data_RLAST),
    .I_AWVALID(z_data_AWVALID),
    .I_AWREADY(z_data_AWREADY),
    .I_AWADDR(sext_ln91_fu_866_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(z_data_WVALID),
    .I_WREADY(z_data_WREADY),
    .I_WDATA(row_V_1_load_reg_1204_pp6_iter2_reg),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(z_data_BVALID),
    .I_BREADY(z_data_BREADY),
    .I_BRESP(z_data_BRESP),
    .I_BID(z_data_BID),
    .I_BUSER(z_data_BUSER)
);

row_product_extracted_row_V #(
    .DataWidth( 32 ),
    .AddressRange( 494 ),
    .AddressWidth( 9 ))
extracted_row_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(extracted_row_V_address0),
    .ce0(extracted_row_V_ce0),
    .we0(extracted_row_V_we0),
    .d0(extracted_row_V_d0),
    .q0(extracted_row_V_q0),
    .address1(extracted_row_V_address1),
    .ce1(extracted_row_V_ce1),
    .q1(extracted_row_V_q1)
);

row_product_extracted_row_V #(
    .DataWidth( 32 ),
    .AddressRange( 494 ),
    .AddressWidth( 9 ))
buffer_row_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_row_V_address0),
    .ce0(buffer_row_V_ce0),
    .we0(buffer_row_V_we0),
    .d0(buffer_row_V_d0),
    .q0(buffer_row_V_q0),
    .address1(buffer_row_V_address1),
    .ce1(buffer_row_V_ce1),
    .q1(buffer_row_V_q1)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_1150),
    .din1(grp_fu_799_p1),
    .ce(1'b1),
    .dout(grp_fu_799_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state57) & (1'b1 == ap_CS_fsm_pp3_stage4))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_CS_fsm_pp3_stage4)) | ((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state65) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state65)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state65);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp4_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state71) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state71)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state71);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter0_state75) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln154_fu_655_p2 == 1'd1))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state75)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state75);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter8 <= ap_enable_reg_pp6_iter7;
        end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln154_fu_655_p2 == 1'd1))) begin
            ap_enable_reg_pp6_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        extracted_scalar_V_2_reg_422 <= extracted_scalar_V_1_reg_1011;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln32_reg_1030_pp2_iter10_reg == 1'd0))) begin
        extracted_scalar_V_2_reg_422 <= ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        if (((cmp1_i_reg_981 == 1'd1) & (found_reg_432 == 1'd1))) begin
            extracted_scalar_V_6_reg_469 <= extracted_scalar_V_2_reg_422;
        end else if (((cmp1_i_reg_981 == 1'd0) | (found_reg_432 == 1'd0))) begin
            extracted_scalar_V_6_reg_469 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
        extracted_scalar_V_fu_144 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        extracted_scalar_V_fu_144 <= extracted_scalar_V_6_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        found_reg_432 <= 1'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln32_reg_1030_pp2_iter10_reg == 1'd0))) begin
        found_reg_432 <= ap_phi_mux_found_1_phi_fu_460_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_377 <= 9'd0;
    end else if (((icmp_ln102_1_fu_575_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        i_1_reg_377 <= add_ln102_1_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) & (z_rowptr_WREADY == 1'b1))) begin
        i_4_reg_537 <= 9'd0;
    end else if (((icmp_ln102_2_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
        i_4_reg_537 <= add_ln102_2_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1))) begin
        i_5_reg_481 <= 9'd0;
    end else if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        i_5_reg_481 <= add_ln14_reg_1100;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_6_reg_503 <= 9'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln54_fu_785_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        i_6_reg_503 <= add_ln54_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_7_reg_514 <= 9'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln66_fu_820_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        i_7_reg_514 <= add_ln66_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
        i_8_reg_388 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        i_8_reg_388 <= indvars_iv_next145_reg_953;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln154_fu_655_p2 == 1'd1))) begin
        i_9_reg_525 <= 9'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln82_reg_1195 == 1'd0))) begin
        i_9_reg_525 <= add_ln82_reg_1190;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (z_rowptr_BVALID == 1'b1))) begin
        i_reg_366 <= 9'd0;
    end else if (((icmp_ln102_fu_558_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_366 <= add_ln102_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        j_2_reg_412 <= sext_ln154_reg_985;
    end else if (((icmp_ln32_reg_1030 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_2_reg_412 <= add_ln32_reg_1034;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1))) begin
        j_4_reg_493 <= start_idx_2_reg_1069;
    end else if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln14_reg_1079_pp3_iter1_reg == 1'd0))) begin
        j_4_reg_493 <= j_6_reg_1125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        k_reg_400 <= add_ln154_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_reg_400 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
        start_idx_1_fu_148 <= 32'd0;
    end else if (((icmp_ln1499_reg_1209 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        start_idx_1_fu_148 <= j_1_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage4_11001) & (1'b1 == ap_CS_fsm_pp3_stage4))) begin
        add_ln14_reg_1100 <= add_ln14_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln154_reg_1006 <= add_ln154_fu_646_p2;
        extracted_scalar_V_1_reg_1011 <= extracted_scalar_V_fu_144;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln32_fu_669_p2 == 1'd0))) begin
        add_ln32_reg_1034 <= add_ln32_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln66_reg_1170 == 1'd0))) begin
        add_ln703_reg_1185 <= add_ln703_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        add_ln82_reg_1190 <= add_ln82_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        and_ln21_reg_1120 <= and_ln21_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        cmp1_i_reg_981 <= cmp1_i_fu_626_p2;
        sext_ln154_1_reg_990 <= sext_ln154_1_fu_633_p1;
        sext_ln154_reg_985 <= sext_ln154_fu_630_p1;
        sub_ln32_reg_995 <= sub_ln32_fu_636_p2;
        x_colind_addr_reg_1000 <= sext_ln154_fu_630_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1030 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        col_idx_1_reg_1039 <= x_colind_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        col_idx_2_reg_1110 <= y_colind_RDATA;
        y_data_addr_read_reg_1115 <= y_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        end_idx_1_reg_1074 <= y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        end_idx_reg_974 <= x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_predicate_op210_read_state41 == 1'b1))) begin
        extracted_scalar_V_3_reg_1054 <= x_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_5_reg_481_pp3_iter1_reg <= i_5_reg_481;
        icmp_ln14_reg_1079 <= icmp_ln14_fu_701_p2;
        icmp_ln14_reg_1079_pp3_iter1_reg <= icmp_ln14_reg_1079;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        i_9_reg_525_pp6_iter1_reg <= i_9_reg_525;
        icmp_ln1499_reg_1209 <= icmp_ln1499_fu_860_p2;
        icmp_ln82_reg_1195 <= icmp_ln82_fu_849_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp6_stage0_11001)) begin
        i_9_reg_525_pp6_iter2_reg <= i_9_reg_525_pp6_iter1_reg;
        icmp_ln1499_reg_1209_pp6_iter2_reg <= icmp_ln1499_reg_1209;
        icmp_ln1499_reg_1209_pp6_iter3_reg <= icmp_ln1499_reg_1209_pp6_iter2_reg;
        icmp_ln1499_reg_1209_pp6_iter4_reg <= icmp_ln1499_reg_1209_pp6_iter3_reg;
        icmp_ln1499_reg_1209_pp6_iter5_reg <= icmp_ln1499_reg_1209_pp6_iter4_reg;
        icmp_ln1499_reg_1209_pp6_iter6_reg <= icmp_ln1499_reg_1209_pp6_iter5_reg;
        icmp_ln1499_reg_1209_pp6_iter7_reg <= icmp_ln1499_reg_1209_pp6_iter6_reg;
        row_V_1_load_reg_1204_pp6_iter2_reg <= row_V_1_load_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        icmp_ln21_reg_1095 <= icmp_ln21_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln32_reg_1030 <= icmp_ln32_fu_669_p2;
        icmp_ln32_reg_1030_pp2_iter1_reg <= icmp_ln32_reg_1030;
        j_2_reg_412_pp2_iter1_reg <= j_2_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln32_reg_1030_pp2_iter10_reg <= icmp_ln32_reg_1030_pp2_iter9_reg;
        icmp_ln32_reg_1030_pp2_iter2_reg <= icmp_ln32_reg_1030_pp2_iter1_reg;
        icmp_ln32_reg_1030_pp2_iter3_reg <= icmp_ln32_reg_1030_pp2_iter2_reg;
        icmp_ln32_reg_1030_pp2_iter4_reg <= icmp_ln32_reg_1030_pp2_iter3_reg;
        icmp_ln32_reg_1030_pp2_iter5_reg <= icmp_ln32_reg_1030_pp2_iter4_reg;
        icmp_ln32_reg_1030_pp2_iter6_reg <= icmp_ln32_reg_1030_pp2_iter5_reg;
        icmp_ln32_reg_1030_pp2_iter7_reg <= icmp_ln32_reg_1030_pp2_iter6_reg;
        icmp_ln32_reg_1030_pp2_iter8_reg <= icmp_ln32_reg_1030_pp2_iter7_reg;
        icmp_ln32_reg_1030_pp2_iter9_reg <= icmp_ln32_reg_1030_pp2_iter8_reg;
        icmp_ln38_reg_1044_pp2_iter10_reg <= icmp_ln38_reg_1044_pp2_iter9_reg;
        icmp_ln38_reg_1044_pp2_iter3_reg <= icmp_ln38_reg_1044;
        icmp_ln38_reg_1044_pp2_iter4_reg <= icmp_ln38_reg_1044_pp2_iter3_reg;
        icmp_ln38_reg_1044_pp2_iter5_reg <= icmp_ln38_reg_1044_pp2_iter4_reg;
        icmp_ln38_reg_1044_pp2_iter6_reg <= icmp_ln38_reg_1044_pp2_iter5_reg;
        icmp_ln38_reg_1044_pp2_iter7_reg <= icmp_ln38_reg_1044_pp2_iter6_reg;
        icmp_ln38_reg_1044_pp2_iter8_reg <= icmp_ln38_reg_1044_pp2_iter7_reg;
        icmp_ln38_reg_1044_pp2_iter9_reg <= icmp_ln38_reg_1044_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln32_reg_1030_pp2_iter1_reg == 1'd0))) begin
        icmp_ln38_reg_1044 <= icmp_ln38_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln54_reg_1140 <= icmp_ln54_fu_785_p2;
        icmp_ln54_reg_1140_pp4_iter1_reg <= icmp_ln54_reg_1140;
        row_V_addr_2_reg_1144_pp4_iter1_reg <= row_V_addr_2_reg_1144;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln54_reg_1140_pp4_iter2_reg <= icmp_ln54_reg_1140_pp4_iter1_reg;
        icmp_ln54_reg_1140_pp4_iter3_reg <= icmp_ln54_reg_1140_pp4_iter2_reg;
        row_V_addr_2_reg_1144_pp4_iter2_reg <= row_V_addr_2_reg_1144_pp4_iter1_reg;
        row_V_addr_2_reg_1144_pp4_iter3_reg <= row_V_addr_2_reg_1144_pp4_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln66_reg_1170 <= icmp_ln66_fu_820_p2;
        icmp_ln66_reg_1170_pp5_iter1_reg <= icmp_ln66_reg_1170;
        row_V_1_addr_3_reg_1174_pp5_iter1_reg <= row_V_1_addr_3_reg_1174;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvars_iv_next145_reg_953 <= indvars_iv_next145_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage7_11001) & (1'b1 == ap_CS_fsm_pp3_stage7))) begin
        j_5_reg_1105 <= j_5_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_6_reg_1125 <= j_6_fu_756_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln54_reg_1140 == 1'd0))) begin
        r_V_reg_1150 <= extracted_row_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln66_fu_820_p2 == 1'd0))) begin
        row_V_1_addr_3_reg_1174 <= i_7_cast_fu_826_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1))) begin
        row_V_1_load_reg_1204 <= buffer_row_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln54_fu_785_p2 == 1'd0))) begin
        row_V_addr_2_reg_1144 <= i_6_cast_fu_791_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        sext_ln54_reg_1130 <= sext_ln54_fu_775_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        start_idx_2_reg_1069 <= y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        start_idx_reg_967 <= x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln54_reg_1140_pp4_iter2_reg == 1'd0))) begin
        trunc_ln_reg_1160 <= {{grp_fu_799_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln38_fu_680_p2 == 1'd1) & (icmp_ln32_reg_1030_pp2_iter1_reg == 1'd0))) begin
        x_data_addr_reg_1048 <= j_2_reg_412_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln1499_1_fu_690_p2 == 1'd0))) begin
        y_rowptr_addr_reg_1063[8 : 0] <= zext_ln154_reg_1020[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        zext_ln154_1_reg_1025[8 : 0] <= zext_ln154_1_fu_665_p1[8 : 0];
        zext_ln154_reg_1020[8 : 0] <= zext_ln154_fu_661_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln32_fu_669_p2 == 1'd1))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_reg_1079 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state57 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state57 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_785_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln66_fu_820_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state71 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state71 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_fu_849_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state75 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state75 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) & (z_rowptr_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter8 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b0) & (ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter5 == 1'b0) & (ap_enable_reg_pp6_iter4 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_reg_1030_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln38_reg_1044_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4 = extracted_scalar_V_2_reg_422;
        end else if ((icmp_ln38_reg_1044_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4 = extracted_scalar_V_3_reg_1054;
        end else begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4 = ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_444;
        end
    end else begin
        ap_phi_mux_extracted_scalar_V_4_phi_fu_448_p4 = ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_444;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        if (((cmp1_i_reg_981 == 1'd1) & (found_reg_432 == 1'd1))) begin
            ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4 = extracted_scalar_V_2_reg_422;
        end else if (((cmp1_i_reg_981 == 1'd0) | (found_reg_432 == 1'd0))) begin
            ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4 = 32'd0;
        end else begin
            ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4 = 'bx;
    end
end

always @ (*) begin
    if ((icmp_ln32_reg_1030_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln38_reg_1044_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_found_1_phi_fu_460_p4 = found_reg_432;
        end else if ((icmp_ln38_reg_1044_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_found_1_phi_fu_460_p4 = 1'd1;
        end else begin
            ap_phi_mux_found_1_phi_fu_460_p4 = ap_phi_reg_pp2_iter11_found_1_reg_456;
        end
    end else begin
        ap_phi_mux_found_1_phi_fu_460_p4 = ap_phi_reg_pp2_iter11_found_1_reg_456;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_i_5_phi_fu_485_p4 = add_ln14_reg_1100;
    end else begin
        ap_phi_mux_i_5_phi_fu_485_p4 = i_5_reg_481;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln82_reg_1195 == 1'd0))) begin
        ap_phi_mux_i_9_phi_fu_529_p4 = add_ln82_reg_1190;
    end else begin
        ap_phi_mux_i_9_phi_fu_529_p4 = i_9_reg_525;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1030 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_2_phi_fu_415_p4 = add_ln32_reg_1034;
    end else begin
        ap_phi_mux_j_2_phi_fu_415_p4 = j_2_reg_412;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln14_reg_1079_pp3_iter1_reg == 1'd0))) begin
        ap_phi_mux_j_4_phi_fu_496_p4 = j_6_reg_1125;
    end else begin
        ap_phi_mux_j_4_phi_fu_496_p4 = j_4_reg_493;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) & (z_rowptr_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        buffer_row_V_address0 = i_4_cast_fu_912_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        buffer_row_V_address0 = trunc_ln91_cast_fu_855_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        buffer_row_V_address0 = row_V_1_addr_3_reg_1174_pp5_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_row_V_address0 = i_1_cast_fu_581_p1;
    end else begin
        buffer_row_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state10) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
        buffer_row_V_ce0 = 1'b1;
    end else begin
        buffer_row_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        buffer_row_V_ce1 = 1'b1;
    end else begin
        buffer_row_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        buffer_row_V_d0 = add_ln703_reg_1185;
    end else if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state10))) begin
        buffer_row_V_d0 = 32'd0;
    end else begin
        buffer_row_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln102_2_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85)) | ((icmp_ln102_1_fu_575_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1) & (icmp_ln66_reg_1170_pp5_iter1_reg == 1'd0)))) begin
        buffer_row_V_we0 = 1'b1;
    end else begin
        buffer_row_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        extracted_row_V_address0 = i_7_cast_fu_826_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter4 == 1'b1))) begin
        extracted_row_V_address0 = row_V_addr_2_reg_1144_pp4_iter3_reg;
    end else if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        extracted_row_V_address0 = i_5_cast3_fu_763_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        extracted_row_V_address0 = i_cast_fu_564_p1;
    end else begin
        extracted_row_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter4 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        extracted_row_V_ce0 = 1'b1;
    end else begin
        extracted_row_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        extracted_row_V_ce1 = 1'b1;
    end else begin
        extracted_row_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter4 == 1'b1))) begin
        extracted_row_V_d0 = trunc_ln_reg_1160;
    end else if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        extracted_row_V_d0 = select_ln21_fu_768_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        extracted_row_V_d0 = 32'd0;
    end else begin
        extracted_row_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln102_fu_558_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter4 == 1'b1) & (icmp_ln54_reg_1140_pp4_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln14_reg_1079_pp3_iter1_reg == 1'd0)))) begin
        extracted_row_V_we0 = 1'b1;
    end else begin
        extracted_row_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state24_io) & (cmp1_i_reg_981 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        x_colind_ARVALID = 1'b1;
    end else begin
        x_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1030 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_colind_RREADY = 1'b1;
    end else begin
        x_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((cmp1_i_reg_981 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        x_colind_blk_n_AR = m_axi_x_colind_ARREADY;
    end else begin
        x_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1030 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_colind_blk_n_R = m_axi_x_colind_RVALID;
    end else begin
        x_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_predicate_op203_readreq_state34 == 1'b1))) begin
        x_data_ARVALID = 1'b1;
    end else begin
        x_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_predicate_op210_read_state41 == 1'b1))) begin
        x_data_RREADY = 1'b1;
    end else begin
        x_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1044 == 1'd1) & (icmp_ln32_reg_1030_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_AR = m_axi_x_data_ARREADY;
    end else begin
        x_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_1044_pp2_iter9_reg == 1'd1) & (icmp_ln32_reg_1030_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_R = m_axi_x_data_RVALID;
    end else begin
        x_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((x_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        x_rowptr_ARVALID = 1'b1;
    end else begin
        x_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        x_rowptr_RREADY = 1'b1;
    end else begin
        x_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_rowptr_blk_n_AR = m_axi_x_rowptr_ARREADY;
    end else begin
        x_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        x_rowptr_blk_n_R = m_axi_x_rowptr_RVALID;
    end else begin
        x_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_colind_ARVALID = 1'b1;
    end else begin
        y_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_colind_RREADY = 1'b1;
    end else begin
        y_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_colind_blk_n_AR = m_axi_y_colind_ARREADY;
    end else begin
        y_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_colind_blk_n_R = m_axi_y_colind_RVALID;
    end else begin
        y_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_data_ARVALID = 1'b1;
    end else begin
        y_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_data_RREADY = 1'b1;
    end else begin
        y_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_data_blk_n_AR = m_axi_y_data_ARREADY;
    end else begin
        y_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_1079 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_data_blk_n_R = m_axi_y_data_RVALID;
    end else begin
        y_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (y_rowptr_ARREADY == 1'b1))) begin
        y_rowptr_ARVALID = 1'b1;
    end else begin
        y_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (y_rowptr_RVALID == 1'b1)))) begin
        y_rowptr_RREADY = 1'b1;
    end else begin
        y_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        y_rowptr_blk_n_AR = m_axi_y_rowptr_ARREADY;
    end else begin
        y_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51))) begin
        y_rowptr_blk_n_R = m_axi_y_rowptr_RVALID;
    end else begin
        y_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_colind_AWVALID = 1'b1;
    end else begin
        z_colind_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_colind_BREADY = 1'b1;
    end else begin
        z_colind_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_colind_WVALID = 1'b1;
    end else begin
        z_colind_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_colind_blk_n_AW = m_axi_z_colind_AWREADY;
    end else begin
        z_colind_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_colind_blk_n_B = m_axi_z_colind_BVALID;
    end else begin
        z_colind_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_colind_blk_n_W = m_axi_z_colind_WREADY;
    end else begin
        z_colind_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_data_AWVALID = 1'b1;
    end else begin
        z_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_data_BREADY = 1'b1;
    end else begin
        z_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        z_data_WVALID = 1'b1;
    end else begin
        z_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209 == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_data_blk_n_AW = m_axi_z_data_AWREADY;
    end else begin
        z_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_data_blk_n_B = m_axi_z_data_BVALID;
    end else begin
        z_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        z_data_blk_n_W = m_axi_z_data_WREADY;
    end else begin
        z_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
        z_rowptr_AWADDR = 64'd1;
    end else if ((~((ap_start == 1'b0) | (z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_rowptr_AWADDR = 64'd0;
    end else begin
        z_rowptr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
        z_rowptr_AWLEN = 32'd494;
    end else if ((~((ap_start == 1'b0) | (z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        z_rowptr_AWLEN = 32'd1;
    end else begin
        z_rowptr_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1)) | (~((ap_start == 1'b0) | (z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        z_rowptr_AWVALID = 1'b1;
    end else begin
        z_rowptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state91) & (z_rowptr_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (z_rowptr_BVALID == 1'b1)))) begin
        z_rowptr_BREADY = 1'b1;
    end else begin
        z_rowptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        z_rowptr_WDATA = start_idx_1_fu_148;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        z_rowptr_WDATA = 32'd0;
    end else begin
        z_rowptr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state84) & (z_rowptr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (z_rowptr_WREADY == 1'b1)))) begin
        z_rowptr_WVALID = 1'b1;
    end else begin
        z_rowptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        z_rowptr_blk_n_AW = m_axi_z_rowptr_AWREADY;
    end else begin
        z_rowptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state7))) begin
        z_rowptr_blk_n_B = m_axi_z_rowptr_BVALID;
    end else begin
        z_rowptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state2))) begin
        z_rowptr_blk_n_W = m_axi_z_rowptr_WREADY;
    end else begin
        z_rowptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln102_fu_558_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln102_1_fu_575_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (z_rowptr_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln149_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((x_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((x_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln154_fu_655_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_io) & (cmp1_i_reg_981 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else if (((1'b0 == ap_block_state24_io) & (cmp1_i_reg_981 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln1499_1_fu_690_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (y_rowptr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (y_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (y_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((~((icmp_ln14_reg_1079 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage4_subdone)) & (1'b0 == ap_block_pp3_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else if (((icmp_ln14_reg_1079 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((1'b0 == ap_block_pp3_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln54_fu_785_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter4 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter4 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln54_fu_785_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln66_fu_820_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln66_fu_820_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln82_fu_849_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)) & ~((ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter8 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter7 == 1'b0)) | ((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln82_fu_849_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((icmp_ln102_2_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((1'b1 == ap_CS_fsm_state91) & (z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_1_fu_569_p2 = (i_1_reg_377 + 9'd1);

assign add_ln102_2_fu_900_p2 = (i_4_reg_537 + 9'd1);

assign add_ln102_fu_552_p2 = (i_reg_366 + 9'd1);

assign add_ln14_fu_730_p2 = (i_5_reg_481 + 9'd1);

assign add_ln154_fu_646_p2 = (k_reg_400 + 9'd1);

assign add_ln32_fu_674_p2 = (ap_phi_mux_j_2_phi_fu_415_p4 + 64'd1);

assign add_ln54_fu_779_p2 = (i_6_reg_503 + 9'd1);

assign add_ln66_fu_814_p2 = (i_7_reg_514 + 9'd1);

assign add_ln703_fu_832_p2 = (extracted_row_V_q0 + buffer_row_V_q1);

assign add_ln82_fu_843_p2 = (ap_phi_mux_i_9_phi_fu_529_p4 + 9'd1);

assign and_ln21_fu_751_p2 = (icmp_ln21_reg_1095 & icmp_ln21_1_fu_746_p2);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp3_stage4 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp3_stage7 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd63];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((x_data_RVALID == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (ap_predicate_op210_read_state41 == 1'b1)) | ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((x_colind_RVALID == 1'b0) & (icmp_ln32_reg_1030 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((x_data_RVALID == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (ap_predicate_op210_read_state41 == 1'b1)) | ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((x_colind_RVALID == 1'b0) & (icmp_ln32_reg_1030 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage8_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((icmp_ln14_reg_1079 == 1'd0) & (y_data_RVALID == 1'b0)) | ((icmp_ln14_reg_1079 == 1'd0) & (y_colind_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp3_stage8_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((icmp_ln14_reg_1079 == 1'd0) & (y_data_RVALID == 1'b0)) | ((icmp_ln14_reg_1079 == 1'd0) & (y_colind_RVALID == 1'b0))));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_01001 = ((ap_enable_reg_pp6_iter8 == 1'b1) & (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_data_BVALID == 1'b0)) | ((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_colind_BVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp6_stage0_11001 = (((ap_enable_reg_pp6_iter8 == 1'b1) & (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_data_BVALID == 1'b0)) | ((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_colind_BVALID == 1'b0)))) | ((1'b1 == ap_block_state78_io) & (ap_enable_reg_pp6_iter3 == 1'b1)) | ((1'b1 == ap_block_state77_io) & (ap_enable_reg_pp6_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = (((ap_enable_reg_pp6_iter8 == 1'b1) & (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_data_BVALID == 1'b0)) | ((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_colind_BVALID == 1'b0)))) | ((1'b1 == ap_block_state78_io) & (ap_enable_reg_pp6_iter3 == 1'b1)) | ((1'b1 == ap_block_state77_io) & (ap_enable_reg_pp6_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state24_io = ((x_colind_ARREADY == 1'b0) & (cmp1_i_reg_981 == 1'd1));
end

assign ap_block_state31_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp2_stage0_iter1 = ((x_colind_RVALID == 1'b0) & (icmp_ln32_reg_1030 == 1'd0));
end

assign ap_block_state33_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_io = ((x_data_ARREADY == 1'b0) & (ap_predicate_op203_readreq_state34 == 1'b1));
end

assign ap_block_state34_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp2_stage0_iter10 = ((x_data_RVALID == 1'b0) & (ap_predicate_op210_read_state41 == 1'b1));
end

assign ap_block_state42_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_io = (((icmp_ln14_reg_1079 == 1'd0) & (y_data_ARREADY == 1'b0)) | ((icmp_ln14_reg_1079 == 1'd0) & (y_colind_ARREADY == 1'b0)));
end

assign ap_block_state54_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_pp3_stage8_iter0 = (((icmp_ln14_reg_1079 == 1'd0) & (y_data_RVALID == 1'b0)) | ((icmp_ln14_reg_1079 == 1'd0) & (y_colind_RVALID == 1'b0)));
end

assign ap_block_state62_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state77_io = (((icmp_ln1499_reg_1209 == 1'd0) & (z_data_AWREADY == 1'b0)) | ((icmp_ln1499_reg_1209 == 1'd0) & (z_colind_AWREADY == 1'b0)));
end

assign ap_block_state77_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state78_io = (((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (z_data_WREADY == 1'b0)) | ((icmp_ln1499_reg_1209_pp6_iter2_reg == 1'd0) & (z_colind_WREADY == 1'b0)));
end

assign ap_block_state78_pp6_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp6_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp6_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp6_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp6_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_pp6_stage0_iter8 = (((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_data_BVALID == 1'b0)) | ((icmp_ln1499_reg_1209_pp6_iter7_reg == 1'd0) & (z_colind_BVALID == 1'b0)));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_444 = 'bx;

assign ap_phi_reg_pp2_iter11_found_1_reg_456 = 'bx;

always @ (*) begin
    ap_predicate_op203_readreq_state34 = ((icmp_ln38_reg_1044 == 1'd1) & (icmp_ln32_reg_1030_pp2_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op210_read_state41 = ((icmp_ln38_reg_1044_pp2_iter9_reg == 1'd1) & (icmp_ln32_reg_1030_pp2_iter9_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buffer_row_V_address1 = i_7_cast_fu_826_p1;

assign cmp1_i_fu_626_p2 = (($signed(start_idx_reg_967) < $signed(end_idx_reg_974)) ? 1'b1 : 1'b0);

assign extracted_row_V_address1 = i_6_cast_fu_791_p1;

assign grp_fu_799_p1 = sext_ln54_reg_1130;

assign i_1_cast_fu_581_p1 = i_1_reg_377;

assign i_4_cast_fu_912_p1 = i_4_reg_537;

assign i_5_cast3_fu_763_p1 = i_5_reg_481_pp3_iter1_reg;

assign i_5_cast_fu_742_p1 = i_5_reg_481;

assign i_6_cast_fu_791_p1 = i_6_reg_503;

assign i_7_cast_fu_826_p1 = i_7_reg_514;

assign i_cast_fu_564_p1 = i_reg_366;

assign icmp_ln102_1_fu_575_p2 = ((i_1_reg_377 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln102_2_fu_906_p2 = ((i_4_reg_537 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_558_p2 = ((i_reg_366 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_690_p2 = ((ap_phi_mux_extracted_scalar_V_6_phi_fu_472_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_860_p2 = ((buffer_row_V_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_609_p2 = ((i_8_reg_388 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_701_p2 = ((ap_phi_mux_i_5_phi_fu_485_p4 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_655_p2 = ((k_reg_400 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_746_p2 = ((col_idx_2_reg_1110 == i_5_cast_fu_742_p1) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_725_p2 = (($signed(ap_phi_mux_j_4_phi_fu_496_p4) < $signed(end_idx_1_reg_1074)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_669_p2 = ((ap_phi_mux_j_2_phi_fu_415_p4 == sext_ln154_1_reg_990) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_680_p2 = ((col_idx_1_reg_1039 == zext_ln154_1_reg_1025) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_785_p2 = ((i_6_reg_503 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_820_p2 = ((i_7_reg_514 == 9'd494) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_849_p2 = ((ap_phi_mux_i_9_phi_fu_529_p4 == 9'd494) ? 1'b1 : 1'b0);

assign indvars_iv_next145_fu_603_p2 = (i_8_reg_388 + 9'd1);

assign j_1_fu_884_p0 = start_idx_1_fu_148;

assign j_1_fu_884_p2 = ($signed(j_1_fu_884_p0) + $signed(32'd1));

assign j_5_fu_736_p2 = ($signed(j_4_reg_493) + $signed(32'd1));

assign j_6_fu_756_p3 = ((and_ln21_fu_751_p2[0:0] == 1'b1) ? j_5_reg_1105 : j_4_reg_493);

assign select_ln21_fu_768_p3 = ((and_ln21_reg_1120[0:0] == 1'b1) ? y_data_addr_read_reg_1115 : 32'd0);

assign sext_ln154_1_fu_633_p1 = end_idx_reg_974;

assign sext_ln154_fu_630_p1 = start_idx_reg_967;

assign sext_ln19_fu_707_p1 = $signed(ap_phi_mux_j_4_phi_fu_496_p4);

assign sext_ln54_fu_775_p1 = extracted_scalar_V_6_reg_469;

assign sext_ln91_fu_866_p0 = start_idx_1_fu_148;

assign sext_ln91_fu_866_p1 = $signed(sext_ln91_fu_866_p0);

assign sub_ln32_fu_636_p2 = ($signed(end_idx_reg_974) - $signed(start_idx_reg_967));

assign trunc_ln91_cast_fu_855_p1 = ap_phi_mux_i_9_phi_fu_529_p4;

assign z_colind_WDATA = i_9_reg_525_pp6_iter2_reg;

assign zext_ln154_1_fu_665_p1 = k_reg_400;

assign zext_ln154_fu_661_p1 = k_reg_400;

assign zext_ln81_fu_615_p1 = i_8_reg_388;

always @ (posedge ap_clk) begin
    zext_ln154_reg_1020[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln154_1_reg_1025[31:9] <= 23'b00000000000000000000000;
    y_rowptr_addr_reg_1063[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //row_product
