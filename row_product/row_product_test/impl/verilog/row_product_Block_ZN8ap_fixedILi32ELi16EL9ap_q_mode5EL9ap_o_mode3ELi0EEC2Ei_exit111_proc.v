// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module row_product_Block_ZN8ap_fixedILi32ELi16EL9ap_q_mode5EL9ap_o_mode3ELi0EEC2Ei_exit111_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY,
        m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY,
        m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST,
        m_axi_z_rowptr_RID,
        m_axi_z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID,
        m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP,
        m_axi_z_rowptr_BID,
        m_axi_z_rowptr_BUSER,
        m_axi_x_rowptr_AWVALID,
        m_axi_x_rowptr_AWREADY,
        m_axi_x_rowptr_AWADDR,
        m_axi_x_rowptr_AWID,
        m_axi_x_rowptr_AWLEN,
        m_axi_x_rowptr_AWSIZE,
        m_axi_x_rowptr_AWBURST,
        m_axi_x_rowptr_AWLOCK,
        m_axi_x_rowptr_AWCACHE,
        m_axi_x_rowptr_AWPROT,
        m_axi_x_rowptr_AWQOS,
        m_axi_x_rowptr_AWREGION,
        m_axi_x_rowptr_AWUSER,
        m_axi_x_rowptr_WVALID,
        m_axi_x_rowptr_WREADY,
        m_axi_x_rowptr_WDATA,
        m_axi_x_rowptr_WSTRB,
        m_axi_x_rowptr_WLAST,
        m_axi_x_rowptr_WID,
        m_axi_x_rowptr_WUSER,
        m_axi_x_rowptr_ARVALID,
        m_axi_x_rowptr_ARREADY,
        m_axi_x_rowptr_ARADDR,
        m_axi_x_rowptr_ARID,
        m_axi_x_rowptr_ARLEN,
        m_axi_x_rowptr_ARSIZE,
        m_axi_x_rowptr_ARBURST,
        m_axi_x_rowptr_ARLOCK,
        m_axi_x_rowptr_ARCACHE,
        m_axi_x_rowptr_ARPROT,
        m_axi_x_rowptr_ARQOS,
        m_axi_x_rowptr_ARREGION,
        m_axi_x_rowptr_ARUSER,
        m_axi_x_rowptr_RVALID,
        m_axi_x_rowptr_RREADY,
        m_axi_x_rowptr_RDATA,
        m_axi_x_rowptr_RLAST,
        m_axi_x_rowptr_RID,
        m_axi_x_rowptr_RUSER,
        m_axi_x_rowptr_RRESP,
        m_axi_x_rowptr_BVALID,
        m_axi_x_rowptr_BREADY,
        m_axi_x_rowptr_BRESP,
        m_axi_x_rowptr_BID,
        m_axi_x_rowptr_BUSER,
        m_axi_x_colind_AWVALID,
        m_axi_x_colind_AWREADY,
        m_axi_x_colind_AWADDR,
        m_axi_x_colind_AWID,
        m_axi_x_colind_AWLEN,
        m_axi_x_colind_AWSIZE,
        m_axi_x_colind_AWBURST,
        m_axi_x_colind_AWLOCK,
        m_axi_x_colind_AWCACHE,
        m_axi_x_colind_AWPROT,
        m_axi_x_colind_AWQOS,
        m_axi_x_colind_AWREGION,
        m_axi_x_colind_AWUSER,
        m_axi_x_colind_WVALID,
        m_axi_x_colind_WREADY,
        m_axi_x_colind_WDATA,
        m_axi_x_colind_WSTRB,
        m_axi_x_colind_WLAST,
        m_axi_x_colind_WID,
        m_axi_x_colind_WUSER,
        m_axi_x_colind_ARVALID,
        m_axi_x_colind_ARREADY,
        m_axi_x_colind_ARADDR,
        m_axi_x_colind_ARID,
        m_axi_x_colind_ARLEN,
        m_axi_x_colind_ARSIZE,
        m_axi_x_colind_ARBURST,
        m_axi_x_colind_ARLOCK,
        m_axi_x_colind_ARCACHE,
        m_axi_x_colind_ARPROT,
        m_axi_x_colind_ARQOS,
        m_axi_x_colind_ARREGION,
        m_axi_x_colind_ARUSER,
        m_axi_x_colind_RVALID,
        m_axi_x_colind_RREADY,
        m_axi_x_colind_RDATA,
        m_axi_x_colind_RLAST,
        m_axi_x_colind_RID,
        m_axi_x_colind_RUSER,
        m_axi_x_colind_RRESP,
        m_axi_x_colind_BVALID,
        m_axi_x_colind_BREADY,
        m_axi_x_colind_BRESP,
        m_axi_x_colind_BID,
        m_axi_x_colind_BUSER,
        m_axi_x_data_AWVALID,
        m_axi_x_data_AWREADY,
        m_axi_x_data_AWADDR,
        m_axi_x_data_AWID,
        m_axi_x_data_AWLEN,
        m_axi_x_data_AWSIZE,
        m_axi_x_data_AWBURST,
        m_axi_x_data_AWLOCK,
        m_axi_x_data_AWCACHE,
        m_axi_x_data_AWPROT,
        m_axi_x_data_AWQOS,
        m_axi_x_data_AWREGION,
        m_axi_x_data_AWUSER,
        m_axi_x_data_WVALID,
        m_axi_x_data_WREADY,
        m_axi_x_data_WDATA,
        m_axi_x_data_WSTRB,
        m_axi_x_data_WLAST,
        m_axi_x_data_WID,
        m_axi_x_data_WUSER,
        m_axi_x_data_ARVALID,
        m_axi_x_data_ARREADY,
        m_axi_x_data_ARADDR,
        m_axi_x_data_ARID,
        m_axi_x_data_ARLEN,
        m_axi_x_data_ARSIZE,
        m_axi_x_data_ARBURST,
        m_axi_x_data_ARLOCK,
        m_axi_x_data_ARCACHE,
        m_axi_x_data_ARPROT,
        m_axi_x_data_ARQOS,
        m_axi_x_data_ARREGION,
        m_axi_x_data_ARUSER,
        m_axi_x_data_RVALID,
        m_axi_x_data_RREADY,
        m_axi_x_data_RDATA,
        m_axi_x_data_RLAST,
        m_axi_x_data_RID,
        m_axi_x_data_RUSER,
        m_axi_x_data_RRESP,
        m_axi_x_data_BVALID,
        m_axi_x_data_BREADY,
        m_axi_x_data_BRESP,
        m_axi_x_data_BID,
        m_axi_x_data_BUSER,
        m_axi_y_rowptr_AWVALID,
        m_axi_y_rowptr_AWREADY,
        m_axi_y_rowptr_AWADDR,
        m_axi_y_rowptr_AWID,
        m_axi_y_rowptr_AWLEN,
        m_axi_y_rowptr_AWSIZE,
        m_axi_y_rowptr_AWBURST,
        m_axi_y_rowptr_AWLOCK,
        m_axi_y_rowptr_AWCACHE,
        m_axi_y_rowptr_AWPROT,
        m_axi_y_rowptr_AWQOS,
        m_axi_y_rowptr_AWREGION,
        m_axi_y_rowptr_AWUSER,
        m_axi_y_rowptr_WVALID,
        m_axi_y_rowptr_WREADY,
        m_axi_y_rowptr_WDATA,
        m_axi_y_rowptr_WSTRB,
        m_axi_y_rowptr_WLAST,
        m_axi_y_rowptr_WID,
        m_axi_y_rowptr_WUSER,
        m_axi_y_rowptr_ARVALID,
        m_axi_y_rowptr_ARREADY,
        m_axi_y_rowptr_ARADDR,
        m_axi_y_rowptr_ARID,
        m_axi_y_rowptr_ARLEN,
        m_axi_y_rowptr_ARSIZE,
        m_axi_y_rowptr_ARBURST,
        m_axi_y_rowptr_ARLOCK,
        m_axi_y_rowptr_ARCACHE,
        m_axi_y_rowptr_ARPROT,
        m_axi_y_rowptr_ARQOS,
        m_axi_y_rowptr_ARREGION,
        m_axi_y_rowptr_ARUSER,
        m_axi_y_rowptr_RVALID,
        m_axi_y_rowptr_RREADY,
        m_axi_y_rowptr_RDATA,
        m_axi_y_rowptr_RLAST,
        m_axi_y_rowptr_RID,
        m_axi_y_rowptr_RUSER,
        m_axi_y_rowptr_RRESP,
        m_axi_y_rowptr_BVALID,
        m_axi_y_rowptr_BREADY,
        m_axi_y_rowptr_BRESP,
        m_axi_y_rowptr_BID,
        m_axi_y_rowptr_BUSER,
        m_axi_y_data_AWVALID,
        m_axi_y_data_AWREADY,
        m_axi_y_data_AWADDR,
        m_axi_y_data_AWID,
        m_axi_y_data_AWLEN,
        m_axi_y_data_AWSIZE,
        m_axi_y_data_AWBURST,
        m_axi_y_data_AWLOCK,
        m_axi_y_data_AWCACHE,
        m_axi_y_data_AWPROT,
        m_axi_y_data_AWQOS,
        m_axi_y_data_AWREGION,
        m_axi_y_data_AWUSER,
        m_axi_y_data_WVALID,
        m_axi_y_data_WREADY,
        m_axi_y_data_WDATA,
        m_axi_y_data_WSTRB,
        m_axi_y_data_WLAST,
        m_axi_y_data_WID,
        m_axi_y_data_WUSER,
        m_axi_y_data_ARVALID,
        m_axi_y_data_ARREADY,
        m_axi_y_data_ARADDR,
        m_axi_y_data_ARID,
        m_axi_y_data_ARLEN,
        m_axi_y_data_ARSIZE,
        m_axi_y_data_ARBURST,
        m_axi_y_data_ARLOCK,
        m_axi_y_data_ARCACHE,
        m_axi_y_data_ARPROT,
        m_axi_y_data_ARQOS,
        m_axi_y_data_ARREGION,
        m_axi_y_data_ARUSER,
        m_axi_y_data_RVALID,
        m_axi_y_data_RREADY,
        m_axi_y_data_RDATA,
        m_axi_y_data_RLAST,
        m_axi_y_data_RID,
        m_axi_y_data_RUSER,
        m_axi_y_data_RRESP,
        m_axi_y_data_BVALID,
        m_axi_y_data_BREADY,
        m_axi_y_data_BRESP,
        m_axi_y_data_BID,
        m_axi_y_data_BUSER,
        m_axi_y_colind_AWVALID,
        m_axi_y_colind_AWREADY,
        m_axi_y_colind_AWADDR,
        m_axi_y_colind_AWID,
        m_axi_y_colind_AWLEN,
        m_axi_y_colind_AWSIZE,
        m_axi_y_colind_AWBURST,
        m_axi_y_colind_AWLOCK,
        m_axi_y_colind_AWCACHE,
        m_axi_y_colind_AWPROT,
        m_axi_y_colind_AWQOS,
        m_axi_y_colind_AWREGION,
        m_axi_y_colind_AWUSER,
        m_axi_y_colind_WVALID,
        m_axi_y_colind_WREADY,
        m_axi_y_colind_WDATA,
        m_axi_y_colind_WSTRB,
        m_axi_y_colind_WLAST,
        m_axi_y_colind_WID,
        m_axi_y_colind_WUSER,
        m_axi_y_colind_ARVALID,
        m_axi_y_colind_ARREADY,
        m_axi_y_colind_ARADDR,
        m_axi_y_colind_ARID,
        m_axi_y_colind_ARLEN,
        m_axi_y_colind_ARSIZE,
        m_axi_y_colind_ARBURST,
        m_axi_y_colind_ARLOCK,
        m_axi_y_colind_ARCACHE,
        m_axi_y_colind_ARPROT,
        m_axi_y_colind_ARQOS,
        m_axi_y_colind_ARREGION,
        m_axi_y_colind_ARUSER,
        m_axi_y_colind_RVALID,
        m_axi_y_colind_RREADY,
        m_axi_y_colind_RDATA,
        m_axi_y_colind_RLAST,
        m_axi_y_colind_RID,
        m_axi_y_colind_RUSER,
        m_axi_y_colind_RRESP,
        m_axi_y_colind_BVALID,
        m_axi_y_colind_BREADY,
        m_axi_y_colind_BRESP,
        m_axi_y_colind_BID,
        m_axi_y_colind_BUSER,
        m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY,
        m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY,
        m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST,
        m_axi_z_colind_WID,
        m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY,
        m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID,
        m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA,
        m_axi_z_colind_RLAST,
        m_axi_z_colind_RID,
        m_axi_z_colind_RUSER,
        m_axi_z_colind_RRESP,
        m_axi_z_colind_BVALID,
        m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP,
        m_axi_z_colind_BID,
        m_axi_z_colind_BUSER,
        m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY,
        m_axi_z_data_AWADDR,
        m_axi_z_data_AWID,
        m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID,
        m_axi_z_data_WREADY,
        m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST,
        m_axi_z_data_WID,
        m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY,
        m_axi_z_data_ARADDR,
        m_axi_z_data_ARID,
        m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID,
        m_axi_z_data_RREADY,
        m_axi_z_data_RDATA,
        m_axi_z_data_RLAST,
        m_axi_z_data_RID,
        m_axi_z_data_RUSER,
        m_axi_z_data_RRESP,
        m_axi_z_data_BVALID,
        m_axi_z_data_BREADY,
        m_axi_z_data_BRESP,
        m_axi_z_data_BID,
        m_axi_z_data_BUSER
);

parameter    ap_ST_fsm_state1 = 83'd1;
parameter    ap_ST_fsm_state2 = 83'd2;
parameter    ap_ST_fsm_state3 = 83'd4;
parameter    ap_ST_fsm_state4 = 83'd8;
parameter    ap_ST_fsm_state5 = 83'd16;
parameter    ap_ST_fsm_state6 = 83'd32;
parameter    ap_ST_fsm_state7 = 83'd64;
parameter    ap_ST_fsm_pp0_stage0 = 83'd128;
parameter    ap_ST_fsm_state10 = 83'd256;
parameter    ap_ST_fsm_pp1_stage0 = 83'd512;
parameter    ap_ST_fsm_state13 = 83'd1024;
parameter    ap_ST_fsm_state14 = 83'd2048;
parameter    ap_ST_fsm_state15 = 83'd4096;
parameter    ap_ST_fsm_state16 = 83'd8192;
parameter    ap_ST_fsm_state17 = 83'd16384;
parameter    ap_ST_fsm_state18 = 83'd32768;
parameter    ap_ST_fsm_state19 = 83'd65536;
parameter    ap_ST_fsm_state20 = 83'd131072;
parameter    ap_ST_fsm_state21 = 83'd262144;
parameter    ap_ST_fsm_state22 = 83'd524288;
parameter    ap_ST_fsm_state23 = 83'd1048576;
parameter    ap_ST_fsm_state24 = 83'd2097152;
parameter    ap_ST_fsm_state25 = 83'd4194304;
parameter    ap_ST_fsm_state26 = 83'd8388608;
parameter    ap_ST_fsm_state27 = 83'd16777216;
parameter    ap_ST_fsm_state28 = 83'd33554432;
parameter    ap_ST_fsm_state29 = 83'd67108864;
parameter    ap_ST_fsm_state30 = 83'd134217728;
parameter    ap_ST_fsm_state31 = 83'd268435456;
parameter    ap_ST_fsm_state32 = 83'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 83'd1073741824;
parameter    ap_ST_fsm_state45 = 83'd2147483648;
parameter    ap_ST_fsm_state46 = 83'd4294967296;
parameter    ap_ST_fsm_state47 = 83'd8589934592;
parameter    ap_ST_fsm_state48 = 83'd17179869184;
parameter    ap_ST_fsm_state49 = 83'd34359738368;
parameter    ap_ST_fsm_state50 = 83'd68719476736;
parameter    ap_ST_fsm_state51 = 83'd137438953472;
parameter    ap_ST_fsm_state52 = 83'd274877906944;
parameter    ap_ST_fsm_state53 = 83'd549755813888;
parameter    ap_ST_fsm_state54 = 83'd1099511627776;
parameter    ap_ST_fsm_pp3_stage0 = 83'd2199023255552;
parameter    ap_ST_fsm_pp3_stage1 = 83'd4398046511104;
parameter    ap_ST_fsm_pp3_stage2 = 83'd8796093022208;
parameter    ap_ST_fsm_pp3_stage3 = 83'd17592186044416;
parameter    ap_ST_fsm_pp3_stage4 = 83'd35184372088832;
parameter    ap_ST_fsm_pp3_stage5 = 83'd70368744177664;
parameter    ap_ST_fsm_pp3_stage6 = 83'd140737488355328;
parameter    ap_ST_fsm_pp3_stage7 = 83'd281474976710656;
parameter    ap_ST_fsm_pp3_stage8 = 83'd562949953421312;
parameter    ap_ST_fsm_pp3_stage9 = 83'd1125899906842624;
parameter    ap_ST_fsm_pp3_stage10 = 83'd2251799813685248;
parameter    ap_ST_fsm_pp3_stage11 = 83'd4503599627370496;
parameter    ap_ST_fsm_pp3_stage12 = 83'd9007199254740992;
parameter    ap_ST_fsm_pp3_stage13 = 83'd18014398509481984;
parameter    ap_ST_fsm_pp3_stage14 = 83'd36028797018963968;
parameter    ap_ST_fsm_pp3_stage15 = 83'd72057594037927936;
parameter    ap_ST_fsm_pp3_stage16 = 83'd144115188075855872;
parameter    ap_ST_fsm_pp3_stage17 = 83'd288230376151711744;
parameter    ap_ST_fsm_state74 = 83'd576460752303423488;
parameter    ap_ST_fsm_state75 = 83'd1152921504606846976;
parameter    ap_ST_fsm_state76 = 83'd2305843009213693952;
parameter    ap_ST_fsm_state77 = 83'd4611686018427387904;
parameter    ap_ST_fsm_state78 = 83'd9223372036854775808;
parameter    ap_ST_fsm_state79 = 83'd18446744073709551616;
parameter    ap_ST_fsm_state80 = 83'd36893488147419103232;
parameter    ap_ST_fsm_state81 = 83'd73786976294838206464;
parameter    ap_ST_fsm_state82 = 83'd147573952589676412928;
parameter    ap_ST_fsm_state83 = 83'd295147905179352825856;
parameter    ap_ST_fsm_state84 = 83'd590295810358705651712;
parameter    ap_ST_fsm_state85 = 83'd1180591620717411303424;
parameter    ap_ST_fsm_state86 = 83'd2361183241434822606848;
parameter    ap_ST_fsm_state87 = 83'd4722366482869645213696;
parameter    ap_ST_fsm_pp4_stage0 = 83'd9444732965739290427392;
parameter    ap_ST_fsm_state97 = 83'd18889465931478580854784;
parameter    ap_ST_fsm_state98 = 83'd37778931862957161709568;
parameter    ap_ST_fsm_state99 = 83'd75557863725914323419136;
parameter    ap_ST_fsm_state100 = 83'd151115727451828646838272;
parameter    ap_ST_fsm_state101 = 83'd302231454903657293676544;
parameter    ap_ST_fsm_state102 = 83'd604462909807314587353088;
parameter    ap_ST_fsm_state103 = 83'd1208925819614629174706176;
parameter    ap_ST_fsm_pp5_stage0 = 83'd2417851639229258349412352;
parameter    ap_ST_fsm_state106 = 83'd4835703278458516698824704;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_z_rowptr_AWVALID;
input   m_axi_z_rowptr_AWREADY;
output  [63:0] m_axi_z_rowptr_AWADDR;
output  [0:0] m_axi_z_rowptr_AWID;
output  [31:0] m_axi_z_rowptr_AWLEN;
output  [2:0] m_axi_z_rowptr_AWSIZE;
output  [1:0] m_axi_z_rowptr_AWBURST;
output  [1:0] m_axi_z_rowptr_AWLOCK;
output  [3:0] m_axi_z_rowptr_AWCACHE;
output  [2:0] m_axi_z_rowptr_AWPROT;
output  [3:0] m_axi_z_rowptr_AWQOS;
output  [3:0] m_axi_z_rowptr_AWREGION;
output  [0:0] m_axi_z_rowptr_AWUSER;
output   m_axi_z_rowptr_WVALID;
input   m_axi_z_rowptr_WREADY;
output  [31:0] m_axi_z_rowptr_WDATA;
output  [3:0] m_axi_z_rowptr_WSTRB;
output   m_axi_z_rowptr_WLAST;
output  [0:0] m_axi_z_rowptr_WID;
output  [0:0] m_axi_z_rowptr_WUSER;
output   m_axi_z_rowptr_ARVALID;
input   m_axi_z_rowptr_ARREADY;
output  [63:0] m_axi_z_rowptr_ARADDR;
output  [0:0] m_axi_z_rowptr_ARID;
output  [31:0] m_axi_z_rowptr_ARLEN;
output  [2:0] m_axi_z_rowptr_ARSIZE;
output  [1:0] m_axi_z_rowptr_ARBURST;
output  [1:0] m_axi_z_rowptr_ARLOCK;
output  [3:0] m_axi_z_rowptr_ARCACHE;
output  [2:0] m_axi_z_rowptr_ARPROT;
output  [3:0] m_axi_z_rowptr_ARQOS;
output  [3:0] m_axi_z_rowptr_ARREGION;
output  [0:0] m_axi_z_rowptr_ARUSER;
input   m_axi_z_rowptr_RVALID;
output   m_axi_z_rowptr_RREADY;
input  [31:0] m_axi_z_rowptr_RDATA;
input   m_axi_z_rowptr_RLAST;
input  [0:0] m_axi_z_rowptr_RID;
input  [0:0] m_axi_z_rowptr_RUSER;
input  [1:0] m_axi_z_rowptr_RRESP;
input   m_axi_z_rowptr_BVALID;
output   m_axi_z_rowptr_BREADY;
input  [1:0] m_axi_z_rowptr_BRESP;
input  [0:0] m_axi_z_rowptr_BID;
input  [0:0] m_axi_z_rowptr_BUSER;
output   m_axi_x_rowptr_AWVALID;
input   m_axi_x_rowptr_AWREADY;
output  [63:0] m_axi_x_rowptr_AWADDR;
output  [0:0] m_axi_x_rowptr_AWID;
output  [31:0] m_axi_x_rowptr_AWLEN;
output  [2:0] m_axi_x_rowptr_AWSIZE;
output  [1:0] m_axi_x_rowptr_AWBURST;
output  [1:0] m_axi_x_rowptr_AWLOCK;
output  [3:0] m_axi_x_rowptr_AWCACHE;
output  [2:0] m_axi_x_rowptr_AWPROT;
output  [3:0] m_axi_x_rowptr_AWQOS;
output  [3:0] m_axi_x_rowptr_AWREGION;
output  [0:0] m_axi_x_rowptr_AWUSER;
output   m_axi_x_rowptr_WVALID;
input   m_axi_x_rowptr_WREADY;
output  [31:0] m_axi_x_rowptr_WDATA;
output  [3:0] m_axi_x_rowptr_WSTRB;
output   m_axi_x_rowptr_WLAST;
output  [0:0] m_axi_x_rowptr_WID;
output  [0:0] m_axi_x_rowptr_WUSER;
output   m_axi_x_rowptr_ARVALID;
input   m_axi_x_rowptr_ARREADY;
output  [63:0] m_axi_x_rowptr_ARADDR;
output  [0:0] m_axi_x_rowptr_ARID;
output  [31:0] m_axi_x_rowptr_ARLEN;
output  [2:0] m_axi_x_rowptr_ARSIZE;
output  [1:0] m_axi_x_rowptr_ARBURST;
output  [1:0] m_axi_x_rowptr_ARLOCK;
output  [3:0] m_axi_x_rowptr_ARCACHE;
output  [2:0] m_axi_x_rowptr_ARPROT;
output  [3:0] m_axi_x_rowptr_ARQOS;
output  [3:0] m_axi_x_rowptr_ARREGION;
output  [0:0] m_axi_x_rowptr_ARUSER;
input   m_axi_x_rowptr_RVALID;
output   m_axi_x_rowptr_RREADY;
input  [31:0] m_axi_x_rowptr_RDATA;
input   m_axi_x_rowptr_RLAST;
input  [0:0] m_axi_x_rowptr_RID;
input  [0:0] m_axi_x_rowptr_RUSER;
input  [1:0] m_axi_x_rowptr_RRESP;
input   m_axi_x_rowptr_BVALID;
output   m_axi_x_rowptr_BREADY;
input  [1:0] m_axi_x_rowptr_BRESP;
input  [0:0] m_axi_x_rowptr_BID;
input  [0:0] m_axi_x_rowptr_BUSER;
output   m_axi_x_colind_AWVALID;
input   m_axi_x_colind_AWREADY;
output  [63:0] m_axi_x_colind_AWADDR;
output  [0:0] m_axi_x_colind_AWID;
output  [31:0] m_axi_x_colind_AWLEN;
output  [2:0] m_axi_x_colind_AWSIZE;
output  [1:0] m_axi_x_colind_AWBURST;
output  [1:0] m_axi_x_colind_AWLOCK;
output  [3:0] m_axi_x_colind_AWCACHE;
output  [2:0] m_axi_x_colind_AWPROT;
output  [3:0] m_axi_x_colind_AWQOS;
output  [3:0] m_axi_x_colind_AWREGION;
output  [0:0] m_axi_x_colind_AWUSER;
output   m_axi_x_colind_WVALID;
input   m_axi_x_colind_WREADY;
output  [31:0] m_axi_x_colind_WDATA;
output  [3:0] m_axi_x_colind_WSTRB;
output   m_axi_x_colind_WLAST;
output  [0:0] m_axi_x_colind_WID;
output  [0:0] m_axi_x_colind_WUSER;
output   m_axi_x_colind_ARVALID;
input   m_axi_x_colind_ARREADY;
output  [63:0] m_axi_x_colind_ARADDR;
output  [0:0] m_axi_x_colind_ARID;
output  [31:0] m_axi_x_colind_ARLEN;
output  [2:0] m_axi_x_colind_ARSIZE;
output  [1:0] m_axi_x_colind_ARBURST;
output  [1:0] m_axi_x_colind_ARLOCK;
output  [3:0] m_axi_x_colind_ARCACHE;
output  [2:0] m_axi_x_colind_ARPROT;
output  [3:0] m_axi_x_colind_ARQOS;
output  [3:0] m_axi_x_colind_ARREGION;
output  [0:0] m_axi_x_colind_ARUSER;
input   m_axi_x_colind_RVALID;
output   m_axi_x_colind_RREADY;
input  [31:0] m_axi_x_colind_RDATA;
input   m_axi_x_colind_RLAST;
input  [0:0] m_axi_x_colind_RID;
input  [0:0] m_axi_x_colind_RUSER;
input  [1:0] m_axi_x_colind_RRESP;
input   m_axi_x_colind_BVALID;
output   m_axi_x_colind_BREADY;
input  [1:0] m_axi_x_colind_BRESP;
input  [0:0] m_axi_x_colind_BID;
input  [0:0] m_axi_x_colind_BUSER;
output   m_axi_x_data_AWVALID;
input   m_axi_x_data_AWREADY;
output  [63:0] m_axi_x_data_AWADDR;
output  [0:0] m_axi_x_data_AWID;
output  [31:0] m_axi_x_data_AWLEN;
output  [2:0] m_axi_x_data_AWSIZE;
output  [1:0] m_axi_x_data_AWBURST;
output  [1:0] m_axi_x_data_AWLOCK;
output  [3:0] m_axi_x_data_AWCACHE;
output  [2:0] m_axi_x_data_AWPROT;
output  [3:0] m_axi_x_data_AWQOS;
output  [3:0] m_axi_x_data_AWREGION;
output  [0:0] m_axi_x_data_AWUSER;
output   m_axi_x_data_WVALID;
input   m_axi_x_data_WREADY;
output  [31:0] m_axi_x_data_WDATA;
output  [3:0] m_axi_x_data_WSTRB;
output   m_axi_x_data_WLAST;
output  [0:0] m_axi_x_data_WID;
output  [0:0] m_axi_x_data_WUSER;
output   m_axi_x_data_ARVALID;
input   m_axi_x_data_ARREADY;
output  [63:0] m_axi_x_data_ARADDR;
output  [0:0] m_axi_x_data_ARID;
output  [31:0] m_axi_x_data_ARLEN;
output  [2:0] m_axi_x_data_ARSIZE;
output  [1:0] m_axi_x_data_ARBURST;
output  [1:0] m_axi_x_data_ARLOCK;
output  [3:0] m_axi_x_data_ARCACHE;
output  [2:0] m_axi_x_data_ARPROT;
output  [3:0] m_axi_x_data_ARQOS;
output  [3:0] m_axi_x_data_ARREGION;
output  [0:0] m_axi_x_data_ARUSER;
input   m_axi_x_data_RVALID;
output   m_axi_x_data_RREADY;
input  [31:0] m_axi_x_data_RDATA;
input   m_axi_x_data_RLAST;
input  [0:0] m_axi_x_data_RID;
input  [0:0] m_axi_x_data_RUSER;
input  [1:0] m_axi_x_data_RRESP;
input   m_axi_x_data_BVALID;
output   m_axi_x_data_BREADY;
input  [1:0] m_axi_x_data_BRESP;
input  [0:0] m_axi_x_data_BID;
input  [0:0] m_axi_x_data_BUSER;
output   m_axi_y_rowptr_AWVALID;
input   m_axi_y_rowptr_AWREADY;
output  [63:0] m_axi_y_rowptr_AWADDR;
output  [0:0] m_axi_y_rowptr_AWID;
output  [31:0] m_axi_y_rowptr_AWLEN;
output  [2:0] m_axi_y_rowptr_AWSIZE;
output  [1:0] m_axi_y_rowptr_AWBURST;
output  [1:0] m_axi_y_rowptr_AWLOCK;
output  [3:0] m_axi_y_rowptr_AWCACHE;
output  [2:0] m_axi_y_rowptr_AWPROT;
output  [3:0] m_axi_y_rowptr_AWQOS;
output  [3:0] m_axi_y_rowptr_AWREGION;
output  [0:0] m_axi_y_rowptr_AWUSER;
output   m_axi_y_rowptr_WVALID;
input   m_axi_y_rowptr_WREADY;
output  [31:0] m_axi_y_rowptr_WDATA;
output  [3:0] m_axi_y_rowptr_WSTRB;
output   m_axi_y_rowptr_WLAST;
output  [0:0] m_axi_y_rowptr_WID;
output  [0:0] m_axi_y_rowptr_WUSER;
output   m_axi_y_rowptr_ARVALID;
input   m_axi_y_rowptr_ARREADY;
output  [63:0] m_axi_y_rowptr_ARADDR;
output  [0:0] m_axi_y_rowptr_ARID;
output  [31:0] m_axi_y_rowptr_ARLEN;
output  [2:0] m_axi_y_rowptr_ARSIZE;
output  [1:0] m_axi_y_rowptr_ARBURST;
output  [1:0] m_axi_y_rowptr_ARLOCK;
output  [3:0] m_axi_y_rowptr_ARCACHE;
output  [2:0] m_axi_y_rowptr_ARPROT;
output  [3:0] m_axi_y_rowptr_ARQOS;
output  [3:0] m_axi_y_rowptr_ARREGION;
output  [0:0] m_axi_y_rowptr_ARUSER;
input   m_axi_y_rowptr_RVALID;
output   m_axi_y_rowptr_RREADY;
input  [31:0] m_axi_y_rowptr_RDATA;
input   m_axi_y_rowptr_RLAST;
input  [0:0] m_axi_y_rowptr_RID;
input  [0:0] m_axi_y_rowptr_RUSER;
input  [1:0] m_axi_y_rowptr_RRESP;
input   m_axi_y_rowptr_BVALID;
output   m_axi_y_rowptr_BREADY;
input  [1:0] m_axi_y_rowptr_BRESP;
input  [0:0] m_axi_y_rowptr_BID;
input  [0:0] m_axi_y_rowptr_BUSER;
output   m_axi_y_data_AWVALID;
input   m_axi_y_data_AWREADY;
output  [63:0] m_axi_y_data_AWADDR;
output  [0:0] m_axi_y_data_AWID;
output  [31:0] m_axi_y_data_AWLEN;
output  [2:0] m_axi_y_data_AWSIZE;
output  [1:0] m_axi_y_data_AWBURST;
output  [1:0] m_axi_y_data_AWLOCK;
output  [3:0] m_axi_y_data_AWCACHE;
output  [2:0] m_axi_y_data_AWPROT;
output  [3:0] m_axi_y_data_AWQOS;
output  [3:0] m_axi_y_data_AWREGION;
output  [0:0] m_axi_y_data_AWUSER;
output   m_axi_y_data_WVALID;
input   m_axi_y_data_WREADY;
output  [31:0] m_axi_y_data_WDATA;
output  [3:0] m_axi_y_data_WSTRB;
output   m_axi_y_data_WLAST;
output  [0:0] m_axi_y_data_WID;
output  [0:0] m_axi_y_data_WUSER;
output   m_axi_y_data_ARVALID;
input   m_axi_y_data_ARREADY;
output  [63:0] m_axi_y_data_ARADDR;
output  [0:0] m_axi_y_data_ARID;
output  [31:0] m_axi_y_data_ARLEN;
output  [2:0] m_axi_y_data_ARSIZE;
output  [1:0] m_axi_y_data_ARBURST;
output  [1:0] m_axi_y_data_ARLOCK;
output  [3:0] m_axi_y_data_ARCACHE;
output  [2:0] m_axi_y_data_ARPROT;
output  [3:0] m_axi_y_data_ARQOS;
output  [3:0] m_axi_y_data_ARREGION;
output  [0:0] m_axi_y_data_ARUSER;
input   m_axi_y_data_RVALID;
output   m_axi_y_data_RREADY;
input  [31:0] m_axi_y_data_RDATA;
input   m_axi_y_data_RLAST;
input  [0:0] m_axi_y_data_RID;
input  [0:0] m_axi_y_data_RUSER;
input  [1:0] m_axi_y_data_RRESP;
input   m_axi_y_data_BVALID;
output   m_axi_y_data_BREADY;
input  [1:0] m_axi_y_data_BRESP;
input  [0:0] m_axi_y_data_BID;
input  [0:0] m_axi_y_data_BUSER;
output   m_axi_y_colind_AWVALID;
input   m_axi_y_colind_AWREADY;
output  [63:0] m_axi_y_colind_AWADDR;
output  [0:0] m_axi_y_colind_AWID;
output  [31:0] m_axi_y_colind_AWLEN;
output  [2:0] m_axi_y_colind_AWSIZE;
output  [1:0] m_axi_y_colind_AWBURST;
output  [1:0] m_axi_y_colind_AWLOCK;
output  [3:0] m_axi_y_colind_AWCACHE;
output  [2:0] m_axi_y_colind_AWPROT;
output  [3:0] m_axi_y_colind_AWQOS;
output  [3:0] m_axi_y_colind_AWREGION;
output  [0:0] m_axi_y_colind_AWUSER;
output   m_axi_y_colind_WVALID;
input   m_axi_y_colind_WREADY;
output  [31:0] m_axi_y_colind_WDATA;
output  [3:0] m_axi_y_colind_WSTRB;
output   m_axi_y_colind_WLAST;
output  [0:0] m_axi_y_colind_WID;
output  [0:0] m_axi_y_colind_WUSER;
output   m_axi_y_colind_ARVALID;
input   m_axi_y_colind_ARREADY;
output  [63:0] m_axi_y_colind_ARADDR;
output  [0:0] m_axi_y_colind_ARID;
output  [31:0] m_axi_y_colind_ARLEN;
output  [2:0] m_axi_y_colind_ARSIZE;
output  [1:0] m_axi_y_colind_ARBURST;
output  [1:0] m_axi_y_colind_ARLOCK;
output  [3:0] m_axi_y_colind_ARCACHE;
output  [2:0] m_axi_y_colind_ARPROT;
output  [3:0] m_axi_y_colind_ARQOS;
output  [3:0] m_axi_y_colind_ARREGION;
output  [0:0] m_axi_y_colind_ARUSER;
input   m_axi_y_colind_RVALID;
output   m_axi_y_colind_RREADY;
input  [31:0] m_axi_y_colind_RDATA;
input   m_axi_y_colind_RLAST;
input  [0:0] m_axi_y_colind_RID;
input  [0:0] m_axi_y_colind_RUSER;
input  [1:0] m_axi_y_colind_RRESP;
input   m_axi_y_colind_BVALID;
output   m_axi_y_colind_BREADY;
input  [1:0] m_axi_y_colind_BRESP;
input  [0:0] m_axi_y_colind_BID;
input  [0:0] m_axi_y_colind_BUSER;
output   m_axi_z_colind_AWVALID;
input   m_axi_z_colind_AWREADY;
output  [63:0] m_axi_z_colind_AWADDR;
output  [0:0] m_axi_z_colind_AWID;
output  [31:0] m_axi_z_colind_AWLEN;
output  [2:0] m_axi_z_colind_AWSIZE;
output  [1:0] m_axi_z_colind_AWBURST;
output  [1:0] m_axi_z_colind_AWLOCK;
output  [3:0] m_axi_z_colind_AWCACHE;
output  [2:0] m_axi_z_colind_AWPROT;
output  [3:0] m_axi_z_colind_AWQOS;
output  [3:0] m_axi_z_colind_AWREGION;
output  [0:0] m_axi_z_colind_AWUSER;
output   m_axi_z_colind_WVALID;
input   m_axi_z_colind_WREADY;
output  [31:0] m_axi_z_colind_WDATA;
output  [3:0] m_axi_z_colind_WSTRB;
output   m_axi_z_colind_WLAST;
output  [0:0] m_axi_z_colind_WID;
output  [0:0] m_axi_z_colind_WUSER;
output   m_axi_z_colind_ARVALID;
input   m_axi_z_colind_ARREADY;
output  [63:0] m_axi_z_colind_ARADDR;
output  [0:0] m_axi_z_colind_ARID;
output  [31:0] m_axi_z_colind_ARLEN;
output  [2:0] m_axi_z_colind_ARSIZE;
output  [1:0] m_axi_z_colind_ARBURST;
output  [1:0] m_axi_z_colind_ARLOCK;
output  [3:0] m_axi_z_colind_ARCACHE;
output  [2:0] m_axi_z_colind_ARPROT;
output  [3:0] m_axi_z_colind_ARQOS;
output  [3:0] m_axi_z_colind_ARREGION;
output  [0:0] m_axi_z_colind_ARUSER;
input   m_axi_z_colind_RVALID;
output   m_axi_z_colind_RREADY;
input  [31:0] m_axi_z_colind_RDATA;
input   m_axi_z_colind_RLAST;
input  [0:0] m_axi_z_colind_RID;
input  [0:0] m_axi_z_colind_RUSER;
input  [1:0] m_axi_z_colind_RRESP;
input   m_axi_z_colind_BVALID;
output   m_axi_z_colind_BREADY;
input  [1:0] m_axi_z_colind_BRESP;
input  [0:0] m_axi_z_colind_BID;
input  [0:0] m_axi_z_colind_BUSER;
output   m_axi_z_data_AWVALID;
input   m_axi_z_data_AWREADY;
output  [63:0] m_axi_z_data_AWADDR;
output  [0:0] m_axi_z_data_AWID;
output  [31:0] m_axi_z_data_AWLEN;
output  [2:0] m_axi_z_data_AWSIZE;
output  [1:0] m_axi_z_data_AWBURST;
output  [1:0] m_axi_z_data_AWLOCK;
output  [3:0] m_axi_z_data_AWCACHE;
output  [2:0] m_axi_z_data_AWPROT;
output  [3:0] m_axi_z_data_AWQOS;
output  [3:0] m_axi_z_data_AWREGION;
output  [0:0] m_axi_z_data_AWUSER;
output   m_axi_z_data_WVALID;
input   m_axi_z_data_WREADY;
output  [31:0] m_axi_z_data_WDATA;
output  [3:0] m_axi_z_data_WSTRB;
output   m_axi_z_data_WLAST;
output  [0:0] m_axi_z_data_WID;
output  [0:0] m_axi_z_data_WUSER;
output   m_axi_z_data_ARVALID;
input   m_axi_z_data_ARREADY;
output  [63:0] m_axi_z_data_ARADDR;
output  [0:0] m_axi_z_data_ARID;
output  [31:0] m_axi_z_data_ARLEN;
output  [2:0] m_axi_z_data_ARSIZE;
output  [1:0] m_axi_z_data_ARBURST;
output  [1:0] m_axi_z_data_ARLOCK;
output  [3:0] m_axi_z_data_ARCACHE;
output  [2:0] m_axi_z_data_ARPROT;
output  [3:0] m_axi_z_data_ARQOS;
output  [3:0] m_axi_z_data_ARREGION;
output  [0:0] m_axi_z_data_ARUSER;
input   m_axi_z_data_RVALID;
output   m_axi_z_data_RREADY;
input  [31:0] m_axi_z_data_RDATA;
input   m_axi_z_data_RLAST;
input  [0:0] m_axi_z_data_RID;
input  [0:0] m_axi_z_data_RUSER;
input  [1:0] m_axi_z_data_RRESP;
input   m_axi_z_data_BVALID;
output   m_axi_z_data_BREADY;
input  [1:0] m_axi_z_data_BRESP;
input  [0:0] m_axi_z_data_BID;
input  [0:0] m_axi_z_data_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_z_rowptr_AWVALID;
reg[63:0] m_axi_z_rowptr_AWADDR;
reg m_axi_z_rowptr_WVALID;
reg[31:0] m_axi_z_rowptr_WDATA;
reg m_axi_z_rowptr_ARVALID;
reg m_axi_z_rowptr_RREADY;
reg m_axi_z_rowptr_BREADY;
reg m_axi_x_rowptr_ARVALID;
reg m_axi_x_rowptr_RREADY;
reg m_axi_x_colind_ARVALID;
reg m_axi_x_colind_RREADY;
reg m_axi_x_data_ARVALID;
reg m_axi_x_data_RREADY;
reg m_axi_y_rowptr_ARVALID;
reg m_axi_y_rowptr_RREADY;
reg m_axi_y_data_ARVALID;
reg m_axi_y_data_RREADY;
reg m_axi_y_colind_ARVALID;
reg m_axi_y_colind_RREADY;
reg m_axi_z_colind_AWVALID;
reg m_axi_z_colind_WVALID;
reg m_axi_z_colind_BREADY;
reg m_axi_z_data_AWVALID;
reg m_axi_z_data_WVALID;
reg m_axi_z_data_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [82:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    z_rowptr_blk_n_AW;
reg    z_rowptr_blk_n_W;
wire    ap_CS_fsm_state2;
reg    z_rowptr_blk_n_B;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state103;
reg    z_rowptr_blk_n_AR;
wire    ap_CS_fsm_state26;
reg   [0:0] icmp_ln134_reg_2094;
reg    z_rowptr_blk_n_R;
wire    ap_CS_fsm_state86;
reg    x_rowptr_blk_n_AR;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln132_reg_2019;
reg    x_rowptr_blk_n_R;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    x_colind_blk_n_AR;
reg   [0:0] cmp2_i_reg_2079;
reg    x_colind_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln41_reg_2124;
reg    x_data_blk_n_AR;
reg    ap_enable_reg_pp2_iter3;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter2_reg;
reg   [0:0] icmp_ln44_reg_2138;
reg    x_data_blk_n_R;
reg    ap_enable_reg_pp2_iter10;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter9_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter9_reg;
reg    y_rowptr_blk_n_AR;
wire    ap_CS_fsm_state46;
reg    y_rowptr_blk_n_R;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
reg    y_data_blk_n_AR;
wire    ap_CS_fsm_pp3_stage10;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage10;
reg   [0:0] icmp_ln13_reg_2173;
reg   [0:0] and_ln16_reg_2198;
reg    y_data_blk_n_R;
wire    ap_CS_fsm_pp3_stage17;
wire    ap_block_pp3_stage17;
reg    y_colind_blk_n_AR;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_pp3_stage1;
reg    y_colind_blk_n_R;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_pp3_stage8;
reg    z_colind_blk_n_AW;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln80_reg_2397;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter1_reg;
reg   [0:0] icmp_ln1499_reg_2416;
reg    z_colind_blk_n_W;
reg    ap_enable_reg_pp4_iter3;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter2_reg;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter2_reg;
reg    z_colind_blk_n_B;
reg    ap_enable_reg_pp4_iter8;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter7_reg;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter7_reg;
reg    z_data_blk_n_AW;
reg    z_data_blk_n_W;
reg    z_data_blk_n_B;
reg   [2:0] idx_i8_reg_316;
reg   [2:0] idx_i_reg_327;
reg   [63:0] j_1_reg_372;
reg   [63:0] j_1_reg_372_pp2_iter1_reg;
wire    ap_block_state33_pp2_stage0_iter0;
reg    ap_block_state34_pp2_stage0_iter1;
wire    ap_block_state35_pp2_stage0_iter2;
wire    ap_block_state36_pp2_stage0_iter3;
reg    ap_predicate_op241_readreq_state36;
reg    ap_block_state36_io;
wire    ap_block_state37_pp2_stage0_iter4;
wire    ap_block_state38_pp2_stage0_iter5;
wire    ap_block_state39_pp2_stage0_iter6;
wire    ap_block_state40_pp2_stage0_iter7;
wire    ap_block_state41_pp2_stage0_iter8;
wire    ap_block_state42_pp2_stage0_iter9;
reg    ap_predicate_op248_read_state43;
reg    ap_block_state43_pp2_stage0_iter10;
wire    ap_block_state44_pp2_stage0_iter11;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] empty_54_reg_382;
reg   [0:0] found_reg_392;
reg   [2:0] i_1_reg_441;
reg  signed [31:0] j_3_reg_453;
reg   [159:0] row_data_M_elems_V_read_assign_reg_463;
reg   [2:0] i_reg_519;
reg   [2:0] i_reg_519_pp4_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state88_pp4_stage0_iter0;
wire    ap_block_state89_pp4_stage0_iter1;
wire    ap_block_state90_pp4_stage0_iter2;
reg    ap_predicate_op473_writereq_state90;
reg    ap_predicate_op475_writereq_state90;
reg    ap_block_state90_io;
wire    ap_block_state91_pp4_stage0_iter3;
reg    ap_predicate_op481_write_state91;
reg    ap_predicate_op482_write_state91;
reg    ap_block_state91_io;
wire    ap_block_state92_pp4_stage0_iter4;
wire    ap_block_state93_pp4_stage0_iter5;
wire    ap_block_state94_pp4_stage0_iter6;
wire    ap_block_state95_pp4_stage0_iter7;
reg    ap_predicate_op491_writeresp_state96;
reg    ap_predicate_op492_writeresp_state96;
reg    ap_block_state96_pp4_stage0_iter8;
reg    ap_block_pp4_stage0_11001;
reg   [2:0] i_reg_519_pp4_iter2_reg;
reg  signed [31:0] inc34_i_reg_531;
reg   [31:0] inc2_i_reg_542;
reg   [2:0] idx_reg_554;
wire   [2:0] add_ln69_fu_577_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln69_fu_583_p2;
reg   [0:0] icmp_ln69_reg_1941;
wire   [7:0] shl_ln_fu_589_p3;
reg   [7:0] shl_ln_reg_1945;
wire   [7:0] empty_46_fu_597_p2;
reg   [7:0] empty_46_reg_1951;
wire   [0:0] icmp_ln71_fu_603_p2;
reg   [0:0] icmp_ln71_reg_1957;
wire   [2:0] add_ln69_1_fu_687_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln69_1_fu_693_p2;
reg   [0:0] icmp_ln69_1_reg_1975;
wire   [7:0] shl_ln71_1_fu_699_p3;
reg   [7:0] shl_ln71_1_reg_1979;
wire   [7:0] empty_49_fu_707_p2;
reg   [7:0] empty_49_reg_1985;
wire   [0:0] icmp_ln71_1_fu_713_p2;
reg   [0:0] icmp_ln71_1_reg_1991;
wire   [0:0] icmp_ln132_fu_812_p2;
wire    ap_CS_fsm_state14;
wire   [2:0] indvars_iv_next277_fu_818_p2;
reg   [2:0] indvars_iv_next277_reg_2023;
reg   [159:0] buffer_row_data_M_elems_V_1_load_reg_2029;
wire   [63:0] zext_ln132_fu_824_p1;
reg   [63:0] zext_ln132_reg_2034;
reg  signed [31:0] j_reg_2045;
reg  signed [31:0] x_rowptr_addr_read_1_reg_2052;
wire   [63:0] indvars_iv_next277_cast_fu_835_p1;
reg   [63:0] indvars_iv_next277_cast_reg_2059;
wire    ap_CS_fsm_state24;
wire  signed [63:0] j_cast_fu_838_p1;
reg  signed [63:0] j_cast_reg_2064;
wire   [31:0] sub_ln41_fu_841_p2;
reg   [31:0] sub_ln41_reg_2069;
wire  signed [63:0] sext_ln134_fu_845_p1;
reg  signed [63:0] sext_ln134_reg_2074;
wire   [0:0] cmp2_i_fu_848_p2;
reg   [63:0] x_colind_addr_reg_2083;
wire   [2:0] add_ln134_fu_858_p2;
reg   [2:0] add_ln134_reg_2089;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln134_fu_864_p2;
reg   [31:0] p_load_reg_2098;
reg   [159:0] extracted_row_data_M_elems_V_1_load_reg_2103;
wire   [31:0] zext_ln134_fu_876_p1;
reg   [31:0] zext_ln134_reg_2108;
wire   [63:0] zext_ln134_1_fu_880_p1;
reg   [63:0] zext_ln134_1_reg_2113;
wire   [0:0] icmp_ln41_fu_890_p2;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter1_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter3_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter4_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter5_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter6_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter7_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter8_reg;
reg   [0:0] icmp_ln41_reg_2124_pp2_iter10_reg;
wire   [63:0] add_ln41_fu_895_p2;
reg   [63:0] add_ln41_reg_2128;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] x_colind_addr_read_reg_2133;
wire   [0:0] icmp_ln44_fu_901_p2;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter3_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter4_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter5_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter6_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter7_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter8_reg;
reg   [0:0] icmp_ln44_reg_2138_pp2_iter10_reg;
reg   [63:0] x_data_addr_reg_2142;
reg   [31:0] x_data_addr_read_reg_2148;
wire   [0:0] icmp_ln1499_1_fu_911_p2;
reg   [0:0] icmp_ln1499_1_reg_2153;
wire    ap_CS_fsm_state45;
reg   [63:0] y_rowptr_addr_reg_2157;
reg   [31:0] j_2_reg_2163;
reg   [31:0] y_rowptr_addr_read_1_reg_2168;
wire   [0:0] icmp_ln13_fu_922_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state55_pp3_stage0_iter0;
wire    ap_block_state73_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire  signed [63:0] sext_ln15_fu_928_p1;
reg  signed [63:0] sext_ln15_reg_2177;
wire    ap_block_state56_pp3_stage1_iter0;
reg    ap_block_state56_io;
reg    ap_block_pp3_stage1_11001;
wire   [0:0] icmp_ln16_fu_939_p2;
reg   [0:0] icmp_ln16_reg_2188;
reg   [31:0] y_colind_addr_read_reg_2193;
reg    ap_block_state63_pp3_stage8_iter0;
reg    ap_block_pp3_stage8_11001;
wire   [0:0] and_ln16_fu_953_p2;
wire    ap_CS_fsm_pp3_stage9;
wire    ap_block_state64_pp3_stage9_iter0;
wire    ap_block_pp3_stage9_11001;
wire   [0:0] icmp_ln27_fu_972_p2;
reg   [0:0] icmp_ln27_reg_2202;
wire   [159:0] and_ln27_fu_1020_p2;
reg   [159:0] and_ln27_reg_2207;
reg   [63:0] y_data_addr_reg_2213;
wire   [7:0] shl_ln1_fu_1031_p3;
reg   [7:0] shl_ln1_reg_2219;
wire   [0:0] icmp_ln19_fu_1045_p2;
reg   [0:0] icmp_ln19_reg_2225;
wire   [159:0] and_ln19_fu_1093_p2;
reg   [159:0] and_ln19_reg_2231;
wire   [2:0] add_ln13_fu_1099_p2;
reg   [2:0] add_ln13_reg_2237;
wire    ap_CS_fsm_pp3_stage13;
wire    ap_block_state68_pp3_stage13_iter0;
wire    ap_block_pp3_stage13_11001;
wire   [159:0] extracted_row_data_M_elems_V_5_fu_1128_p2;
wire   [31:0] j_4_fu_1134_p2;
reg   [31:0] j_4_reg_2247;
wire    ap_CS_fsm_pp3_stage16;
wire    ap_block_state71_pp3_stage16_iter0;
wire    ap_block_pp3_stage16_11001;
reg   [31:0] y_data_addr_read_reg_2252;
reg    ap_predicate_op335_read_state72;
reg    ap_block_state72_pp3_stage17_iter0;
reg    ap_block_pp3_stage17_11001;
wire   [7:0] sub_ln19_fu_1140_p2;
reg   [7:0] sub_ln19_reg_2257;
wire   [2:0] add_ln69_3_fu_1203_p2;
reg   [2:0] add_ln69_3_reg_2268;
wire    ap_CS_fsm_state75;
wire   [7:0] shl_ln71_3_fu_1215_p3;
reg   [7:0] shl_ln71_3_reg_2276;
wire   [0:0] icmp_ln69_3_fu_1209_p2;
wire   [7:0] empty_58_fu_1223_p2;
reg   [7:0] empty_58_reg_2283;
wire   [0:0] icmp_ln71_3_fu_1229_p2;
reg   [0:0] icmp_ln71_3_reg_2289;
wire   [7:0] sub_ln71_3_fu_1235_p2;
reg   [7:0] sub_ln71_3_reg_2297;
reg   [31:0] trunc_ln_reg_2352;
wire    ap_CS_fsm_state77;
reg   [31:0] trunc_ln708_1_reg_2358;
reg   [31:0] trunc_ln708_2_reg_2364;
reg   [31:0] trunc_ln708_3_reg_2370;
reg   [31:0] trunc_ln708_4_reg_2376;
wire   [159:0] buffer_row_data_M_elems_V_5_fu_1634_p6;
wire    ap_CS_fsm_state78;
reg   [31:0] z_rowptr_addr_read_reg_2387;
wire   [2:0] add_ln80_fu_1658_p2;
reg   [2:0] add_ln80_reg_2392;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln80_fu_1664_p2;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter3_reg;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter4_reg;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter5_reg;
reg   [0:0] icmp_ln80_reg_2397_pp4_iter6_reg;
wire   [7:0] sub_ln1499_3_fu_1742_p2;
reg   [7:0] sub_ln1499_3_reg_2401;
wire   [159:0] lshr_ln1499_fu_1752_p2;
reg   [159:0] lshr_ln1499_reg_2406;
wire   [31:0] trunc_ln1499_fu_1772_p1;
reg   [31:0] trunc_ln1499_reg_2411;
reg   [31:0] trunc_ln1499_reg_2411_pp4_iter2_reg;
wire   [0:0] icmp_ln1499_fu_1776_p2;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter3_reg;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter4_reg;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter5_reg;
reg   [0:0] icmp_ln1499_reg_2416_pp4_iter6_reg;
wire   [2:0] add_ln69_2_fu_1818_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state104_pp5_stage0_iter0;
wire    ap_block_state105_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln69_2_fu_1824_p2;
reg   [0:0] icmp_ln69_2_reg_2443;
wire   [7:0] shl_ln71_2_fu_1830_p3;
reg   [7:0] shl_ln71_2_reg_2447;
wire   [7:0] empty_64_fu_1838_p2;
reg   [7:0] empty_64_reg_2452;
wire   [0:0] icmp_ln71_2_fu_1844_p2;
reg   [0:0] icmp_ln71_2_reg_2457;
wire   [7:0] sub_ln71_2_fu_1858_p2;
reg   [7:0] sub_ln71_2_reg_2463;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state10;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state32;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter11;
wire    ap_block_pp3_stage13_subdone;
reg    ap_condition_pp3_exit_iter0_state68;
reg    ap_enable_reg_pp3_iter1;
reg    ap_block_pp3_stage17_subdone;
wire    ap_CS_fsm_state87;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_enable_reg_pp4_iter1;
reg    ap_condition_pp4_exit_iter2_state90;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state104;
reg    ap_enable_reg_pp5_iter1;
reg   [2:0] i_3_reg_338;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state13;
reg   [2:0] k_reg_350;
wire    ap_CS_fsm_state79;
reg   [159:0] buffer_row_data_M_elems_V_2_reg_362;
reg   [63:0] ap_phi_mux_j_1_phi_fu_375_p4;
reg   [31:0] ap_phi_mux_empty_56_phi_fu_408_p4;
reg   [0:0] ap_phi_mux_found_1_phi_fu_420_p4;
wire   [31:0] ap_phi_reg_pp2_iter11_empty_56_reg_404;
wire   [0:0] ap_phi_reg_pp2_iter11_found_1_reg_416;
reg   [31:0] ap_phi_mux_val_V_read_assign_phi_fu_432_p4;
reg   [31:0] val_V_read_assign_reg_429;
reg   [2:0] ap_phi_mux_i_1_phi_fu_445_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] ap_phi_mux_j_5_phi_fu_488_p4;
reg   [159:0] ap_phi_mux_extracted_row_data_M_elems_V_4_phi_fu_477_p4;
wire   [159:0] extracted_row_data_M_elems_V_3_fu_1196_p2;
reg   [159:0] ap_phi_reg_pp3_iter1_extracted_row_data_M_elems_V_4_reg_473;
reg   [159:0] ap_phi_reg_pp3_iter0_extracted_row_data_M_elems_V_4_reg_473;
reg   [31:0] ap_phi_reg_pp3_iter1_j_5_reg_484;
reg   [31:0] ap_phi_reg_pp3_iter0_j_5_reg_484;
reg   [2:0] idx_i1_reg_496;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state74;
reg   [159:0] buffer_row_data_M_elems_V_3_reg_507;
reg   [2:0] ap_phi_mux_i_phi_fu_523_p4;
reg  signed [31:0] ap_phi_mux_inc34_i_phi_fu_535_p4;
wire   [31:0] add_ln88_fu_1800_p2;
wire   [31:0] ap_phi_reg_pp4_iter2_inc2_i_reg_542;
wire    ap_block_pp3_stage9;
wire  signed [63:0] sext_ln86_fu_1782_p1;
reg    ap_block_state1;
reg    ap_block_state15_io;
reg    ap_predicate_op224_readreq_state26;
reg    ap_block_state26_io;
wire    ap_block_state65_pp3_stage10_iter0;
reg    ap_predicate_op317_readreq_state65;
reg    ap_block_state65_io;
reg    ap_block_pp3_stage10_11001;
reg    ap_block_pp4_stage0_01001;
reg   [159:0] extracted_row_data_M_elems_V_fu_142;
wire   [159:0] extracted_row_data_M_elems_V_2_fu_676_p2;
wire    ap_block_pp0_stage0;
reg   [159:0] buffer_row_data_M_elems_V_fu_146;
wire   [159:0] buffer_row_data_M_elems_V_4_fu_786_p2;
wire    ap_block_pp1_stage0;
reg   [159:0] buffer_row_data_M_elems_V_1_fu_150;
wire   [159:0] or_ln71_fu_1919_p2;
wire    ap_block_pp5_stage0;
reg   [31:0] empty_48_fu_154;
reg   [159:0] extracted_row_data_M_elems_V_1_fu_158;
wire   [159:0] extracted_row_data_M_elems_V_6_fu_1556_p6;
reg   [159:0] p_range_M_elems_V_011_i_fu_162;
wire   [159:0] or_ln71_1_fu_1495_p2;
wire   [7:0] select_ln71_fu_609_p3;
wire   [7:0] select_ln71_1_fu_614_p3;
wire   [7:0] sub_ln71_fu_619_p2;
wire   [159:0] zext_ln71_fu_625_p1;
wire   [159:0] zext_ln71_1_fu_629_p1;
wire   [159:0] shl_ln71_fu_640_p2;
wire   [159:0] lshr_ln71_fu_646_p2;
wire   [159:0] and_ln71_fu_652_p2;
wire   [159:0] xor_ln71_fu_658_p2;
wire   [159:0] select_ln71_2_fu_633_p3;
wire   [159:0] and_ln71_1_fu_664_p2;
wire   [159:0] and_ln71_2_fu_670_p2;
wire   [7:0] select_ln71_3_fu_719_p3;
wire   [7:0] select_ln71_4_fu_724_p3;
wire   [7:0] sub_ln71_1_fu_729_p2;
wire   [159:0] zext_ln71_2_fu_735_p1;
wire   [159:0] zext_ln71_3_fu_739_p1;
wire   [159:0] shl_ln71_4_fu_750_p2;
wire   [159:0] lshr_ln71_1_fu_756_p2;
wire   [159:0] and_ln71_3_fu_762_p2;
wire   [159:0] xor_ln71_1_fu_768_p2;
wire   [159:0] select_ln71_5_fu_743_p3;
wire   [159:0] and_ln71_4_fu_774_p2;
wire   [159:0] and_ln71_5_fu_780_p2;
wire   [31:0] i_1_cast_fu_944_p1;
wire   [0:0] icmp_ln16_1_fu_948_p2;
wire   [7:0] shl_ln2_fu_958_p3;
wire   [7:0] empty_62_fu_966_p2;
wire   [7:0] select_ln27_fu_978_p3;
wire   [7:0] select_ln27_1_fu_986_p3;
wire   [7:0] sub_ln27_fu_994_p2;
wire   [159:0] zext_ln27_fu_1000_p1;
wire   [159:0] zext_ln27_1_fu_1004_p1;
wire   [159:0] shl_ln27_fu_1008_p2;
wire   [159:0] lshr_ln27_fu_1014_p2;
wire   [7:0] empty_61_fu_1039_p2;
wire   [7:0] select_ln19_fu_1051_p3;
wire   [7:0] select_ln19_1_fu_1059_p3;
wire   [7:0] sub_ln19_1_fu_1067_p2;
wire   [159:0] zext_ln19_2_fu_1073_p1;
wire   [159:0] zext_ln19_3_fu_1077_p1;
wire   [159:0] shl_ln19_1_fu_1081_p2;
wire   [159:0] lshr_ln19_fu_1087_p2;
wire    ap_block_pp3_stage13;
wire   [159:0] xor_ln27_fu_1112_p2;
wire   [159:0] select_ln27_2_fu_1105_p3;
wire   [159:0] and_ln27_1_fu_1117_p2;
wire   [159:0] and_ln27_2_fu_1123_p2;
wire    ap_block_pp3_stage16;
wire   [7:0] select_ln19_2_fu_1148_p3;
wire   [159:0] zext_ln19_fu_1145_p1;
wire   [159:0] zext_ln19_1_fu_1153_p1;
wire   [159:0] shl_ln19_fu_1157_p2;
reg   [159:0] tmp_3_fu_1163_p4;
wire   [159:0] xor_ln19_fu_1180_p2;
wire   [159:0] select_ln19_3_fu_1173_p3;
wire   [159:0] and_ln19_1_fu_1185_p2;
wire   [159:0] and_ln19_2_fu_1191_p2;
wire  signed [31:0] r_V_fu_1241_p1;
wire  signed [31:0] trunc_ln1118_fu_1249_p1;
wire  signed [31:0] r_V_2_fu_1263_p4;
wire  signed [31:0] tmp_3_i_fu_1277_p4;
wire  signed [31:0] r_V_4_fu_1297_p4;
wire  signed [31:0] tmp_5_i_fu_1311_p4;
wire  signed [31:0] r_V_6_fu_1331_p4;
wire  signed [31:0] tmp_7_i_fu_1345_p4;
wire  signed [31:0] r_V_8_fu_1365_p4;
wire  signed [31:0] tmp_9_i_fu_1379_p4;
wire   [7:0] select_ln71_9_fu_1403_p3;
wire   [7:0] select_ln71_11_fu_1413_p3;
wire   [7:0] select_ln71_10_fu_1408_p3;
wire   [7:0] sub_ln71_4_fu_1418_p2;
wire   [159:0] zext_ln71_6_fu_1399_p1;
wire   [159:0] zext_ln71_7_fu_1424_p1;
wire   [159:0] shl_ln71_6_fu_1436_p2;
reg   [159:0] tmp_5_fu_1442_p4;
wire   [159:0] zext_ln71_8_fu_1428_p1;
wire   [159:0] zext_ln71_9_fu_1432_p1;
wire   [159:0] shl_ln71_7_fu_1459_p2;
wire   [159:0] lshr_ln71_3_fu_1465_p2;
wire   [159:0] and_ln71_9_fu_1471_p2;
wire   [159:0] xor_ln71_3_fu_1477_p2;
wire   [159:0] select_ln71_12_fu_1452_p3;
wire   [159:0] and_ln71_10_fu_1483_p2;
wire   [159:0] and_ln71_11_fu_1489_p2;
wire   [47:0] grp_fu_1257_p2;
wire   [47:0] grp_fu_1291_p2;
wire   [47:0] grp_fu_1325_p2;
wire   [47:0] grp_fu_1359_p2;
wire   [47:0] grp_fu_1393_p2;
wire   [31:0] trunc_ln703_fu_1565_p1;
wire   [31:0] tmp_2_fu_1574_p4;
wire   [31:0] tmp_4_fu_1589_p4;
wire   [31:0] tmp_6_fu_1604_p4;
wire   [31:0] tmp_8_fu_1619_p4;
wire   [31:0] add_ln703_4_fu_1629_p2;
wire   [31:0] add_ln703_3_fu_1614_p2;
wire   [31:0] add_ln703_2_fu_1599_p2;
wire   [31:0] add_ln703_1_fu_1584_p2;
wire   [31:0] add_ln703_fu_1569_p2;
wire   [7:0] tmp_1_fu_1670_p3;
wire   [7:0] empty_63_fu_1678_p2;
wire   [0:0] icmp_ln1499_2_fu_1684_p2;
wire   [7:0] sub_ln1499_fu_1700_p2;
wire   [7:0] sub_ln1499_2_fu_1712_p2;
reg   [159:0] tmp_fu_1690_p4;
wire   [7:0] sub_ln1499_1_fu_1706_p2;
wire   [7:0] select_ln1499_fu_1718_p3;
wire   [7:0] select_ln1499_2_fu_1734_p3;
wire   [159:0] select_ln1499_1_fu_1726_p3;
wire   [159:0] zext_ln1499_fu_1748_p1;
wire   [159:0] zext_ln1499_1_fu_1758_p1;
wire   [159:0] lshr_ln1499_1_fu_1761_p2;
wire   [159:0] and_ln1499_fu_1767_p2;
wire   [7:0] select_ln71_6_fu_1850_p3;
wire   [7:0] select_ln71_7_fu_1864_p3;
wire   [159:0] zext_ln71_4_fu_1869_p1;
wire   [159:0] zext_ln71_5_fu_1873_p1;
wire   [159:0] shl_ln71_5_fu_1883_p2;
wire   [159:0] lshr_ln71_2_fu_1889_p2;
wire   [159:0] and_ln71_6_fu_1895_p2;
wire   [159:0] xor_ln71_2_fu_1901_p2;
wire   [159:0] select_ln71_8_fu_1876_p3;
wire   [159:0] and_ln71_7_fu_1907_p2;
wire   [159:0] and_ln71_8_fu_1913_p2;
reg   [82:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
reg    ap_block_pp3_stage1_subdone;
wire    ap_block_state57_pp3_stage2_iter0;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_state58_pp3_stage3_iter0;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_state59_pp3_stage4_iter0;
wire    ap_block_pp3_stage4_subdone;
wire    ap_block_state60_pp3_stage5_iter0;
wire    ap_block_pp3_stage5_subdone;
wire    ap_block_state61_pp3_stage6_iter0;
wire    ap_block_pp3_stage6_subdone;
wire    ap_block_state62_pp3_stage7_iter0;
wire    ap_block_pp3_stage7_subdone;
reg    ap_block_pp3_stage8_subdone;
wire    ap_block_pp3_stage9_subdone;
reg    ap_block_pp3_stage10_subdone;
wire    ap_block_state66_pp3_stage11_iter0;
wire    ap_block_pp3_stage11_subdone;
wire    ap_block_state67_pp3_stage12_iter0;
wire    ap_block_pp3_stage12_subdone;
wire    ap_block_state69_pp3_stage14_iter0;
wire    ap_block_pp3_stage14_subdone;
wire    ap_block_state70_pp3_stage15_iter0;
wire    ap_block_pp3_stage15_subdone;
wire    ap_block_pp3_stage16_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 83'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
end

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln1118_fu_1249_p1),
    .din1(r_V_fu_1241_p1),
    .ce(1'b1),
    .dout(grp_fu_1257_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_i_fu_1277_p4),
    .din1(r_V_2_fu_1263_p4),
    .ce(1'b1),
    .dout(grp_fu_1291_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_i_fu_1311_p4),
    .din1(r_V_4_fu_1297_p4),
    .ce(1'b1),
    .dout(grp_fu_1325_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_i_fu_1345_p4),
    .din1(r_V_6_fu_1331_p4),
    .ce(1'b1),
    .dout(grp_fu_1359_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_i_fu_1379_p4),
    .din1(r_V_8_fu_1365_p4),
    .ce(1'b1),
    .dout(grp_fu_1393_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state11))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage13_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state68) & (1'b1 == ap_CS_fsm_pp3_stage13))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b0 == ap_block_pp3_stage13_subdone) & (1'b1 == ap_CS_fsm_pp3_stage13)) | ((1'b0 == ap_block_pp3_stage17_subdone) & (1'b1 == ap_CS_fsm_pp3_stage17)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state87)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter2_state90)) begin
                ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end else if ((1'b1 == ap_CS_fsm_state87)) begin
            ap_enable_reg_pp4_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state104) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state103) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state104))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state104);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((1'b1 == ap_CS_fsm_state103) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer_row_data_M_elems_V_1_fu_150 <= buffer_row_data_M_elems_V_fu_146;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln69_2_reg_2443 == 1'd0))) begin
        buffer_row_data_M_elems_V_1_fu_150 <= or_ln71_fu_1919_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        buffer_row_data_M_elems_V_2_reg_362 <= buffer_row_data_M_elems_V_3_reg_507;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_row_data_M_elems_V_2_reg_362 <= buffer_row_data_M_elems_V_1_load_reg_2029;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln1499_1_reg_2153 == 1'd0))) begin
        buffer_row_data_M_elems_V_3_reg_507 <= buffer_row_data_M_elems_V_5_fu_1634_p6;
    end else if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_911_p2 == 1'd1))) begin
        buffer_row_data_M_elems_V_3_reg_507 <= buffer_row_data_M_elems_V_2_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_48_fu_154 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        empty_48_fu_154 <= val_V_read_assign_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        empty_54_reg_382 <= p_load_reg_2098;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln41_reg_2124_pp2_iter10_reg == 1'd0))) begin
        empty_54_reg_382 <= ap_phi_mux_empty_56_phi_fu_408_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        extracted_row_data_M_elems_V_1_fu_158 <= extracted_row_data_M_elems_V_fu_142;
    end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln1499_1_reg_2153 == 1'd0))) begin
        extracted_row_data_M_elems_V_1_fu_158 <= extracted_row_data_M_elems_V_6_fu_1556_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        found_reg_392 <= 1'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln41_reg_2124_pp2_iter10_reg == 1'd0))) begin
        found_reg_392 <= ap_phi_mux_found_1_phi_fu_420_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        i_1_reg_441 <= add_ln13_reg_2237;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        i_1_reg_441 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_3_reg_338 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        i_3_reg_338 <= indvars_iv_next277_reg_2023;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        i_reg_519 <= 3'd0;
    end else if (((icmp_ln80_reg_2397 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        i_reg_519 <= add_ln80_reg_2392;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        idx_i1_reg_496 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        idx_i1_reg_496 <= add_ln69_3_reg_2268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_583_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_i8_reg_316 <= add_ln69_fu_577_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
        idx_i8_reg_316 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        idx_i_reg_327 <= 3'd0;
    end else if (((icmp_ln69_1_fu_693_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        idx_i_reg_327 <= add_ln69_1_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_2_fu_1824_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        idx_reg_554 <= add_ln69_2_fu_1818_p2;
    end else if (((1'b1 == ap_CS_fsm_state103) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
        idx_reg_554 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        if (((icmp_ln1499_reg_2416 == 1'd1) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0))) begin
            inc2_i_reg_542 <= ap_phi_mux_inc34_i_phi_fu_535_p4;
        end else if (((icmp_ln1499_reg_2416 == 1'd0) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0))) begin
            inc2_i_reg_542 <= add_ln88_fu_1800_p2;
        end else if ((1'b1 == 1'b1)) begin
            inc2_i_reg_542 <= ap_phi_reg_pp4_iter2_inc2_i_reg_542;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        inc34_i_reg_531 <= z_rowptr_addr_read_reg_2387;
    end else if (((icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        inc34_i_reg_531 <= inc2_i_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_372 <= j_cast_reg_2064;
    end else if (((icmp_ln41_reg_2124 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_1_reg_372 <= add_ln41_reg_2128;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_3_reg_453 <= ap_phi_mux_j_5_phi_fu_488_p4;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        j_3_reg_453 <= j_2_reg_2163;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        k_reg_350 <= add_ln134_reg_2089;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        k_reg_350 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        row_data_M_elems_V_read_assign_reg_463 <= ap_phi_mux_extracted_row_data_M_elems_V_4_phi_fu_477_p4;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        row_data_M_elems_V_read_assign_reg_463 <= extracted_row_data_M_elems_V_1_load_reg_2103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        if (((found_reg_392 == 1'd1) & (cmp2_i_reg_2079 == 1'd1))) begin
            val_V_read_assign_reg_429 <= empty_54_reg_382;
        end else if (((found_reg_392 == 1'd0) | (cmp2_i_reg_2079 == 1'd0))) begin
            val_V_read_assign_reg_429 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln134_reg_2089 <= add_ln134_fu_858_p2;
        icmp_ln134_reg_2094 <= icmp_ln134_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage13_11001) & (1'b1 == ap_CS_fsm_pp3_stage13))) begin
        add_ln13_reg_2237 <= add_ln13_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln41_fu_890_p2 == 1'd0))) begin
        add_ln41_reg_2128 <= add_ln41_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln69_3_reg_2268 <= add_ln69_3_fu_1203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        add_ln80_reg_2392 <= add_ln80_fu_1658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage9_11001) & (1'b1 == ap_CS_fsm_pp3_stage9))) begin
        and_ln16_reg_2198 <= and_ln16_fu_953_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage9_11001) & (1'd1 == and_ln16_fu_953_p2) & (1'b1 == ap_CS_fsm_pp3_stage9))) begin
        and_ln19_reg_2231 <= and_ln19_fu_1093_p2;
        icmp_ln19_reg_2225 <= icmp_ln19_fu_1045_p2;
        shl_ln1_reg_2219[7 : 5] <= shl_ln1_fu_1031_p3[7 : 5];
        y_data_addr_reg_2213 <= sext_ln15_reg_2177;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage9_11001) & (1'd0 == and_ln16_fu_953_p2) & (1'b1 == ap_CS_fsm_pp3_stage9))) begin
        and_ln27_reg_2207 <= and_ln27_fu_1020_p2;
        icmp_ln27_reg_2202 <= icmp_ln27_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage13_11001) & (1'd0 == and_ln16_reg_2198) & (1'b1 == ap_CS_fsm_pp3_stage13))) begin
        ap_phi_reg_pp3_iter0_extracted_row_data_M_elems_V_4_reg_473 <= extracted_row_data_M_elems_V_5_fu_1128_p2;
        ap_phi_reg_pp3_iter0_j_5_reg_484 <= j_3_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage17_11001) & (1'b1 == ap_CS_fsm_pp3_stage17))) begin
        ap_phi_reg_pp3_iter1_extracted_row_data_M_elems_V_4_reg_473 <= ap_phi_reg_pp3_iter0_extracted_row_data_M_elems_V_4_reg_473;
        ap_phi_reg_pp3_iter1_j_5_reg_484 <= ap_phi_reg_pp3_iter0_j_5_reg_484;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_row_data_M_elems_V_1_load_reg_2029 <= buffer_row_data_M_elems_V_1_fu_150;
        indvars_iv_next277_reg_2023 <= indvars_iv_next277_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_reg_1975 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        buffer_row_data_M_elems_V_fu_146 <= buffer_row_data_M_elems_V_4_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        cmp2_i_reg_2079 <= cmp2_i_fu_848_p2;
        indvars_iv_next277_cast_reg_2059[2 : 0] <= indvars_iv_next277_cast_fu_835_p1[2 : 0];
        j_cast_reg_2064 <= j_cast_fu_838_p1;
        sext_ln134_reg_2074 <= sext_ln134_fu_845_p1;
        sub_ln41_reg_2069 <= sub_ln41_fu_841_p2;
        x_colind_addr_reg_2083 <= j_cast_fu_838_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_583_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_46_reg_1951[7 : 5] <= empty_46_fu_597_p2[7 : 5];
        icmp_ln71_reg_1957 <= icmp_ln71_fu_603_p2;
        shl_ln_reg_1945[7 : 5] <= shl_ln_fu_589_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_fu_693_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_49_reg_1985[7 : 5] <= empty_49_fu_707_p2[7 : 5];
        icmp_ln71_1_reg_1991 <= icmp_ln71_1_fu_713_p2;
        shl_ln71_1_reg_1979[7 : 5] <= shl_ln71_1_fu_699_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln69_3_fu_1209_p2 == 1'd0))) begin
        empty_58_reg_2283[7 : 5] <= empty_58_fu_1223_p2[7 : 5];
        icmp_ln71_3_reg_2289 <= icmp_ln71_3_fu_1229_p2;
        shl_ln71_3_reg_2276[7 : 5] <= shl_ln71_3_fu_1215_p3[7 : 5];
        sub_ln71_3_reg_2297[7 : 5] <= sub_ln71_3_fu_1235_p2[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_2_fu_1824_p2 == 1'd0))) begin
        empty_64_reg_2452[7 : 5] <= empty_64_fu_1838_p2[7 : 5];
        icmp_ln71_2_reg_2457 <= icmp_ln71_2_fu_1844_p2;
        shl_ln71_2_reg_2447[7 : 5] <= shl_ln71_2_fu_1830_p3[7 : 5];
        sub_ln71_2_reg_2463 <= sub_ln71_2_fu_1858_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        extracted_row_data_M_elems_V_1_load_reg_2103 <= extracted_row_data_M_elems_V_1_fu_158;
        p_load_reg_2098 <= empty_48_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_1941 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        extracted_row_data_M_elems_V_fu_142 <= extracted_row_data_M_elems_V_2_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_reg_519_pp4_iter1_reg <= i_reg_519;
        icmp_ln80_reg_2397 <= icmp_ln80_fu_1664_p2;
        icmp_ln80_reg_2397_pp4_iter1_reg <= icmp_ln80_reg_2397;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        i_reg_519_pp4_iter2_reg <= i_reg_519_pp4_iter1_reg;
        icmp_ln1499_reg_2416_pp4_iter2_reg <= icmp_ln1499_reg_2416;
        icmp_ln1499_reg_2416_pp4_iter3_reg <= icmp_ln1499_reg_2416_pp4_iter2_reg;
        icmp_ln1499_reg_2416_pp4_iter4_reg <= icmp_ln1499_reg_2416_pp4_iter3_reg;
        icmp_ln1499_reg_2416_pp4_iter5_reg <= icmp_ln1499_reg_2416_pp4_iter4_reg;
        icmp_ln1499_reg_2416_pp4_iter6_reg <= icmp_ln1499_reg_2416_pp4_iter5_reg;
        icmp_ln1499_reg_2416_pp4_iter7_reg <= icmp_ln1499_reg_2416_pp4_iter6_reg;
        icmp_ln80_reg_2397_pp4_iter2_reg <= icmp_ln80_reg_2397_pp4_iter1_reg;
        icmp_ln80_reg_2397_pp4_iter3_reg <= icmp_ln80_reg_2397_pp4_iter2_reg;
        icmp_ln80_reg_2397_pp4_iter4_reg <= icmp_ln80_reg_2397_pp4_iter3_reg;
        icmp_ln80_reg_2397_pp4_iter5_reg <= icmp_ln80_reg_2397_pp4_iter4_reg;
        icmp_ln80_reg_2397_pp4_iter6_reg <= icmp_ln80_reg_2397_pp4_iter5_reg;
        icmp_ln80_reg_2397_pp4_iter7_reg <= icmp_ln80_reg_2397_pp4_iter6_reg;
        trunc_ln1499_reg_2411_pp4_iter2_reg <= trunc_ln1499_reg_2411;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln132_reg_2019 <= icmp_ln132_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln13_reg_2173 <= icmp_ln13_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        icmp_ln1499_1_reg_2153 <= icmp_ln1499_1_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_2397 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln1499_reg_2416 <= icmp_ln1499_fu_1776_p2;
        trunc_ln1499_reg_2411 <= trunc_ln1499_fu_1772_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        icmp_ln16_reg_2188 <= icmp_ln16_fu_939_p2;
        sext_ln15_reg_2177 <= sext_ln15_fu_928_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln41_reg_2124 <= icmp_ln41_fu_890_p2;
        icmp_ln41_reg_2124_pp2_iter1_reg <= icmp_ln41_reg_2124;
        j_1_reg_372_pp2_iter1_reg <= j_1_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln41_reg_2124_pp2_iter10_reg <= icmp_ln41_reg_2124_pp2_iter9_reg;
        icmp_ln41_reg_2124_pp2_iter2_reg <= icmp_ln41_reg_2124_pp2_iter1_reg;
        icmp_ln41_reg_2124_pp2_iter3_reg <= icmp_ln41_reg_2124_pp2_iter2_reg;
        icmp_ln41_reg_2124_pp2_iter4_reg <= icmp_ln41_reg_2124_pp2_iter3_reg;
        icmp_ln41_reg_2124_pp2_iter5_reg <= icmp_ln41_reg_2124_pp2_iter4_reg;
        icmp_ln41_reg_2124_pp2_iter6_reg <= icmp_ln41_reg_2124_pp2_iter5_reg;
        icmp_ln41_reg_2124_pp2_iter7_reg <= icmp_ln41_reg_2124_pp2_iter6_reg;
        icmp_ln41_reg_2124_pp2_iter8_reg <= icmp_ln41_reg_2124_pp2_iter7_reg;
        icmp_ln41_reg_2124_pp2_iter9_reg <= icmp_ln41_reg_2124_pp2_iter8_reg;
        icmp_ln44_reg_2138_pp2_iter10_reg <= icmp_ln44_reg_2138_pp2_iter9_reg;
        icmp_ln44_reg_2138_pp2_iter3_reg <= icmp_ln44_reg_2138;
        icmp_ln44_reg_2138_pp2_iter4_reg <= icmp_ln44_reg_2138_pp2_iter3_reg;
        icmp_ln44_reg_2138_pp2_iter5_reg <= icmp_ln44_reg_2138_pp2_iter4_reg;
        icmp_ln44_reg_2138_pp2_iter6_reg <= icmp_ln44_reg_2138_pp2_iter5_reg;
        icmp_ln44_reg_2138_pp2_iter7_reg <= icmp_ln44_reg_2138_pp2_iter6_reg;
        icmp_ln44_reg_2138_pp2_iter8_reg <= icmp_ln44_reg_2138_pp2_iter7_reg;
        icmp_ln44_reg_2138_pp2_iter9_reg <= icmp_ln44_reg_2138_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln41_reg_2124_pp2_iter1_reg == 1'd0))) begin
        icmp_ln44_reg_2138 <= icmp_ln44_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln69_1_reg_1975 <= icmp_ln69_1_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln69_2_reg_2443 <= icmp_ln69_2_fu_1824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln69_reg_1941 <= icmp_ln69_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_2_reg_2163 <= m_axi_y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage16_11001) & (1'd1 == and_ln16_reg_2198) & (1'b1 == ap_CS_fsm_pp3_stage16))) begin
        j_4_reg_2247 <= j_4_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_reg_2045 <= m_axi_x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln80_fu_1664_p2 == 1'd0))) begin
        lshr_ln1499_reg_2406 <= lshr_ln1499_fu_1752_p2;
        sub_ln1499_3_reg_2401[7 : 1] <= sub_ln1499_3_fu_1742_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        p_range_M_elems_V_011_i_fu_162 <= or_ln71_1_fu_1495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage17_11001) & (1'd1 == and_ln16_reg_2198) & (1'b1 == ap_CS_fsm_pp3_stage17) & (icmp_ln19_reg_2225 == 1'd1))) begin
        sub_ln19_reg_2257[7 : 5] <= sub_ln19_fu_1140_p2[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        trunc_ln708_1_reg_2358 <= {{grp_fu_1291_p2[47:16]}};
        trunc_ln708_2_reg_2364 <= {{grp_fu_1325_p2[47:16]}};
        trunc_ln708_3_reg_2370 <= {{grp_fu_1359_p2[47:16]}};
        trunc_ln708_4_reg_2376 <= {{grp_fu_1393_p2[47:16]}};
        trunc_ln_reg_2352 <= {{grp_fu_1257_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_2124 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_colind_addr_read_reg_2133 <= m_axi_x_colind_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op248_read_state43 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        x_data_addr_read_reg_2148 <= m_axi_x_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln44_fu_901_p2 == 1'd1) & (icmp_ln41_reg_2124_pp2_iter1_reg == 1'd0))) begin
        x_data_addr_reg_2142 <= j_1_reg_372_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        x_rowptr_addr_read_1_reg_2052 <= m_axi_x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_colind_addr_read_reg_2193 <= m_axi_y_colind_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage17_11001) & (1'b1 == ap_CS_fsm_pp3_stage17) & (ap_predicate_op335_read_state72 == 1'b1))) begin
        y_data_addr_read_reg_2252 <= m_axi_y_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        y_rowptr_addr_read_1_reg_2168 <= m_axi_y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_911_p2 == 1'd0))) begin
        y_rowptr_addr_reg_2157[2 : 0] <= zext_ln134_1_reg_2113[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        z_rowptr_addr_read_reg_2387 <= m_axi_z_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_reg_2019 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        zext_ln132_reg_2034[2 : 0] <= zext_ln132_fu_824_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_reg_2094 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        zext_ln134_1_reg_2113[2 : 0] <= zext_ln134_1_fu_880_p1[2 : 0];
        zext_ln134_reg_2108[2 : 0] <= zext_ln134_fu_876_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_583_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_1_fu_693_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln41_fu_890_p2 == 1'd1))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln13_reg_2173 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state68 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state68 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_condition_pp4_exit_iter2_state90 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter2_state90 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln80_fu_1664_p2 == 1'd1))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_2_fu_1824_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state104 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state104 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_reg_2124_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln44_reg_2138_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_empty_56_phi_fu_408_p4 = empty_54_reg_382;
        end else if ((icmp_ln44_reg_2138_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_empty_56_phi_fu_408_p4 = x_data_addr_read_reg_2148;
        end else begin
            ap_phi_mux_empty_56_phi_fu_408_p4 = ap_phi_reg_pp2_iter11_empty_56_reg_404;
        end
    end else begin
        ap_phi_mux_empty_56_phi_fu_408_p4 = ap_phi_reg_pp2_iter11_empty_56_reg_404;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'd1 == and_ln16_reg_2198))) begin
        ap_phi_mux_extracted_row_data_M_elems_V_4_phi_fu_477_p4 = extracted_row_data_M_elems_V_3_fu_1196_p2;
    end else begin
        ap_phi_mux_extracted_row_data_M_elems_V_4_phi_fu_477_p4 = ap_phi_reg_pp3_iter1_extracted_row_data_M_elems_V_4_reg_473;
    end
end

always @ (*) begin
    if ((icmp_ln41_reg_2124_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln44_reg_2138_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_found_1_phi_fu_420_p4 = found_reg_392;
        end else if ((icmp_ln44_reg_2138_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_found_1_phi_fu_420_p4 = 1'd1;
        end else begin
            ap_phi_mux_found_1_phi_fu_420_p4 = ap_phi_reg_pp2_iter11_found_1_reg_416;
        end
    end else begin
        ap_phi_mux_found_1_phi_fu_420_p4 = ap_phi_reg_pp2_iter11_found_1_reg_416;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_i_1_phi_fu_445_p4 = add_ln13_reg_2237;
    end else begin
        ap_phi_mux_i_1_phi_fu_445_p4 = i_1_reg_441;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_2397 == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_523_p4 = add_ln80_reg_2392;
    end else begin
        ap_phi_mux_i_phi_fu_523_p4 = i_reg_519;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_inc34_i_phi_fu_535_p4 = inc2_i_reg_542;
    end else begin
        ap_phi_mux_inc34_i_phi_fu_535_p4 = inc34_i_reg_531;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_2124 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_1_phi_fu_375_p4 = add_ln41_reg_2128;
    end else begin
        ap_phi_mux_j_1_phi_fu_375_p4 = j_1_reg_372;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (1'd1 == and_ln16_reg_2198))) begin
        ap_phi_mux_j_5_phi_fu_488_p4 = j_4_reg_2247;
    end else begin
        ap_phi_mux_j_5_phi_fu_488_p4 = ap_phi_reg_pp3_iter1_j_5_reg_484;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        if (((found_reg_392 == 1'd1) & (cmp2_i_reg_2079 == 1'd1))) begin
            ap_phi_mux_val_V_read_assign_phi_fu_432_p4 = empty_54_reg_382;
        end else if (((found_reg_392 == 1'd0) | (cmp2_i_reg_2079 == 1'd0))) begin
            ap_phi_mux_val_V_read_assign_phi_fu_432_p4 = 32'd0;
        end else begin
            ap_phi_mux_val_V_read_assign_phi_fu_432_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_val_V_read_assign_phi_fu_432_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (ap_predicate_op224_readreq_state26 == 1'b1))) begin
        m_axi_x_colind_ARVALID = 1'b1;
    end else begin
        m_axi_x_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_2124 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        m_axi_x_colind_RREADY = 1'b1;
    end else begin
        m_axi_x_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op241_readreq_state36 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        m_axi_x_data_ARVALID = 1'b1;
    end else begin
        m_axi_x_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op248_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        m_axi_x_data_RREADY = 1'b1;
    end else begin
        m_axi_x_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_x_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_x_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state23) & (m_axi_x_rowptr_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (m_axi_x_rowptr_RVALID == 1'b1)))) begin
        m_axi_x_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_x_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        m_axi_y_colind_ARVALID = 1'b1;
    end else begin
        m_axi_y_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        m_axi_y_colind_RREADY = 1'b1;
    end else begin
        m_axi_y_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage10_11001) & (1'b1 == ap_CS_fsm_pp3_stage10) & (ap_predicate_op317_readreq_state65 == 1'b1))) begin
        m_axi_y_data_ARVALID = 1'b1;
    end else begin
        m_axi_y_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage17_11001) & (1'b1 == ap_CS_fsm_pp3_stage17) & (ap_predicate_op335_read_state72 == 1'b1))) begin
        m_axi_y_data_RREADY = 1'b1;
    end else begin
        m_axi_y_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_y_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        m_axi_y_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_y_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53)))) begin
        m_axi_y_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_y_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op473_writereq_state90 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_AWVALID = 1'b1;
    end else begin
        m_axi_z_colind_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op491_writeresp_state96 == 1'b1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_BREADY = 1'b1;
    end else begin
        m_axi_z_colind_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op481_write_state91 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_WVALID = 1'b1;
    end else begin
        m_axi_z_colind_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op475_writereq_state90 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_AWVALID = 1'b1;
    end else begin
        m_axi_z_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op492_writeresp_state96 == 1'b1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_BREADY = 1'b1;
    end else begin
        m_axi_z_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op482_write_state91 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_WVALID = 1'b1;
    end else begin
        m_axi_z_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state26_io) & (icmp_ln134_reg_2094 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        m_axi_z_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) & (m_axi_z_rowptr_AWREADY == 1'b1))) begin
        m_axi_z_rowptr_AWADDR = indvars_iv_next277_cast_reg_2059;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (m_axi_z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_z_rowptr_AWADDR = 64'd0;
    end else begin
        m_axi_z_rowptr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state97) & (m_axi_z_rowptr_AWREADY == 1'b1)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (m_axi_z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_z_rowptr_AWVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state103) & (m_axi_z_rowptr_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1)))) begin
        m_axi_z_rowptr_BREADY = 1'b1;
    end else begin
        m_axi_z_rowptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) & (m_axi_z_rowptr_RVALID == 1'b1))) begin
        m_axi_z_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_z_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        m_axi_z_rowptr_WDATA = inc34_i_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_axi_z_rowptr_WDATA = 32'd0;
    end else begin
        m_axi_z_rowptr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state98) & (m_axi_z_rowptr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_z_rowptr_WREADY == 1'b1)))) begin
        m_axi_z_rowptr_WVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((cmp2_i_reg_2079 == 1'd1) & (icmp_ln134_reg_2094 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        x_colind_blk_n_AR = m_axi_x_colind_ARREADY;
    end else begin
        x_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_2124 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_colind_blk_n_R = m_axi_x_colind_RVALID;
    end else begin
        x_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_2138 == 1'd1) & (icmp_ln41_reg_2124_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_AR = m_axi_x_data_ARREADY;
    end else begin
        x_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_2138_pp2_iter9_reg == 1'd1) & (icmp_ln41_reg_2124_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_R = m_axi_x_data_RVALID;
    end else begin
        x_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_2019 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        x_rowptr_blk_n_AR = m_axi_x_rowptr_ARREADY;
    end else begin
        x_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        x_rowptr_blk_n_R = m_axi_x_rowptr_RVALID;
    end else begin
        x_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_colind_blk_n_AR = m_axi_y_colind_ARREADY;
    end else begin
        y_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_colind_blk_n_R = m_axi_y_colind_RVALID;
    end else begin
        y_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage10) & (1'd1 == and_ln16_reg_2198) & (1'b1 == ap_CS_fsm_pp3_stage10))) begin
        y_data_blk_n_AR = m_axi_y_data_ARREADY;
    end else begin
        y_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage17) & (1'd1 == and_ln16_reg_2198) & (1'b1 == ap_CS_fsm_pp3_stage17))) begin
        y_data_blk_n_R = m_axi_y_data_RVALID;
    end else begin
        y_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        y_rowptr_blk_n_AR = m_axi_y_rowptr_ARREADY;
    end else begin
        y_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53))) begin
        y_rowptr_blk_n_R = m_axi_y_rowptr_RVALID;
    end else begin
        y_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416 == 1'd0) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_AW = m_axi_z_colind_AWREADY;
    end else begin
        z_colind_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416_pp4_iter7_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter7_reg == 1'd0) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_B = m_axi_z_colind_BVALID;
    end else begin
        z_colind_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416_pp4_iter2_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_W = m_axi_z_colind_WREADY;
    end else begin
        z_colind_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416 == 1'd0) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_AW = m_axi_z_data_AWREADY;
    end else begin
        z_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416_pp4_iter7_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter7_reg == 1'd0) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_B = m_axi_z_data_BVALID;
    end else begin
        z_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2416_pp4_iter2_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_W = m_axi_z_data_WREADY;
    end else begin
        z_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln134_reg_2094 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        z_rowptr_blk_n_AR = m_axi_z_rowptr_ARREADY;
    end else begin
        z_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        z_rowptr_blk_n_AW = m_axi_z_rowptr_AWREADY;
    end else begin
        z_rowptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state7))) begin
        z_rowptr_blk_n_B = m_axi_z_rowptr_BVALID;
    end else begin
        z_rowptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        z_rowptr_blk_n_R = m_axi_z_rowptr_RVALID;
    end else begin
        z_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state2))) begin
        z_rowptr_blk_n_W = m_axi_z_rowptr_WREADY;
    end else begin
        z_rowptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (m_axi_z_rowptr_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln69_fu_583_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln69_fu_583_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln69_1_fu_693_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln69_1_fu_693_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state15_io) & (icmp_ln132_reg_2019 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (m_axi_x_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_x_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (cmp2_i_reg_2079 == 1'd0) & (icmp_ln134_reg_2094 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((1'b0 == ap_block_state26_io) & (cmp2_i_reg_2079 == 1'd1) & (icmp_ln134_reg_2094 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((1'b0 == ap_block_state26_io) & (icmp_ln134_reg_2094 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_911_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((m_axi_y_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((1'b0 == ap_block_pp3_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_pp3_stage9 : begin
            if ((1'b0 == ap_block_pp3_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end
        end
        ap_ST_fsm_pp3_stage10 : begin
            if ((1'b0 == ap_block_pp3_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end
        end
        ap_ST_fsm_pp3_stage11 : begin
            if ((1'b0 == ap_block_pp3_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end
        end
        ap_ST_fsm_pp3_stage12 : begin
            if ((1'b0 == ap_block_pp3_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end
        end
        ap_ST_fsm_pp3_stage13 : begin
            if ((~((icmp_ln13_reg_2173 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage13_subdone)) & (1'b0 == ap_block_pp3_stage13_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end else if (((icmp_ln13_reg_2173 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage13_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end
        end
        ap_ST_fsm_pp3_stage14 : begin
            if ((1'b0 == ap_block_pp3_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end
        end
        ap_ST_fsm_pp3_stage15 : begin
            if ((1'b0 == ap_block_pp3_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end
        end
        ap_ST_fsm_pp3_stage16 : begin
            if ((1'b0 == ap_block_pp3_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage16;
            end
        end
        ap_ST_fsm_pp3_stage17 : begin
            if ((1'b0 == ap_block_pp3_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage17;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln69_3_fu_1209_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((1'b1 == ap_CS_fsm_state86) & (m_axi_z_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b0)) | ((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((1'b1 == ap_CS_fsm_state97) & (m_axi_z_rowptr_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((1'b1 == ap_CS_fsm_state98) & (m_axi_z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((1'b1 == ap_CS_fsm_state103) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_2_fu_1824_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_2_fu_1824_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln134_fu_858_p2 = (k_reg_350 + 3'd1);

assign add_ln13_fu_1099_p2 = (i_1_reg_441 + 3'd1);

assign add_ln41_fu_895_p2 = (ap_phi_mux_j_1_phi_fu_375_p4 + 64'd1);

assign add_ln69_1_fu_687_p2 = (idx_i_reg_327 + 3'd1);

assign add_ln69_2_fu_1818_p2 = (idx_reg_554 + 3'd1);

assign add_ln69_3_fu_1203_p2 = (idx_i1_reg_496 + 3'd1);

assign add_ln69_fu_577_p2 = (idx_i8_reg_316 + 3'd1);

assign add_ln703_1_fu_1584_p2 = (trunc_ln708_1_reg_2358 + tmp_2_fu_1574_p4);

assign add_ln703_2_fu_1599_p2 = (trunc_ln708_2_reg_2364 + tmp_4_fu_1589_p4);

assign add_ln703_3_fu_1614_p2 = (trunc_ln708_3_reg_2370 + tmp_6_fu_1604_p4);

assign add_ln703_4_fu_1629_p2 = (trunc_ln708_4_reg_2376 + tmp_8_fu_1619_p4);

assign add_ln703_fu_1569_p2 = (trunc_ln_reg_2352 + trunc_ln703_fu_1565_p1);

assign add_ln80_fu_1658_p2 = (ap_phi_mux_i_phi_fu_523_p4 + 3'd1);

assign add_ln88_fu_1800_p2 = ($signed(ap_phi_mux_inc34_i_phi_fu_535_p4) + $signed(32'd1));

assign and_ln1499_fu_1767_p2 = (lshr_ln1499_reg_2406 & lshr_ln1499_1_fu_1761_p2);

assign and_ln16_fu_953_p2 = (icmp_ln16_reg_2188 & icmp_ln16_1_fu_948_p2);

assign and_ln19_1_fu_1185_p2 = (xor_ln19_fu_1180_p2 & row_data_M_elems_V_read_assign_reg_463);

assign and_ln19_2_fu_1191_p2 = (select_ln19_3_fu_1173_p3 & and_ln19_reg_2231);

assign and_ln19_fu_1093_p2 = (shl_ln19_1_fu_1081_p2 & lshr_ln19_fu_1087_p2);

assign and_ln27_1_fu_1117_p2 = (xor_ln27_fu_1112_p2 & row_data_M_elems_V_read_assign_reg_463);

assign and_ln27_2_fu_1123_p2 = (select_ln27_2_fu_1105_p3 & and_ln27_reg_2207);

assign and_ln27_fu_1020_p2 = (shl_ln27_fu_1008_p2 & lshr_ln27_fu_1014_p2);

assign and_ln71_10_fu_1483_p2 = (xor_ln71_3_fu_1477_p2 & p_range_M_elems_V_011_i_fu_162);

assign and_ln71_11_fu_1489_p2 = (select_ln71_12_fu_1452_p3 & and_ln71_9_fu_1471_p2);

assign and_ln71_1_fu_664_p2 = (xor_ln71_fu_658_p2 & extracted_row_data_M_elems_V_fu_142);

assign and_ln71_2_fu_670_p2 = (select_ln71_2_fu_633_p3 & and_ln71_fu_652_p2);

assign and_ln71_3_fu_762_p2 = (shl_ln71_4_fu_750_p2 & lshr_ln71_1_fu_756_p2);

assign and_ln71_4_fu_774_p2 = (xor_ln71_1_fu_768_p2 & buffer_row_data_M_elems_V_fu_146);

assign and_ln71_5_fu_780_p2 = (select_ln71_5_fu_743_p3 & and_ln71_3_fu_762_p2);

assign and_ln71_6_fu_1895_p2 = (shl_ln71_5_fu_1883_p2 & lshr_ln71_2_fu_1889_p2);

assign and_ln71_7_fu_1907_p2 = (xor_ln71_2_fu_1901_p2 & buffer_row_data_M_elems_V_1_fu_150);

assign and_ln71_8_fu_1913_p2 = (select_ln71_8_fu_1876_p3 & and_ln71_6_fu_1895_p2);

assign and_ln71_9_fu_1471_p2 = (shl_ln71_7_fu_1459_p2 & lshr_ln71_3_fu_1465_p2);

assign and_ln71_fu_652_p2 = (shl_ln71_fu_640_p2 & lshr_ln71_fu_646_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp3_stage10 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp3_stage13 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp3_stage16 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp3_stage17 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp3_stage9 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_predicate_op248_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (m_axi_x_data_RVALID == 1'b0)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_block_state36_io)) | ((icmp_ln41_reg_2124 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (m_axi_x_colind_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_predicate_op248_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (m_axi_x_data_RVALID == 1'b0)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_block_state36_io)) | ((icmp_ln41_reg_2124 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (m_axi_x_colind_RVALID == 1'b0)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage10_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_block_state65_io));
end

always @ (*) begin
    ap_block_pp3_stage10_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_block_state65_io));
end

assign ap_block_pp3_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage17_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (m_axi_y_data_RVALID == 1'b0) & (ap_predicate_op335_read_state72 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage17_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (m_axi_y_data_RVALID == 1'b0) & (ap_predicate_op335_read_state72 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_block_state56_io));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_block_state56_io));
end

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage8_11001 = ((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (m_axi_y_colind_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp3_stage8_subdone = ((icmp_ln13_reg_2173 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (m_axi_y_colind_RVALID == 1'b0));
end

assign ap_block_pp3_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op492_writeresp_state96 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op491_writeresp_state96 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op492_writeresp_state96 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op491_writeresp_state96 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)))) | ((ap_enable_reg_pp4_iter3 == 1'b1) & (1'b1 == ap_block_state91_io)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state90_io)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op492_writeresp_state96 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op491_writeresp_state96 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)))) | ((ap_enable_reg_pp4_iter3 == 1'b1) & (1'b1 == ap_block_state91_io)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state90_io)));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state104_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((icmp_ln132_reg_2019 == 1'd0) & (m_axi_x_rowptr_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state26_io = (((icmp_ln134_reg_2094 == 1'd1) & (m_axi_z_rowptr_ARREADY == 1'b0)) | ((m_axi_x_colind_ARREADY == 1'b0) & (ap_predicate_op224_readreq_state26 == 1'b1)));
end

assign ap_block_state33_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp2_stage0_iter1 = ((icmp_ln41_reg_2124 == 1'd0) & (m_axi_x_colind_RVALID == 1'b0));
end

assign ap_block_state35_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((ap_predicate_op241_readreq_state36 == 1'b1) & (m_axi_x_data_ARREADY == 1'b0));
end

assign ap_block_state36_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp2_stage0_iter10 = ((ap_predicate_op248_read_state43 == 1'b1) & (m_axi_x_data_RVALID == 1'b0));
end

assign ap_block_state44_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state56_io = ((icmp_ln13_reg_2173 == 1'd0) & (m_axi_y_colind_ARREADY == 1'b0));
end

assign ap_block_state56_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_pp3_stage8_iter0 = ((icmp_ln13_reg_2173 == 1'd0) & (m_axi_y_colind_RVALID == 1'b0));
end

assign ap_block_state64_pp3_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65_io = ((m_axi_y_data_ARREADY == 1'b0) & (ap_predicate_op317_readreq_state65 == 1'b1));
end

assign ap_block_state65_pp3_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp3_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp3_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp3_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp3_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp3_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp3_stage16_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp3_stage17_iter0 = ((m_axi_y_data_RVALID == 1'b0) & (ap_predicate_op335_read_state72 == 1'b1));
end

assign ap_block_state73_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state90_io = (((ap_predicate_op475_writereq_state90 == 1'b1) & (m_axi_z_data_AWREADY == 1'b0)) | ((ap_predicate_op473_writereq_state90 == 1'b1) & (m_axi_z_colind_AWREADY == 1'b0)));
end

assign ap_block_state90_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state91_io = (((ap_predicate_op482_write_state91 == 1'b1) & (m_axi_z_data_WREADY == 1'b0)) | ((ap_predicate_op481_write_state91 == 1'b1) & (m_axi_z_colind_WREADY == 1'b0)));
end

assign ap_block_state91_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state96_pp4_stage0_iter8 = (((ap_predicate_op492_writeresp_state96 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op491_writeresp_state96 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)));
end

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_phi_reg_pp2_iter11_empty_56_reg_404 = 'bx;

assign ap_phi_reg_pp2_iter11_found_1_reg_416 = 'bx;

assign ap_phi_reg_pp4_iter2_inc2_i_reg_542 = 'bx;

always @ (*) begin
    ap_predicate_op224_readreq_state26 = ((cmp2_i_reg_2079 == 1'd1) & (icmp_ln134_reg_2094 == 1'd0));
end

always @ (*) begin
    ap_predicate_op241_readreq_state36 = ((icmp_ln44_reg_2138 == 1'd1) & (icmp_ln41_reg_2124_pp2_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op248_read_state43 = ((icmp_ln44_reg_2138_pp2_iter9_reg == 1'd1) & (icmp_ln41_reg_2124_pp2_iter9_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op317_readreq_state65 = ((icmp_ln13_reg_2173 == 1'd0) & (1'd1 == and_ln16_reg_2198));
end

always @ (*) begin
    ap_predicate_op335_read_state72 = ((icmp_ln13_reg_2173 == 1'd0) & (1'd1 == and_ln16_reg_2198));
end

always @ (*) begin
    ap_predicate_op473_writereq_state90 = ((icmp_ln1499_reg_2416 == 1'd0) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op475_writereq_state90 = ((icmp_ln1499_reg_2416 == 1'd0) & (icmp_ln80_reg_2397_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op481_write_state91 = ((icmp_ln1499_reg_2416_pp4_iter2_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op482_write_state91 = ((icmp_ln1499_reg_2416_pp4_iter2_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op491_writeresp_state96 = ((icmp_ln1499_reg_2416_pp4_iter7_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op492_writeresp_state96 = ((icmp_ln1499_reg_2416_pp4_iter7_reg == 1'd0) & (icmp_ln80_reg_2397_pp4_iter7_reg == 1'd0));
end

assign buffer_row_data_M_elems_V_4_fu_786_p2 = (and_ln71_5_fu_780_p2 | and_ln71_4_fu_774_p2);

assign buffer_row_data_M_elems_V_5_fu_1634_p6 = {{{{{add_ln703_4_fu_1629_p2}, {add_ln703_3_fu_1614_p2}}, {add_ln703_2_fu_1599_p2}}, {add_ln703_1_fu_1584_p2}}, {add_ln703_fu_1569_p2}};

assign cmp2_i_fu_848_p2 = (($signed(j_reg_2045) < $signed(x_rowptr_addr_read_1_reg_2052)) ? 1'b1 : 1'b0);

assign empty_46_fu_597_p2 = (shl_ln_fu_589_p3 | 8'd31);

assign empty_49_fu_707_p2 = (shl_ln71_1_fu_699_p3 | 8'd31);

assign empty_58_fu_1223_p2 = (shl_ln71_3_fu_1215_p3 | 8'd31);

assign empty_61_fu_1039_p2 = (shl_ln1_fu_1031_p3 | 8'd31);

assign empty_62_fu_966_p2 = (shl_ln2_fu_958_p3 | 8'd31);

assign empty_63_fu_1678_p2 = (tmp_1_fu_1670_p3 | 8'd31);

assign empty_64_fu_1838_p2 = (shl_ln71_2_fu_1830_p3 | 8'd31);

assign extracted_row_data_M_elems_V_2_fu_676_p2 = (and_ln71_2_fu_670_p2 | and_ln71_1_fu_664_p2);

assign extracted_row_data_M_elems_V_3_fu_1196_p2 = (and_ln19_2_fu_1191_p2 | and_ln19_1_fu_1185_p2);

assign extracted_row_data_M_elems_V_5_fu_1128_p2 = (and_ln27_2_fu_1123_p2 | and_ln27_1_fu_1117_p2);

assign extracted_row_data_M_elems_V_6_fu_1556_p6 = {{{{{trunc_ln708_4_reg_2376}, {trunc_ln708_3_reg_2370}}, {trunc_ln708_2_reg_2364}}, {trunc_ln708_1_reg_2358}}, {trunc_ln_reg_2352}};

assign i_1_cast_fu_944_p1 = i_1_reg_441;

assign icmp_ln132_fu_812_p2 = ((i_3_reg_338 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_864_p2 = ((k_reg_350 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_922_p2 = ((ap_phi_mux_i_1_phi_fu_445_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_911_p2 = ((ap_phi_mux_val_V_read_assign_phi_fu_432_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_2_fu_1684_p2 = ((tmp_1_fu_1670_p3 > empty_63_fu_1678_p2) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_1776_p2 = ((trunc_ln1499_fu_1772_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_948_p2 = ((y_colind_addr_read_reg_2193 == i_1_cast_fu_944_p1) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_939_p2 = (($signed(j_3_reg_453) < $signed(y_rowptr_addr_read_1_reg_2168)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_1045_p2 = ((shl_ln1_fu_1031_p3 > empty_61_fu_1039_p2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_972_p2 = ((shl_ln2_fu_958_p3 > empty_62_fu_966_p2) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_890_p2 = ((ap_phi_mux_j_1_phi_fu_375_p4 == sext_ln134_reg_2074) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_901_p2 = ((x_colind_addr_read_reg_2133 == zext_ln134_reg_2108) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_693_p2 = ((idx_i_reg_327 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_1824_p2 = ((idx_reg_554 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_3_fu_1209_p2 = ((idx_i1_reg_496 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_583_p2 = ((idx_i8_reg_316 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_713_p2 = ((shl_ln71_1_fu_699_p3 > empty_49_fu_707_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_2_fu_1844_p2 = ((shl_ln71_2_fu_1830_p3 > empty_64_fu_1838_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_3_fu_1229_p2 = ((shl_ln71_3_fu_1215_p3 > empty_58_fu_1223_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_603_p2 = ((shl_ln_fu_589_p3 > empty_46_fu_597_p2) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1664_p2 = ((ap_phi_mux_i_phi_fu_523_p4 == 3'd5) ? 1'b1 : 1'b0);

assign indvars_iv_next277_cast_fu_835_p1 = indvars_iv_next277_reg_2023;

assign indvars_iv_next277_fu_818_p2 = (i_3_reg_338 + 3'd1);

assign j_4_fu_1134_p2 = ($signed(j_3_reg_453) + $signed(32'd1));

assign j_cast_fu_838_p1 = j_reg_2045;

assign lshr_ln1499_1_fu_1761_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln1499_1_fu_1758_p1;

assign lshr_ln1499_fu_1752_p2 = select_ln1499_1_fu_1726_p3 >> zext_ln1499_fu_1748_p1;

assign lshr_ln19_fu_1087_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln19_3_fu_1077_p1;

assign lshr_ln27_fu_1014_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln27_1_fu_1004_p1;

assign lshr_ln71_1_fu_756_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_3_fu_739_p1;

assign lshr_ln71_2_fu_1889_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_5_fu_1873_p1;

assign lshr_ln71_3_fu_1465_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_9_fu_1432_p1;

assign lshr_ln71_fu_646_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_1_fu_629_p1;

assign m_axi_x_colind_ARADDR = x_colind_addr_reg_2083;

assign m_axi_x_colind_ARBURST = 2'd0;

assign m_axi_x_colind_ARCACHE = 4'd0;

assign m_axi_x_colind_ARID = 1'd0;

assign m_axi_x_colind_ARLEN = sub_ln41_reg_2069;

assign m_axi_x_colind_ARLOCK = 2'd0;

assign m_axi_x_colind_ARPROT = 3'd0;

assign m_axi_x_colind_ARQOS = 4'd0;

assign m_axi_x_colind_ARREGION = 4'd0;

assign m_axi_x_colind_ARSIZE = 3'd0;

assign m_axi_x_colind_ARUSER = 1'd0;

assign m_axi_x_colind_AWADDR = 64'd0;

assign m_axi_x_colind_AWBURST = 2'd0;

assign m_axi_x_colind_AWCACHE = 4'd0;

assign m_axi_x_colind_AWID = 1'd0;

assign m_axi_x_colind_AWLEN = 32'd0;

assign m_axi_x_colind_AWLOCK = 2'd0;

assign m_axi_x_colind_AWPROT = 3'd0;

assign m_axi_x_colind_AWQOS = 4'd0;

assign m_axi_x_colind_AWREGION = 4'd0;

assign m_axi_x_colind_AWSIZE = 3'd0;

assign m_axi_x_colind_AWUSER = 1'd0;

assign m_axi_x_colind_AWVALID = 1'b0;

assign m_axi_x_colind_BREADY = 1'b0;

assign m_axi_x_colind_WDATA = 32'd0;

assign m_axi_x_colind_WID = 1'd0;

assign m_axi_x_colind_WLAST = 1'b0;

assign m_axi_x_colind_WSTRB = 4'd0;

assign m_axi_x_colind_WUSER = 1'd0;

assign m_axi_x_colind_WVALID = 1'b0;

assign m_axi_x_data_ARADDR = x_data_addr_reg_2142;

assign m_axi_x_data_ARBURST = 2'd0;

assign m_axi_x_data_ARCACHE = 4'd0;

assign m_axi_x_data_ARID = 1'd0;

assign m_axi_x_data_ARLEN = 32'd1;

assign m_axi_x_data_ARLOCK = 2'd0;

assign m_axi_x_data_ARPROT = 3'd0;

assign m_axi_x_data_ARQOS = 4'd0;

assign m_axi_x_data_ARREGION = 4'd0;

assign m_axi_x_data_ARSIZE = 3'd0;

assign m_axi_x_data_ARUSER = 1'd0;

assign m_axi_x_data_AWADDR = 64'd0;

assign m_axi_x_data_AWBURST = 2'd0;

assign m_axi_x_data_AWCACHE = 4'd0;

assign m_axi_x_data_AWID = 1'd0;

assign m_axi_x_data_AWLEN = 32'd0;

assign m_axi_x_data_AWLOCK = 2'd0;

assign m_axi_x_data_AWPROT = 3'd0;

assign m_axi_x_data_AWQOS = 4'd0;

assign m_axi_x_data_AWREGION = 4'd0;

assign m_axi_x_data_AWSIZE = 3'd0;

assign m_axi_x_data_AWUSER = 1'd0;

assign m_axi_x_data_AWVALID = 1'b0;

assign m_axi_x_data_BREADY = 1'b0;

assign m_axi_x_data_WDATA = 32'd0;

assign m_axi_x_data_WID = 1'd0;

assign m_axi_x_data_WLAST = 1'b0;

assign m_axi_x_data_WSTRB = 4'd0;

assign m_axi_x_data_WUSER = 1'd0;

assign m_axi_x_data_WVALID = 1'b0;

assign m_axi_x_rowptr_ARADDR = zext_ln132_fu_824_p1;

assign m_axi_x_rowptr_ARBURST = 2'd0;

assign m_axi_x_rowptr_ARCACHE = 4'd0;

assign m_axi_x_rowptr_ARID = 1'd0;

assign m_axi_x_rowptr_ARLEN = 32'd2;

assign m_axi_x_rowptr_ARLOCK = 2'd0;

assign m_axi_x_rowptr_ARPROT = 3'd0;

assign m_axi_x_rowptr_ARQOS = 4'd0;

assign m_axi_x_rowptr_ARREGION = 4'd0;

assign m_axi_x_rowptr_ARSIZE = 3'd0;

assign m_axi_x_rowptr_ARUSER = 1'd0;

assign m_axi_x_rowptr_AWADDR = 64'd0;

assign m_axi_x_rowptr_AWBURST = 2'd0;

assign m_axi_x_rowptr_AWCACHE = 4'd0;

assign m_axi_x_rowptr_AWID = 1'd0;

assign m_axi_x_rowptr_AWLEN = 32'd0;

assign m_axi_x_rowptr_AWLOCK = 2'd0;

assign m_axi_x_rowptr_AWPROT = 3'd0;

assign m_axi_x_rowptr_AWQOS = 4'd0;

assign m_axi_x_rowptr_AWREGION = 4'd0;

assign m_axi_x_rowptr_AWSIZE = 3'd0;

assign m_axi_x_rowptr_AWUSER = 1'd0;

assign m_axi_x_rowptr_AWVALID = 1'b0;

assign m_axi_x_rowptr_BREADY = 1'b0;

assign m_axi_x_rowptr_WDATA = 32'd0;

assign m_axi_x_rowptr_WID = 1'd0;

assign m_axi_x_rowptr_WLAST = 1'b0;

assign m_axi_x_rowptr_WSTRB = 4'd0;

assign m_axi_x_rowptr_WUSER = 1'd0;

assign m_axi_x_rowptr_WVALID = 1'b0;

assign m_axi_y_colind_ARADDR = sext_ln15_fu_928_p1;

assign m_axi_y_colind_ARBURST = 2'd0;

assign m_axi_y_colind_ARCACHE = 4'd0;

assign m_axi_y_colind_ARID = 1'd0;

assign m_axi_y_colind_ARLEN = 32'd1;

assign m_axi_y_colind_ARLOCK = 2'd0;

assign m_axi_y_colind_ARPROT = 3'd0;

assign m_axi_y_colind_ARQOS = 4'd0;

assign m_axi_y_colind_ARREGION = 4'd0;

assign m_axi_y_colind_ARSIZE = 3'd0;

assign m_axi_y_colind_ARUSER = 1'd0;

assign m_axi_y_colind_AWADDR = 64'd0;

assign m_axi_y_colind_AWBURST = 2'd0;

assign m_axi_y_colind_AWCACHE = 4'd0;

assign m_axi_y_colind_AWID = 1'd0;

assign m_axi_y_colind_AWLEN = 32'd0;

assign m_axi_y_colind_AWLOCK = 2'd0;

assign m_axi_y_colind_AWPROT = 3'd0;

assign m_axi_y_colind_AWQOS = 4'd0;

assign m_axi_y_colind_AWREGION = 4'd0;

assign m_axi_y_colind_AWSIZE = 3'd0;

assign m_axi_y_colind_AWUSER = 1'd0;

assign m_axi_y_colind_AWVALID = 1'b0;

assign m_axi_y_colind_BREADY = 1'b0;

assign m_axi_y_colind_WDATA = 32'd0;

assign m_axi_y_colind_WID = 1'd0;

assign m_axi_y_colind_WLAST = 1'b0;

assign m_axi_y_colind_WSTRB = 4'd0;

assign m_axi_y_colind_WUSER = 1'd0;

assign m_axi_y_colind_WVALID = 1'b0;

assign m_axi_y_data_ARADDR = y_data_addr_reg_2213;

assign m_axi_y_data_ARBURST = 2'd0;

assign m_axi_y_data_ARCACHE = 4'd0;

assign m_axi_y_data_ARID = 1'd0;

assign m_axi_y_data_ARLEN = 32'd1;

assign m_axi_y_data_ARLOCK = 2'd0;

assign m_axi_y_data_ARPROT = 3'd0;

assign m_axi_y_data_ARQOS = 4'd0;

assign m_axi_y_data_ARREGION = 4'd0;

assign m_axi_y_data_ARSIZE = 3'd0;

assign m_axi_y_data_ARUSER = 1'd0;

assign m_axi_y_data_AWADDR = 64'd0;

assign m_axi_y_data_AWBURST = 2'd0;

assign m_axi_y_data_AWCACHE = 4'd0;

assign m_axi_y_data_AWID = 1'd0;

assign m_axi_y_data_AWLEN = 32'd0;

assign m_axi_y_data_AWLOCK = 2'd0;

assign m_axi_y_data_AWPROT = 3'd0;

assign m_axi_y_data_AWQOS = 4'd0;

assign m_axi_y_data_AWREGION = 4'd0;

assign m_axi_y_data_AWSIZE = 3'd0;

assign m_axi_y_data_AWUSER = 1'd0;

assign m_axi_y_data_AWVALID = 1'b0;

assign m_axi_y_data_BREADY = 1'b0;

assign m_axi_y_data_WDATA = 32'd0;

assign m_axi_y_data_WID = 1'd0;

assign m_axi_y_data_WLAST = 1'b0;

assign m_axi_y_data_WSTRB = 4'd0;

assign m_axi_y_data_WUSER = 1'd0;

assign m_axi_y_data_WVALID = 1'b0;

assign m_axi_y_rowptr_ARADDR = y_rowptr_addr_reg_2157;

assign m_axi_y_rowptr_ARBURST = 2'd0;

assign m_axi_y_rowptr_ARCACHE = 4'd0;

assign m_axi_y_rowptr_ARID = 1'd0;

assign m_axi_y_rowptr_ARLEN = 32'd2;

assign m_axi_y_rowptr_ARLOCK = 2'd0;

assign m_axi_y_rowptr_ARPROT = 3'd0;

assign m_axi_y_rowptr_ARQOS = 4'd0;

assign m_axi_y_rowptr_ARREGION = 4'd0;

assign m_axi_y_rowptr_ARSIZE = 3'd0;

assign m_axi_y_rowptr_ARUSER = 1'd0;

assign m_axi_y_rowptr_AWADDR = 64'd0;

assign m_axi_y_rowptr_AWBURST = 2'd0;

assign m_axi_y_rowptr_AWCACHE = 4'd0;

assign m_axi_y_rowptr_AWID = 1'd0;

assign m_axi_y_rowptr_AWLEN = 32'd0;

assign m_axi_y_rowptr_AWLOCK = 2'd0;

assign m_axi_y_rowptr_AWPROT = 3'd0;

assign m_axi_y_rowptr_AWQOS = 4'd0;

assign m_axi_y_rowptr_AWREGION = 4'd0;

assign m_axi_y_rowptr_AWSIZE = 3'd0;

assign m_axi_y_rowptr_AWUSER = 1'd0;

assign m_axi_y_rowptr_AWVALID = 1'b0;

assign m_axi_y_rowptr_BREADY = 1'b0;

assign m_axi_y_rowptr_WDATA = 32'd0;

assign m_axi_y_rowptr_WID = 1'd0;

assign m_axi_y_rowptr_WLAST = 1'b0;

assign m_axi_y_rowptr_WSTRB = 4'd0;

assign m_axi_y_rowptr_WUSER = 1'd0;

assign m_axi_y_rowptr_WVALID = 1'b0;

assign m_axi_z_colind_ARADDR = 64'd0;

assign m_axi_z_colind_ARBURST = 2'd0;

assign m_axi_z_colind_ARCACHE = 4'd0;

assign m_axi_z_colind_ARID = 1'd0;

assign m_axi_z_colind_ARLEN = 32'd0;

assign m_axi_z_colind_ARLOCK = 2'd0;

assign m_axi_z_colind_ARPROT = 3'd0;

assign m_axi_z_colind_ARQOS = 4'd0;

assign m_axi_z_colind_ARREGION = 4'd0;

assign m_axi_z_colind_ARSIZE = 3'd0;

assign m_axi_z_colind_ARUSER = 1'd0;

assign m_axi_z_colind_ARVALID = 1'b0;

assign m_axi_z_colind_AWADDR = sext_ln86_fu_1782_p1;

assign m_axi_z_colind_AWBURST = 2'd0;

assign m_axi_z_colind_AWCACHE = 4'd0;

assign m_axi_z_colind_AWID = 1'd0;

assign m_axi_z_colind_AWLEN = 32'd1;

assign m_axi_z_colind_AWLOCK = 2'd0;

assign m_axi_z_colind_AWPROT = 3'd0;

assign m_axi_z_colind_AWQOS = 4'd0;

assign m_axi_z_colind_AWREGION = 4'd0;

assign m_axi_z_colind_AWSIZE = 3'd0;

assign m_axi_z_colind_AWUSER = 1'd0;

assign m_axi_z_colind_RREADY = 1'b0;

assign m_axi_z_colind_WDATA = i_reg_519_pp4_iter2_reg;

assign m_axi_z_colind_WID = 1'd0;

assign m_axi_z_colind_WLAST = 1'b0;

assign m_axi_z_colind_WSTRB = 4'd15;

assign m_axi_z_colind_WUSER = 1'd0;

assign m_axi_z_data_ARADDR = 64'd0;

assign m_axi_z_data_ARBURST = 2'd0;

assign m_axi_z_data_ARCACHE = 4'd0;

assign m_axi_z_data_ARID = 1'd0;

assign m_axi_z_data_ARLEN = 32'd0;

assign m_axi_z_data_ARLOCK = 2'd0;

assign m_axi_z_data_ARPROT = 3'd0;

assign m_axi_z_data_ARQOS = 4'd0;

assign m_axi_z_data_ARREGION = 4'd0;

assign m_axi_z_data_ARSIZE = 3'd0;

assign m_axi_z_data_ARUSER = 1'd0;

assign m_axi_z_data_ARVALID = 1'b0;

assign m_axi_z_data_AWADDR = sext_ln86_fu_1782_p1;

assign m_axi_z_data_AWBURST = 2'd0;

assign m_axi_z_data_AWCACHE = 4'd0;

assign m_axi_z_data_AWID = 1'd0;

assign m_axi_z_data_AWLEN = 32'd1;

assign m_axi_z_data_AWLOCK = 2'd0;

assign m_axi_z_data_AWPROT = 3'd0;

assign m_axi_z_data_AWQOS = 4'd0;

assign m_axi_z_data_AWREGION = 4'd0;

assign m_axi_z_data_AWSIZE = 3'd0;

assign m_axi_z_data_AWUSER = 1'd0;

assign m_axi_z_data_RREADY = 1'b0;

assign m_axi_z_data_WDATA = trunc_ln1499_reg_2411_pp4_iter2_reg;

assign m_axi_z_data_WID = 1'd0;

assign m_axi_z_data_WLAST = 1'b0;

assign m_axi_z_data_WSTRB = 4'd15;

assign m_axi_z_data_WUSER = 1'd0;

assign m_axi_z_rowptr_ARADDR = zext_ln132_reg_2034;

assign m_axi_z_rowptr_ARBURST = 2'd0;

assign m_axi_z_rowptr_ARCACHE = 4'd0;

assign m_axi_z_rowptr_ARID = 1'd0;

assign m_axi_z_rowptr_ARLEN = 32'd1;

assign m_axi_z_rowptr_ARLOCK = 2'd0;

assign m_axi_z_rowptr_ARPROT = 3'd0;

assign m_axi_z_rowptr_ARQOS = 4'd0;

assign m_axi_z_rowptr_ARREGION = 4'd0;

assign m_axi_z_rowptr_ARSIZE = 3'd0;

assign m_axi_z_rowptr_ARUSER = 1'd0;

assign m_axi_z_rowptr_AWBURST = 2'd0;

assign m_axi_z_rowptr_AWCACHE = 4'd0;

assign m_axi_z_rowptr_AWID = 1'd0;

assign m_axi_z_rowptr_AWLEN = 32'd1;

assign m_axi_z_rowptr_AWLOCK = 2'd0;

assign m_axi_z_rowptr_AWPROT = 3'd0;

assign m_axi_z_rowptr_AWQOS = 4'd0;

assign m_axi_z_rowptr_AWREGION = 4'd0;

assign m_axi_z_rowptr_AWSIZE = 3'd0;

assign m_axi_z_rowptr_AWUSER = 1'd0;

assign m_axi_z_rowptr_WID = 1'd0;

assign m_axi_z_rowptr_WLAST = 1'b0;

assign m_axi_z_rowptr_WSTRB = 4'd15;

assign m_axi_z_rowptr_WUSER = 1'd0;

assign or_ln71_1_fu_1495_p2 = (and_ln71_11_fu_1489_p2 | and_ln71_10_fu_1483_p2);

assign or_ln71_fu_1919_p2 = (and_ln71_8_fu_1913_p2 | and_ln71_7_fu_1907_p2);

assign r_V_2_fu_1263_p4 = {{row_data_M_elems_V_read_assign_reg_463[63:32]}};

assign r_V_4_fu_1297_p4 = {{row_data_M_elems_V_read_assign_reg_463[95:64]}};

assign r_V_6_fu_1331_p4 = {{row_data_M_elems_V_read_assign_reg_463[127:96]}};

assign r_V_8_fu_1365_p4 = {{row_data_M_elems_V_read_assign_reg_463[159:128]}};

assign r_V_fu_1241_p1 = row_data_M_elems_V_read_assign_reg_463[31:0];

assign select_ln1499_1_fu_1726_p3 = ((icmp_ln1499_2_fu_1684_p2[0:0] == 1'b1) ? tmp_fu_1690_p4 : buffer_row_data_M_elems_V_2_reg_362);

assign select_ln1499_2_fu_1734_p3 = ((icmp_ln1499_2_fu_1684_p2[0:0] == 1'b1) ? sub_ln1499_1_fu_1706_p2 : tmp_1_fu_1670_p3);

assign select_ln1499_fu_1718_p3 = ((icmp_ln1499_2_fu_1684_p2[0:0] == 1'b1) ? sub_ln1499_fu_1700_p2 : sub_ln1499_2_fu_1712_p2);

assign select_ln19_1_fu_1059_p3 = ((icmp_ln19_fu_1045_p2[0:0] == 1'b1) ? empty_61_fu_1039_p2 : shl_ln1_fu_1031_p3);

assign select_ln19_2_fu_1148_p3 = ((icmp_ln19_reg_2225[0:0] == 1'b1) ? sub_ln19_reg_2257 : shl_ln1_reg_2219);

assign select_ln19_3_fu_1173_p3 = ((icmp_ln19_reg_2225[0:0] == 1'b1) ? tmp_3_fu_1163_p4 : shl_ln19_fu_1157_p2);

assign select_ln19_fu_1051_p3 = ((icmp_ln19_fu_1045_p2[0:0] == 1'b1) ? shl_ln1_fu_1031_p3 : empty_61_fu_1039_p2);

assign select_ln27_1_fu_986_p3 = ((icmp_ln27_fu_972_p2[0:0] == 1'b1) ? empty_62_fu_966_p2 : shl_ln2_fu_958_p3);

assign select_ln27_2_fu_1105_p3 = ((icmp_ln27_reg_2202[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln27_fu_978_p3 = ((icmp_ln27_fu_972_p2[0:0] == 1'b1) ? shl_ln2_fu_958_p3 : empty_62_fu_966_p2);

assign select_ln71_10_fu_1408_p3 = ((icmp_ln71_3_reg_2289[0:0] == 1'b1) ? empty_58_reg_2283 : shl_ln71_3_reg_2276);

assign select_ln71_11_fu_1413_p3 = ((icmp_ln71_3_reg_2289[0:0] == 1'b1) ? sub_ln71_3_reg_2297 : shl_ln71_3_reg_2276);

assign select_ln71_12_fu_1452_p3 = ((icmp_ln71_3_reg_2289[0:0] == 1'b1) ? tmp_5_fu_1442_p4 : shl_ln71_6_fu_1436_p2);

assign select_ln71_1_fu_614_p3 = ((icmp_ln71_reg_1957[0:0] == 1'b1) ? empty_46_reg_1951 : shl_ln_reg_1945);

assign select_ln71_2_fu_633_p3 = ((icmp_ln71_reg_1957[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_3_fu_719_p3 = ((icmp_ln71_1_reg_1991[0:0] == 1'b1) ? shl_ln71_1_reg_1979 : empty_49_reg_1985);

assign select_ln71_4_fu_724_p3 = ((icmp_ln71_1_reg_1991[0:0] == 1'b1) ? empty_49_reg_1985 : shl_ln71_1_reg_1979);

assign select_ln71_5_fu_743_p3 = ((icmp_ln71_1_reg_1991[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_6_fu_1850_p3 = ((icmp_ln71_2_fu_1844_p2[0:0] == 1'b1) ? shl_ln71_2_fu_1830_p3 : empty_64_fu_1838_p2);

assign select_ln71_7_fu_1864_p3 = ((icmp_ln71_2_reg_2457[0:0] == 1'b1) ? empty_64_reg_2452 : shl_ln71_2_reg_2447);

assign select_ln71_8_fu_1876_p3 = ((icmp_ln71_2_reg_2457[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_9_fu_1403_p3 = ((icmp_ln71_3_reg_2289[0:0] == 1'b1) ? shl_ln71_3_reg_2276 : empty_58_reg_2283);

assign select_ln71_fu_609_p3 = ((icmp_ln71_reg_1957[0:0] == 1'b1) ? shl_ln_reg_1945 : empty_46_reg_1951);

assign sext_ln134_fu_845_p1 = x_rowptr_addr_read_1_reg_2052;

assign sext_ln15_fu_928_p1 = j_3_reg_453;

assign sext_ln86_fu_1782_p1 = ap_phi_mux_inc34_i_phi_fu_535_p4;

assign shl_ln19_1_fu_1081_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln19_2_fu_1073_p1;

assign shl_ln19_fu_1157_p2 = zext_ln19_fu_1145_p1 << zext_ln19_1_fu_1153_p1;

assign shl_ln1_fu_1031_p3 = {{i_1_reg_441}, {5'd0}};

assign shl_ln27_fu_1008_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln27_fu_1000_p1;

assign shl_ln2_fu_958_p3 = {{i_1_reg_441}, {5'd0}};

assign shl_ln71_1_fu_699_p3 = {{idx_i_reg_327}, {5'd0}};

assign shl_ln71_2_fu_1830_p3 = {{idx_reg_554}, {5'd0}};

assign shl_ln71_3_fu_1215_p3 = {{idx_i1_reg_496}, {5'd0}};

assign shl_ln71_4_fu_750_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_2_fu_735_p1;

assign shl_ln71_5_fu_1883_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_4_fu_1869_p1;

assign shl_ln71_6_fu_1436_p2 = zext_ln71_6_fu_1399_p1 << zext_ln71_7_fu_1424_p1;

assign shl_ln71_7_fu_1459_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_8_fu_1428_p1;

assign shl_ln71_fu_640_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_fu_625_p1;

assign shl_ln_fu_589_p3 = {{idx_i8_reg_316}, {5'd0}};

assign sub_ln1499_1_fu_1706_p2 = ($signed(8'd159) - $signed(tmp_1_fu_1670_p3));

assign sub_ln1499_2_fu_1712_p2 = (empty_63_fu_1678_p2 - tmp_1_fu_1670_p3);

assign sub_ln1499_3_fu_1742_p2 = ($signed(8'd159) - $signed(select_ln1499_fu_1718_p3));

assign sub_ln1499_fu_1700_p2 = (tmp_1_fu_1670_p3 - empty_63_fu_1678_p2);

assign sub_ln19_1_fu_1067_p2 = ($signed(8'd159) - $signed(select_ln19_fu_1051_p3));

assign sub_ln19_fu_1140_p2 = ($signed(8'd159) - $signed(shl_ln1_reg_2219));

assign sub_ln27_fu_994_p2 = ($signed(8'd159) - $signed(select_ln27_fu_978_p3));

assign sub_ln41_fu_841_p2 = ($signed(x_rowptr_addr_read_1_reg_2052) - $signed(j_reg_2045));

assign sub_ln71_1_fu_729_p2 = ($signed(8'd159) - $signed(select_ln71_3_fu_719_p3));

assign sub_ln71_2_fu_1858_p2 = ($signed(8'd159) - $signed(select_ln71_6_fu_1850_p3));

assign sub_ln71_3_fu_1235_p2 = ($signed(8'd159) - $signed(shl_ln71_3_fu_1215_p3));

assign sub_ln71_4_fu_1418_p2 = ($signed(8'd159) - $signed(select_ln71_9_fu_1403_p3));

assign sub_ln71_fu_619_p2 = ($signed(8'd159) - $signed(select_ln71_fu_609_p3));

assign tmp_1_fu_1670_p3 = {{ap_phi_mux_i_phi_fu_523_p4}, {5'd0}};

assign tmp_2_fu_1574_p4 = {{buffer_row_data_M_elems_V_2_reg_362[63:32]}};

integer ap_tvar_int_0;

always @ (shl_ln19_fu_1157_p2) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_3_fu_1163_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_3_fu_1163_p4[ap_tvar_int_0] = shl_ln19_fu_1157_p2[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_3_i_fu_1277_p4 = {{p_range_M_elems_V_011_i_fu_162[63:32]}};

assign tmp_4_fu_1589_p4 = {{buffer_row_data_M_elems_V_2_reg_362[95:64]}};

integer ap_tvar_int_1;

always @ (shl_ln71_6_fu_1436_p2) begin
    for (ap_tvar_int_1 = 160 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 159 - 0) begin
            tmp_5_fu_1442_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_5_fu_1442_p4[ap_tvar_int_1] = shl_ln71_6_fu_1436_p2[159 - ap_tvar_int_1];
        end
    end
end

assign tmp_5_i_fu_1311_p4 = {{p_range_M_elems_V_011_i_fu_162[95:64]}};

assign tmp_6_fu_1604_p4 = {{buffer_row_data_M_elems_V_2_reg_362[127:96]}};

assign tmp_7_i_fu_1345_p4 = {{p_range_M_elems_V_011_i_fu_162[127:96]}};

assign tmp_8_fu_1619_p4 = {{buffer_row_data_M_elems_V_2_reg_362[159:128]}};

assign tmp_9_i_fu_1379_p4 = {{p_range_M_elems_V_011_i_fu_162[159:128]}};

integer ap_tvar_int_2;

always @ (buffer_row_data_M_elems_V_2_reg_362) begin
    for (ap_tvar_int_2 = 160 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 159 - 0) begin
            tmp_fu_1690_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_fu_1690_p4[ap_tvar_int_2] = buffer_row_data_M_elems_V_2_reg_362[159 - ap_tvar_int_2];
        end
    end
end

assign trunc_ln1118_fu_1249_p1 = p_range_M_elems_V_011_i_fu_162[31:0];

assign trunc_ln1499_fu_1772_p1 = and_ln1499_fu_1767_p2[31:0];

assign trunc_ln703_fu_1565_p1 = buffer_row_data_M_elems_V_2_reg_362[31:0];

assign xor_ln19_fu_1180_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln19_reg_2231);

assign xor_ln27_fu_1112_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln27_reg_2207);

assign xor_ln71_1_fu_768_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_3_fu_762_p2);

assign xor_ln71_2_fu_1901_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_6_fu_1895_p2);

assign xor_ln71_3_fu_1477_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_9_fu_1471_p2);

assign xor_ln71_fu_658_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_fu_652_p2);

assign zext_ln132_fu_824_p1 = i_3_reg_338;

assign zext_ln134_1_fu_880_p1 = k_reg_350;

assign zext_ln134_fu_876_p1 = k_reg_350;

assign zext_ln1499_1_fu_1758_p1 = sub_ln1499_3_reg_2401;

assign zext_ln1499_fu_1748_p1 = select_ln1499_2_fu_1734_p3;

assign zext_ln19_1_fu_1153_p1 = select_ln19_2_fu_1148_p3;

assign zext_ln19_2_fu_1073_p1 = select_ln19_1_fu_1059_p3;

assign zext_ln19_3_fu_1077_p1 = sub_ln19_1_fu_1067_p2;

assign zext_ln19_fu_1145_p1 = y_data_addr_read_reg_2252;

assign zext_ln27_1_fu_1004_p1 = sub_ln27_fu_994_p2;

assign zext_ln27_fu_1000_p1 = select_ln27_1_fu_986_p3;

assign zext_ln71_1_fu_629_p1 = sub_ln71_fu_619_p2;

assign zext_ln71_2_fu_735_p1 = select_ln71_4_fu_724_p3;

assign zext_ln71_3_fu_739_p1 = sub_ln71_1_fu_729_p2;

assign zext_ln71_4_fu_1869_p1 = select_ln71_7_fu_1864_p3;

assign zext_ln71_5_fu_1873_p1 = sub_ln71_2_reg_2463;

assign zext_ln71_6_fu_1399_p1 = val_V_read_assign_reg_429;

assign zext_ln71_7_fu_1424_p1 = select_ln71_11_fu_1413_p3;

assign zext_ln71_8_fu_1428_p1 = select_ln71_10_fu_1408_p3;

assign zext_ln71_9_fu_1432_p1 = sub_ln71_4_fu_1418_p2;

assign zext_ln71_fu_625_p1 = select_ln71_1_fu_614_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1945[4:0] <= 5'b00000;
    empty_46_reg_1951[4:0] <= 5'b11111;
    shl_ln71_1_reg_1979[4:0] <= 5'b00000;
    empty_49_reg_1985[4:0] <= 5'b11111;
    zext_ln132_reg_2034[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    indvars_iv_next277_cast_reg_2059[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln134_reg_2108[31:3] <= 29'b00000000000000000000000000000;
    zext_ln134_1_reg_2113[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    y_rowptr_addr_reg_2157[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    shl_ln1_reg_2219[4:0] <= 5'b00000;
    sub_ln19_reg_2257[4:0] <= 5'b11111;
    shl_ln71_3_reg_2276[4:0] <= 5'b00000;
    empty_58_reg_2283[4:0] <= 5'b11111;
    sub_ln71_3_reg_2297[4:0] <= 5'b11111;
    sub_ln1499_3_reg_2401[0] <= 1'b0;
    shl_ln71_2_reg_2447[4:0] <= 5'b00000;
    empty_64_reg_2452[4:0] <= 5'b11111;
end

endmodule //row_product_Block_ZN8ap_fixedILi32ELi16EL9ap_q_mode5EL9ap_o_mode3ELi0EEC2Ei_exit111_proc
