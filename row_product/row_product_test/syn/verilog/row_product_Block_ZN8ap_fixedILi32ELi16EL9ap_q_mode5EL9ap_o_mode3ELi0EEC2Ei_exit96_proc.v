// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module row_product_Block_ZN8ap_fixedILi32ELi16EL9ap_q_mode5EL9ap_o_mode3ELi0EEC2Ei_exit96_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_z_rowptr_AWVALID,
        m_axi_z_rowptr_AWREADY,
        m_axi_z_rowptr_AWADDR,
        m_axi_z_rowptr_AWID,
        m_axi_z_rowptr_AWLEN,
        m_axi_z_rowptr_AWSIZE,
        m_axi_z_rowptr_AWBURST,
        m_axi_z_rowptr_AWLOCK,
        m_axi_z_rowptr_AWCACHE,
        m_axi_z_rowptr_AWPROT,
        m_axi_z_rowptr_AWQOS,
        m_axi_z_rowptr_AWREGION,
        m_axi_z_rowptr_AWUSER,
        m_axi_z_rowptr_WVALID,
        m_axi_z_rowptr_WREADY,
        m_axi_z_rowptr_WDATA,
        m_axi_z_rowptr_WSTRB,
        m_axi_z_rowptr_WLAST,
        m_axi_z_rowptr_WID,
        m_axi_z_rowptr_WUSER,
        m_axi_z_rowptr_ARVALID,
        m_axi_z_rowptr_ARREADY,
        m_axi_z_rowptr_ARADDR,
        m_axi_z_rowptr_ARID,
        m_axi_z_rowptr_ARLEN,
        m_axi_z_rowptr_ARSIZE,
        m_axi_z_rowptr_ARBURST,
        m_axi_z_rowptr_ARLOCK,
        m_axi_z_rowptr_ARCACHE,
        m_axi_z_rowptr_ARPROT,
        m_axi_z_rowptr_ARQOS,
        m_axi_z_rowptr_ARREGION,
        m_axi_z_rowptr_ARUSER,
        m_axi_z_rowptr_RVALID,
        m_axi_z_rowptr_RREADY,
        m_axi_z_rowptr_RDATA,
        m_axi_z_rowptr_RLAST,
        m_axi_z_rowptr_RID,
        m_axi_z_rowptr_RUSER,
        m_axi_z_rowptr_RRESP,
        m_axi_z_rowptr_BVALID,
        m_axi_z_rowptr_BREADY,
        m_axi_z_rowptr_BRESP,
        m_axi_z_rowptr_BID,
        m_axi_z_rowptr_BUSER,
        m_axi_x_rowptr_AWVALID,
        m_axi_x_rowptr_AWREADY,
        m_axi_x_rowptr_AWADDR,
        m_axi_x_rowptr_AWID,
        m_axi_x_rowptr_AWLEN,
        m_axi_x_rowptr_AWSIZE,
        m_axi_x_rowptr_AWBURST,
        m_axi_x_rowptr_AWLOCK,
        m_axi_x_rowptr_AWCACHE,
        m_axi_x_rowptr_AWPROT,
        m_axi_x_rowptr_AWQOS,
        m_axi_x_rowptr_AWREGION,
        m_axi_x_rowptr_AWUSER,
        m_axi_x_rowptr_WVALID,
        m_axi_x_rowptr_WREADY,
        m_axi_x_rowptr_WDATA,
        m_axi_x_rowptr_WSTRB,
        m_axi_x_rowptr_WLAST,
        m_axi_x_rowptr_WID,
        m_axi_x_rowptr_WUSER,
        m_axi_x_rowptr_ARVALID,
        m_axi_x_rowptr_ARREADY,
        m_axi_x_rowptr_ARADDR,
        m_axi_x_rowptr_ARID,
        m_axi_x_rowptr_ARLEN,
        m_axi_x_rowptr_ARSIZE,
        m_axi_x_rowptr_ARBURST,
        m_axi_x_rowptr_ARLOCK,
        m_axi_x_rowptr_ARCACHE,
        m_axi_x_rowptr_ARPROT,
        m_axi_x_rowptr_ARQOS,
        m_axi_x_rowptr_ARREGION,
        m_axi_x_rowptr_ARUSER,
        m_axi_x_rowptr_RVALID,
        m_axi_x_rowptr_RREADY,
        m_axi_x_rowptr_RDATA,
        m_axi_x_rowptr_RLAST,
        m_axi_x_rowptr_RID,
        m_axi_x_rowptr_RUSER,
        m_axi_x_rowptr_RRESP,
        m_axi_x_rowptr_BVALID,
        m_axi_x_rowptr_BREADY,
        m_axi_x_rowptr_BRESP,
        m_axi_x_rowptr_BID,
        m_axi_x_rowptr_BUSER,
        m_axi_x_colind_AWVALID,
        m_axi_x_colind_AWREADY,
        m_axi_x_colind_AWADDR,
        m_axi_x_colind_AWID,
        m_axi_x_colind_AWLEN,
        m_axi_x_colind_AWSIZE,
        m_axi_x_colind_AWBURST,
        m_axi_x_colind_AWLOCK,
        m_axi_x_colind_AWCACHE,
        m_axi_x_colind_AWPROT,
        m_axi_x_colind_AWQOS,
        m_axi_x_colind_AWREGION,
        m_axi_x_colind_AWUSER,
        m_axi_x_colind_WVALID,
        m_axi_x_colind_WREADY,
        m_axi_x_colind_WDATA,
        m_axi_x_colind_WSTRB,
        m_axi_x_colind_WLAST,
        m_axi_x_colind_WID,
        m_axi_x_colind_WUSER,
        m_axi_x_colind_ARVALID,
        m_axi_x_colind_ARREADY,
        m_axi_x_colind_ARADDR,
        m_axi_x_colind_ARID,
        m_axi_x_colind_ARLEN,
        m_axi_x_colind_ARSIZE,
        m_axi_x_colind_ARBURST,
        m_axi_x_colind_ARLOCK,
        m_axi_x_colind_ARCACHE,
        m_axi_x_colind_ARPROT,
        m_axi_x_colind_ARQOS,
        m_axi_x_colind_ARREGION,
        m_axi_x_colind_ARUSER,
        m_axi_x_colind_RVALID,
        m_axi_x_colind_RREADY,
        m_axi_x_colind_RDATA,
        m_axi_x_colind_RLAST,
        m_axi_x_colind_RID,
        m_axi_x_colind_RUSER,
        m_axi_x_colind_RRESP,
        m_axi_x_colind_BVALID,
        m_axi_x_colind_BREADY,
        m_axi_x_colind_BRESP,
        m_axi_x_colind_BID,
        m_axi_x_colind_BUSER,
        m_axi_x_data_AWVALID,
        m_axi_x_data_AWREADY,
        m_axi_x_data_AWADDR,
        m_axi_x_data_AWID,
        m_axi_x_data_AWLEN,
        m_axi_x_data_AWSIZE,
        m_axi_x_data_AWBURST,
        m_axi_x_data_AWLOCK,
        m_axi_x_data_AWCACHE,
        m_axi_x_data_AWPROT,
        m_axi_x_data_AWQOS,
        m_axi_x_data_AWREGION,
        m_axi_x_data_AWUSER,
        m_axi_x_data_WVALID,
        m_axi_x_data_WREADY,
        m_axi_x_data_WDATA,
        m_axi_x_data_WSTRB,
        m_axi_x_data_WLAST,
        m_axi_x_data_WID,
        m_axi_x_data_WUSER,
        m_axi_x_data_ARVALID,
        m_axi_x_data_ARREADY,
        m_axi_x_data_ARADDR,
        m_axi_x_data_ARID,
        m_axi_x_data_ARLEN,
        m_axi_x_data_ARSIZE,
        m_axi_x_data_ARBURST,
        m_axi_x_data_ARLOCK,
        m_axi_x_data_ARCACHE,
        m_axi_x_data_ARPROT,
        m_axi_x_data_ARQOS,
        m_axi_x_data_ARREGION,
        m_axi_x_data_ARUSER,
        m_axi_x_data_RVALID,
        m_axi_x_data_RREADY,
        m_axi_x_data_RDATA,
        m_axi_x_data_RLAST,
        m_axi_x_data_RID,
        m_axi_x_data_RUSER,
        m_axi_x_data_RRESP,
        m_axi_x_data_BVALID,
        m_axi_x_data_BREADY,
        m_axi_x_data_BRESP,
        m_axi_x_data_BID,
        m_axi_x_data_BUSER,
        m_axi_y_rowptr_AWVALID,
        m_axi_y_rowptr_AWREADY,
        m_axi_y_rowptr_AWADDR,
        m_axi_y_rowptr_AWID,
        m_axi_y_rowptr_AWLEN,
        m_axi_y_rowptr_AWSIZE,
        m_axi_y_rowptr_AWBURST,
        m_axi_y_rowptr_AWLOCK,
        m_axi_y_rowptr_AWCACHE,
        m_axi_y_rowptr_AWPROT,
        m_axi_y_rowptr_AWQOS,
        m_axi_y_rowptr_AWREGION,
        m_axi_y_rowptr_AWUSER,
        m_axi_y_rowptr_WVALID,
        m_axi_y_rowptr_WREADY,
        m_axi_y_rowptr_WDATA,
        m_axi_y_rowptr_WSTRB,
        m_axi_y_rowptr_WLAST,
        m_axi_y_rowptr_WID,
        m_axi_y_rowptr_WUSER,
        m_axi_y_rowptr_ARVALID,
        m_axi_y_rowptr_ARREADY,
        m_axi_y_rowptr_ARADDR,
        m_axi_y_rowptr_ARID,
        m_axi_y_rowptr_ARLEN,
        m_axi_y_rowptr_ARSIZE,
        m_axi_y_rowptr_ARBURST,
        m_axi_y_rowptr_ARLOCK,
        m_axi_y_rowptr_ARCACHE,
        m_axi_y_rowptr_ARPROT,
        m_axi_y_rowptr_ARQOS,
        m_axi_y_rowptr_ARREGION,
        m_axi_y_rowptr_ARUSER,
        m_axi_y_rowptr_RVALID,
        m_axi_y_rowptr_RREADY,
        m_axi_y_rowptr_RDATA,
        m_axi_y_rowptr_RLAST,
        m_axi_y_rowptr_RID,
        m_axi_y_rowptr_RUSER,
        m_axi_y_rowptr_RRESP,
        m_axi_y_rowptr_BVALID,
        m_axi_y_rowptr_BREADY,
        m_axi_y_rowptr_BRESP,
        m_axi_y_rowptr_BID,
        m_axi_y_rowptr_BUSER,
        m_axi_y_colind_AWVALID,
        m_axi_y_colind_AWREADY,
        m_axi_y_colind_AWADDR,
        m_axi_y_colind_AWID,
        m_axi_y_colind_AWLEN,
        m_axi_y_colind_AWSIZE,
        m_axi_y_colind_AWBURST,
        m_axi_y_colind_AWLOCK,
        m_axi_y_colind_AWCACHE,
        m_axi_y_colind_AWPROT,
        m_axi_y_colind_AWQOS,
        m_axi_y_colind_AWREGION,
        m_axi_y_colind_AWUSER,
        m_axi_y_colind_WVALID,
        m_axi_y_colind_WREADY,
        m_axi_y_colind_WDATA,
        m_axi_y_colind_WSTRB,
        m_axi_y_colind_WLAST,
        m_axi_y_colind_WID,
        m_axi_y_colind_WUSER,
        m_axi_y_colind_ARVALID,
        m_axi_y_colind_ARREADY,
        m_axi_y_colind_ARADDR,
        m_axi_y_colind_ARID,
        m_axi_y_colind_ARLEN,
        m_axi_y_colind_ARSIZE,
        m_axi_y_colind_ARBURST,
        m_axi_y_colind_ARLOCK,
        m_axi_y_colind_ARCACHE,
        m_axi_y_colind_ARPROT,
        m_axi_y_colind_ARQOS,
        m_axi_y_colind_ARREGION,
        m_axi_y_colind_ARUSER,
        m_axi_y_colind_RVALID,
        m_axi_y_colind_RREADY,
        m_axi_y_colind_RDATA,
        m_axi_y_colind_RLAST,
        m_axi_y_colind_RID,
        m_axi_y_colind_RUSER,
        m_axi_y_colind_RRESP,
        m_axi_y_colind_BVALID,
        m_axi_y_colind_BREADY,
        m_axi_y_colind_BRESP,
        m_axi_y_colind_BID,
        m_axi_y_colind_BUSER,
        m_axi_y_data_AWVALID,
        m_axi_y_data_AWREADY,
        m_axi_y_data_AWADDR,
        m_axi_y_data_AWID,
        m_axi_y_data_AWLEN,
        m_axi_y_data_AWSIZE,
        m_axi_y_data_AWBURST,
        m_axi_y_data_AWLOCK,
        m_axi_y_data_AWCACHE,
        m_axi_y_data_AWPROT,
        m_axi_y_data_AWQOS,
        m_axi_y_data_AWREGION,
        m_axi_y_data_AWUSER,
        m_axi_y_data_WVALID,
        m_axi_y_data_WREADY,
        m_axi_y_data_WDATA,
        m_axi_y_data_WSTRB,
        m_axi_y_data_WLAST,
        m_axi_y_data_WID,
        m_axi_y_data_WUSER,
        m_axi_y_data_ARVALID,
        m_axi_y_data_ARREADY,
        m_axi_y_data_ARADDR,
        m_axi_y_data_ARID,
        m_axi_y_data_ARLEN,
        m_axi_y_data_ARSIZE,
        m_axi_y_data_ARBURST,
        m_axi_y_data_ARLOCK,
        m_axi_y_data_ARCACHE,
        m_axi_y_data_ARPROT,
        m_axi_y_data_ARQOS,
        m_axi_y_data_ARREGION,
        m_axi_y_data_ARUSER,
        m_axi_y_data_RVALID,
        m_axi_y_data_RREADY,
        m_axi_y_data_RDATA,
        m_axi_y_data_RLAST,
        m_axi_y_data_RID,
        m_axi_y_data_RUSER,
        m_axi_y_data_RRESP,
        m_axi_y_data_BVALID,
        m_axi_y_data_BREADY,
        m_axi_y_data_BRESP,
        m_axi_y_data_BID,
        m_axi_y_data_BUSER,
        m_axi_z_colind_AWVALID,
        m_axi_z_colind_AWREADY,
        m_axi_z_colind_AWADDR,
        m_axi_z_colind_AWID,
        m_axi_z_colind_AWLEN,
        m_axi_z_colind_AWSIZE,
        m_axi_z_colind_AWBURST,
        m_axi_z_colind_AWLOCK,
        m_axi_z_colind_AWCACHE,
        m_axi_z_colind_AWPROT,
        m_axi_z_colind_AWQOS,
        m_axi_z_colind_AWREGION,
        m_axi_z_colind_AWUSER,
        m_axi_z_colind_WVALID,
        m_axi_z_colind_WREADY,
        m_axi_z_colind_WDATA,
        m_axi_z_colind_WSTRB,
        m_axi_z_colind_WLAST,
        m_axi_z_colind_WID,
        m_axi_z_colind_WUSER,
        m_axi_z_colind_ARVALID,
        m_axi_z_colind_ARREADY,
        m_axi_z_colind_ARADDR,
        m_axi_z_colind_ARID,
        m_axi_z_colind_ARLEN,
        m_axi_z_colind_ARSIZE,
        m_axi_z_colind_ARBURST,
        m_axi_z_colind_ARLOCK,
        m_axi_z_colind_ARCACHE,
        m_axi_z_colind_ARPROT,
        m_axi_z_colind_ARQOS,
        m_axi_z_colind_ARREGION,
        m_axi_z_colind_ARUSER,
        m_axi_z_colind_RVALID,
        m_axi_z_colind_RREADY,
        m_axi_z_colind_RDATA,
        m_axi_z_colind_RLAST,
        m_axi_z_colind_RID,
        m_axi_z_colind_RUSER,
        m_axi_z_colind_RRESP,
        m_axi_z_colind_BVALID,
        m_axi_z_colind_BREADY,
        m_axi_z_colind_BRESP,
        m_axi_z_colind_BID,
        m_axi_z_colind_BUSER,
        m_axi_z_data_AWVALID,
        m_axi_z_data_AWREADY,
        m_axi_z_data_AWADDR,
        m_axi_z_data_AWID,
        m_axi_z_data_AWLEN,
        m_axi_z_data_AWSIZE,
        m_axi_z_data_AWBURST,
        m_axi_z_data_AWLOCK,
        m_axi_z_data_AWCACHE,
        m_axi_z_data_AWPROT,
        m_axi_z_data_AWQOS,
        m_axi_z_data_AWREGION,
        m_axi_z_data_AWUSER,
        m_axi_z_data_WVALID,
        m_axi_z_data_WREADY,
        m_axi_z_data_WDATA,
        m_axi_z_data_WSTRB,
        m_axi_z_data_WLAST,
        m_axi_z_data_WID,
        m_axi_z_data_WUSER,
        m_axi_z_data_ARVALID,
        m_axi_z_data_ARREADY,
        m_axi_z_data_ARADDR,
        m_axi_z_data_ARID,
        m_axi_z_data_ARLEN,
        m_axi_z_data_ARSIZE,
        m_axi_z_data_ARBURST,
        m_axi_z_data_ARLOCK,
        m_axi_z_data_ARCACHE,
        m_axi_z_data_ARPROT,
        m_axi_z_data_ARQOS,
        m_axi_z_data_ARREGION,
        m_axi_z_data_ARUSER,
        m_axi_z_data_RVALID,
        m_axi_z_data_RREADY,
        m_axi_z_data_RDATA,
        m_axi_z_data_RLAST,
        m_axi_z_data_RID,
        m_axi_z_data_RUSER,
        m_axi_z_data_RRESP,
        m_axi_z_data_BVALID,
        m_axi_z_data_BREADY,
        m_axi_z_data_BRESP,
        m_axi_z_data_BID,
        m_axi_z_data_BUSER
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_pp0_stage0 = 74'd128;
parameter    ap_ST_fsm_state10 = 74'd256;
parameter    ap_ST_fsm_pp1_stage0 = 74'd512;
parameter    ap_ST_fsm_state13 = 74'd1024;
parameter    ap_ST_fsm_state14 = 74'd2048;
parameter    ap_ST_fsm_state15 = 74'd4096;
parameter    ap_ST_fsm_state16 = 74'd8192;
parameter    ap_ST_fsm_state17 = 74'd16384;
parameter    ap_ST_fsm_state18 = 74'd32768;
parameter    ap_ST_fsm_state19 = 74'd65536;
parameter    ap_ST_fsm_state20 = 74'd131072;
parameter    ap_ST_fsm_state21 = 74'd262144;
parameter    ap_ST_fsm_state22 = 74'd524288;
parameter    ap_ST_fsm_state23 = 74'd1048576;
parameter    ap_ST_fsm_state24 = 74'd2097152;
parameter    ap_ST_fsm_state25 = 74'd4194304;
parameter    ap_ST_fsm_state26 = 74'd8388608;
parameter    ap_ST_fsm_state27 = 74'd16777216;
parameter    ap_ST_fsm_state28 = 74'd33554432;
parameter    ap_ST_fsm_state29 = 74'd67108864;
parameter    ap_ST_fsm_state30 = 74'd134217728;
parameter    ap_ST_fsm_state31 = 74'd268435456;
parameter    ap_ST_fsm_state32 = 74'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 74'd1073741824;
parameter    ap_ST_fsm_state45 = 74'd2147483648;
parameter    ap_ST_fsm_state46 = 74'd4294967296;
parameter    ap_ST_fsm_state47 = 74'd8589934592;
parameter    ap_ST_fsm_state48 = 74'd17179869184;
parameter    ap_ST_fsm_state49 = 74'd34359738368;
parameter    ap_ST_fsm_state50 = 74'd68719476736;
parameter    ap_ST_fsm_state51 = 74'd137438953472;
parameter    ap_ST_fsm_state52 = 74'd274877906944;
parameter    ap_ST_fsm_state53 = 74'd549755813888;
parameter    ap_ST_fsm_state54 = 74'd1099511627776;
parameter    ap_ST_fsm_pp3_stage0 = 74'd2199023255552;
parameter    ap_ST_fsm_pp3_stage1 = 74'd4398046511104;
parameter    ap_ST_fsm_pp3_stage2 = 74'd8796093022208;
parameter    ap_ST_fsm_pp3_stage3 = 74'd17592186044416;
parameter    ap_ST_fsm_pp3_stage4 = 74'd35184372088832;
parameter    ap_ST_fsm_pp3_stage5 = 74'd70368744177664;
parameter    ap_ST_fsm_pp3_stage6 = 74'd140737488355328;
parameter    ap_ST_fsm_pp3_stage7 = 74'd281474976710656;
parameter    ap_ST_fsm_pp3_stage8 = 74'd562949953421312;
parameter    ap_ST_fsm_state66 = 74'd1125899906842624;
parameter    ap_ST_fsm_state67 = 74'd2251799813685248;
parameter    ap_ST_fsm_state68 = 74'd4503599627370496;
parameter    ap_ST_fsm_state69 = 74'd9007199254740992;
parameter    ap_ST_fsm_state70 = 74'd18014398509481984;
parameter    ap_ST_fsm_state71 = 74'd36028797018963968;
parameter    ap_ST_fsm_state72 = 74'd72057594037927936;
parameter    ap_ST_fsm_state73 = 74'd144115188075855872;
parameter    ap_ST_fsm_state74 = 74'd288230376151711744;
parameter    ap_ST_fsm_state75 = 74'd576460752303423488;
parameter    ap_ST_fsm_state76 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state77 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state78 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state79 = 74'd9223372036854775808;
parameter    ap_ST_fsm_pp4_stage0 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state89 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state90 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state91 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state92 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state93 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state94 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state95 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_pp5_stage0 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state98 = 74'd9444732965739290427392;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_z_rowptr_AWVALID;
input   m_axi_z_rowptr_AWREADY;
output  [63:0] m_axi_z_rowptr_AWADDR;
output  [0:0] m_axi_z_rowptr_AWID;
output  [31:0] m_axi_z_rowptr_AWLEN;
output  [2:0] m_axi_z_rowptr_AWSIZE;
output  [1:0] m_axi_z_rowptr_AWBURST;
output  [1:0] m_axi_z_rowptr_AWLOCK;
output  [3:0] m_axi_z_rowptr_AWCACHE;
output  [2:0] m_axi_z_rowptr_AWPROT;
output  [3:0] m_axi_z_rowptr_AWQOS;
output  [3:0] m_axi_z_rowptr_AWREGION;
output  [0:0] m_axi_z_rowptr_AWUSER;
output   m_axi_z_rowptr_WVALID;
input   m_axi_z_rowptr_WREADY;
output  [31:0] m_axi_z_rowptr_WDATA;
output  [3:0] m_axi_z_rowptr_WSTRB;
output   m_axi_z_rowptr_WLAST;
output  [0:0] m_axi_z_rowptr_WID;
output  [0:0] m_axi_z_rowptr_WUSER;
output   m_axi_z_rowptr_ARVALID;
input   m_axi_z_rowptr_ARREADY;
output  [63:0] m_axi_z_rowptr_ARADDR;
output  [0:0] m_axi_z_rowptr_ARID;
output  [31:0] m_axi_z_rowptr_ARLEN;
output  [2:0] m_axi_z_rowptr_ARSIZE;
output  [1:0] m_axi_z_rowptr_ARBURST;
output  [1:0] m_axi_z_rowptr_ARLOCK;
output  [3:0] m_axi_z_rowptr_ARCACHE;
output  [2:0] m_axi_z_rowptr_ARPROT;
output  [3:0] m_axi_z_rowptr_ARQOS;
output  [3:0] m_axi_z_rowptr_ARREGION;
output  [0:0] m_axi_z_rowptr_ARUSER;
input   m_axi_z_rowptr_RVALID;
output   m_axi_z_rowptr_RREADY;
input  [31:0] m_axi_z_rowptr_RDATA;
input   m_axi_z_rowptr_RLAST;
input  [0:0] m_axi_z_rowptr_RID;
input  [0:0] m_axi_z_rowptr_RUSER;
input  [1:0] m_axi_z_rowptr_RRESP;
input   m_axi_z_rowptr_BVALID;
output   m_axi_z_rowptr_BREADY;
input  [1:0] m_axi_z_rowptr_BRESP;
input  [0:0] m_axi_z_rowptr_BID;
input  [0:0] m_axi_z_rowptr_BUSER;
output   m_axi_x_rowptr_AWVALID;
input   m_axi_x_rowptr_AWREADY;
output  [63:0] m_axi_x_rowptr_AWADDR;
output  [0:0] m_axi_x_rowptr_AWID;
output  [31:0] m_axi_x_rowptr_AWLEN;
output  [2:0] m_axi_x_rowptr_AWSIZE;
output  [1:0] m_axi_x_rowptr_AWBURST;
output  [1:0] m_axi_x_rowptr_AWLOCK;
output  [3:0] m_axi_x_rowptr_AWCACHE;
output  [2:0] m_axi_x_rowptr_AWPROT;
output  [3:0] m_axi_x_rowptr_AWQOS;
output  [3:0] m_axi_x_rowptr_AWREGION;
output  [0:0] m_axi_x_rowptr_AWUSER;
output   m_axi_x_rowptr_WVALID;
input   m_axi_x_rowptr_WREADY;
output  [31:0] m_axi_x_rowptr_WDATA;
output  [3:0] m_axi_x_rowptr_WSTRB;
output   m_axi_x_rowptr_WLAST;
output  [0:0] m_axi_x_rowptr_WID;
output  [0:0] m_axi_x_rowptr_WUSER;
output   m_axi_x_rowptr_ARVALID;
input   m_axi_x_rowptr_ARREADY;
output  [63:0] m_axi_x_rowptr_ARADDR;
output  [0:0] m_axi_x_rowptr_ARID;
output  [31:0] m_axi_x_rowptr_ARLEN;
output  [2:0] m_axi_x_rowptr_ARSIZE;
output  [1:0] m_axi_x_rowptr_ARBURST;
output  [1:0] m_axi_x_rowptr_ARLOCK;
output  [3:0] m_axi_x_rowptr_ARCACHE;
output  [2:0] m_axi_x_rowptr_ARPROT;
output  [3:0] m_axi_x_rowptr_ARQOS;
output  [3:0] m_axi_x_rowptr_ARREGION;
output  [0:0] m_axi_x_rowptr_ARUSER;
input   m_axi_x_rowptr_RVALID;
output   m_axi_x_rowptr_RREADY;
input  [31:0] m_axi_x_rowptr_RDATA;
input   m_axi_x_rowptr_RLAST;
input  [0:0] m_axi_x_rowptr_RID;
input  [0:0] m_axi_x_rowptr_RUSER;
input  [1:0] m_axi_x_rowptr_RRESP;
input   m_axi_x_rowptr_BVALID;
output   m_axi_x_rowptr_BREADY;
input  [1:0] m_axi_x_rowptr_BRESP;
input  [0:0] m_axi_x_rowptr_BID;
input  [0:0] m_axi_x_rowptr_BUSER;
output   m_axi_x_colind_AWVALID;
input   m_axi_x_colind_AWREADY;
output  [63:0] m_axi_x_colind_AWADDR;
output  [0:0] m_axi_x_colind_AWID;
output  [31:0] m_axi_x_colind_AWLEN;
output  [2:0] m_axi_x_colind_AWSIZE;
output  [1:0] m_axi_x_colind_AWBURST;
output  [1:0] m_axi_x_colind_AWLOCK;
output  [3:0] m_axi_x_colind_AWCACHE;
output  [2:0] m_axi_x_colind_AWPROT;
output  [3:0] m_axi_x_colind_AWQOS;
output  [3:0] m_axi_x_colind_AWREGION;
output  [0:0] m_axi_x_colind_AWUSER;
output   m_axi_x_colind_WVALID;
input   m_axi_x_colind_WREADY;
output  [31:0] m_axi_x_colind_WDATA;
output  [3:0] m_axi_x_colind_WSTRB;
output   m_axi_x_colind_WLAST;
output  [0:0] m_axi_x_colind_WID;
output  [0:0] m_axi_x_colind_WUSER;
output   m_axi_x_colind_ARVALID;
input   m_axi_x_colind_ARREADY;
output  [63:0] m_axi_x_colind_ARADDR;
output  [0:0] m_axi_x_colind_ARID;
output  [31:0] m_axi_x_colind_ARLEN;
output  [2:0] m_axi_x_colind_ARSIZE;
output  [1:0] m_axi_x_colind_ARBURST;
output  [1:0] m_axi_x_colind_ARLOCK;
output  [3:0] m_axi_x_colind_ARCACHE;
output  [2:0] m_axi_x_colind_ARPROT;
output  [3:0] m_axi_x_colind_ARQOS;
output  [3:0] m_axi_x_colind_ARREGION;
output  [0:0] m_axi_x_colind_ARUSER;
input   m_axi_x_colind_RVALID;
output   m_axi_x_colind_RREADY;
input  [31:0] m_axi_x_colind_RDATA;
input   m_axi_x_colind_RLAST;
input  [0:0] m_axi_x_colind_RID;
input  [0:0] m_axi_x_colind_RUSER;
input  [1:0] m_axi_x_colind_RRESP;
input   m_axi_x_colind_BVALID;
output   m_axi_x_colind_BREADY;
input  [1:0] m_axi_x_colind_BRESP;
input  [0:0] m_axi_x_colind_BID;
input  [0:0] m_axi_x_colind_BUSER;
output   m_axi_x_data_AWVALID;
input   m_axi_x_data_AWREADY;
output  [63:0] m_axi_x_data_AWADDR;
output  [0:0] m_axi_x_data_AWID;
output  [31:0] m_axi_x_data_AWLEN;
output  [2:0] m_axi_x_data_AWSIZE;
output  [1:0] m_axi_x_data_AWBURST;
output  [1:0] m_axi_x_data_AWLOCK;
output  [3:0] m_axi_x_data_AWCACHE;
output  [2:0] m_axi_x_data_AWPROT;
output  [3:0] m_axi_x_data_AWQOS;
output  [3:0] m_axi_x_data_AWREGION;
output  [0:0] m_axi_x_data_AWUSER;
output   m_axi_x_data_WVALID;
input   m_axi_x_data_WREADY;
output  [31:0] m_axi_x_data_WDATA;
output  [3:0] m_axi_x_data_WSTRB;
output   m_axi_x_data_WLAST;
output  [0:0] m_axi_x_data_WID;
output  [0:0] m_axi_x_data_WUSER;
output   m_axi_x_data_ARVALID;
input   m_axi_x_data_ARREADY;
output  [63:0] m_axi_x_data_ARADDR;
output  [0:0] m_axi_x_data_ARID;
output  [31:0] m_axi_x_data_ARLEN;
output  [2:0] m_axi_x_data_ARSIZE;
output  [1:0] m_axi_x_data_ARBURST;
output  [1:0] m_axi_x_data_ARLOCK;
output  [3:0] m_axi_x_data_ARCACHE;
output  [2:0] m_axi_x_data_ARPROT;
output  [3:0] m_axi_x_data_ARQOS;
output  [3:0] m_axi_x_data_ARREGION;
output  [0:0] m_axi_x_data_ARUSER;
input   m_axi_x_data_RVALID;
output   m_axi_x_data_RREADY;
input  [31:0] m_axi_x_data_RDATA;
input   m_axi_x_data_RLAST;
input  [0:0] m_axi_x_data_RID;
input  [0:0] m_axi_x_data_RUSER;
input  [1:0] m_axi_x_data_RRESP;
input   m_axi_x_data_BVALID;
output   m_axi_x_data_BREADY;
input  [1:0] m_axi_x_data_BRESP;
input  [0:0] m_axi_x_data_BID;
input  [0:0] m_axi_x_data_BUSER;
output   m_axi_y_rowptr_AWVALID;
input   m_axi_y_rowptr_AWREADY;
output  [63:0] m_axi_y_rowptr_AWADDR;
output  [0:0] m_axi_y_rowptr_AWID;
output  [31:0] m_axi_y_rowptr_AWLEN;
output  [2:0] m_axi_y_rowptr_AWSIZE;
output  [1:0] m_axi_y_rowptr_AWBURST;
output  [1:0] m_axi_y_rowptr_AWLOCK;
output  [3:0] m_axi_y_rowptr_AWCACHE;
output  [2:0] m_axi_y_rowptr_AWPROT;
output  [3:0] m_axi_y_rowptr_AWQOS;
output  [3:0] m_axi_y_rowptr_AWREGION;
output  [0:0] m_axi_y_rowptr_AWUSER;
output   m_axi_y_rowptr_WVALID;
input   m_axi_y_rowptr_WREADY;
output  [31:0] m_axi_y_rowptr_WDATA;
output  [3:0] m_axi_y_rowptr_WSTRB;
output   m_axi_y_rowptr_WLAST;
output  [0:0] m_axi_y_rowptr_WID;
output  [0:0] m_axi_y_rowptr_WUSER;
output   m_axi_y_rowptr_ARVALID;
input   m_axi_y_rowptr_ARREADY;
output  [63:0] m_axi_y_rowptr_ARADDR;
output  [0:0] m_axi_y_rowptr_ARID;
output  [31:0] m_axi_y_rowptr_ARLEN;
output  [2:0] m_axi_y_rowptr_ARSIZE;
output  [1:0] m_axi_y_rowptr_ARBURST;
output  [1:0] m_axi_y_rowptr_ARLOCK;
output  [3:0] m_axi_y_rowptr_ARCACHE;
output  [2:0] m_axi_y_rowptr_ARPROT;
output  [3:0] m_axi_y_rowptr_ARQOS;
output  [3:0] m_axi_y_rowptr_ARREGION;
output  [0:0] m_axi_y_rowptr_ARUSER;
input   m_axi_y_rowptr_RVALID;
output   m_axi_y_rowptr_RREADY;
input  [31:0] m_axi_y_rowptr_RDATA;
input   m_axi_y_rowptr_RLAST;
input  [0:0] m_axi_y_rowptr_RID;
input  [0:0] m_axi_y_rowptr_RUSER;
input  [1:0] m_axi_y_rowptr_RRESP;
input   m_axi_y_rowptr_BVALID;
output   m_axi_y_rowptr_BREADY;
input  [1:0] m_axi_y_rowptr_BRESP;
input  [0:0] m_axi_y_rowptr_BID;
input  [0:0] m_axi_y_rowptr_BUSER;
output   m_axi_y_colind_AWVALID;
input   m_axi_y_colind_AWREADY;
output  [63:0] m_axi_y_colind_AWADDR;
output  [0:0] m_axi_y_colind_AWID;
output  [31:0] m_axi_y_colind_AWLEN;
output  [2:0] m_axi_y_colind_AWSIZE;
output  [1:0] m_axi_y_colind_AWBURST;
output  [1:0] m_axi_y_colind_AWLOCK;
output  [3:0] m_axi_y_colind_AWCACHE;
output  [2:0] m_axi_y_colind_AWPROT;
output  [3:0] m_axi_y_colind_AWQOS;
output  [3:0] m_axi_y_colind_AWREGION;
output  [0:0] m_axi_y_colind_AWUSER;
output   m_axi_y_colind_WVALID;
input   m_axi_y_colind_WREADY;
output  [31:0] m_axi_y_colind_WDATA;
output  [3:0] m_axi_y_colind_WSTRB;
output   m_axi_y_colind_WLAST;
output  [0:0] m_axi_y_colind_WID;
output  [0:0] m_axi_y_colind_WUSER;
output   m_axi_y_colind_ARVALID;
input   m_axi_y_colind_ARREADY;
output  [63:0] m_axi_y_colind_ARADDR;
output  [0:0] m_axi_y_colind_ARID;
output  [31:0] m_axi_y_colind_ARLEN;
output  [2:0] m_axi_y_colind_ARSIZE;
output  [1:0] m_axi_y_colind_ARBURST;
output  [1:0] m_axi_y_colind_ARLOCK;
output  [3:0] m_axi_y_colind_ARCACHE;
output  [2:0] m_axi_y_colind_ARPROT;
output  [3:0] m_axi_y_colind_ARQOS;
output  [3:0] m_axi_y_colind_ARREGION;
output  [0:0] m_axi_y_colind_ARUSER;
input   m_axi_y_colind_RVALID;
output   m_axi_y_colind_RREADY;
input  [31:0] m_axi_y_colind_RDATA;
input   m_axi_y_colind_RLAST;
input  [0:0] m_axi_y_colind_RID;
input  [0:0] m_axi_y_colind_RUSER;
input  [1:0] m_axi_y_colind_RRESP;
input   m_axi_y_colind_BVALID;
output   m_axi_y_colind_BREADY;
input  [1:0] m_axi_y_colind_BRESP;
input  [0:0] m_axi_y_colind_BID;
input  [0:0] m_axi_y_colind_BUSER;
output   m_axi_y_data_AWVALID;
input   m_axi_y_data_AWREADY;
output  [63:0] m_axi_y_data_AWADDR;
output  [0:0] m_axi_y_data_AWID;
output  [31:0] m_axi_y_data_AWLEN;
output  [2:0] m_axi_y_data_AWSIZE;
output  [1:0] m_axi_y_data_AWBURST;
output  [1:0] m_axi_y_data_AWLOCK;
output  [3:0] m_axi_y_data_AWCACHE;
output  [2:0] m_axi_y_data_AWPROT;
output  [3:0] m_axi_y_data_AWQOS;
output  [3:0] m_axi_y_data_AWREGION;
output  [0:0] m_axi_y_data_AWUSER;
output   m_axi_y_data_WVALID;
input   m_axi_y_data_WREADY;
output  [31:0] m_axi_y_data_WDATA;
output  [3:0] m_axi_y_data_WSTRB;
output   m_axi_y_data_WLAST;
output  [0:0] m_axi_y_data_WID;
output  [0:0] m_axi_y_data_WUSER;
output   m_axi_y_data_ARVALID;
input   m_axi_y_data_ARREADY;
output  [63:0] m_axi_y_data_ARADDR;
output  [0:0] m_axi_y_data_ARID;
output  [31:0] m_axi_y_data_ARLEN;
output  [2:0] m_axi_y_data_ARSIZE;
output  [1:0] m_axi_y_data_ARBURST;
output  [1:0] m_axi_y_data_ARLOCK;
output  [3:0] m_axi_y_data_ARCACHE;
output  [2:0] m_axi_y_data_ARPROT;
output  [3:0] m_axi_y_data_ARQOS;
output  [3:0] m_axi_y_data_ARREGION;
output  [0:0] m_axi_y_data_ARUSER;
input   m_axi_y_data_RVALID;
output   m_axi_y_data_RREADY;
input  [31:0] m_axi_y_data_RDATA;
input   m_axi_y_data_RLAST;
input  [0:0] m_axi_y_data_RID;
input  [0:0] m_axi_y_data_RUSER;
input  [1:0] m_axi_y_data_RRESP;
input   m_axi_y_data_BVALID;
output   m_axi_y_data_BREADY;
input  [1:0] m_axi_y_data_BRESP;
input  [0:0] m_axi_y_data_BID;
input  [0:0] m_axi_y_data_BUSER;
output   m_axi_z_colind_AWVALID;
input   m_axi_z_colind_AWREADY;
output  [63:0] m_axi_z_colind_AWADDR;
output  [0:0] m_axi_z_colind_AWID;
output  [31:0] m_axi_z_colind_AWLEN;
output  [2:0] m_axi_z_colind_AWSIZE;
output  [1:0] m_axi_z_colind_AWBURST;
output  [1:0] m_axi_z_colind_AWLOCK;
output  [3:0] m_axi_z_colind_AWCACHE;
output  [2:0] m_axi_z_colind_AWPROT;
output  [3:0] m_axi_z_colind_AWQOS;
output  [3:0] m_axi_z_colind_AWREGION;
output  [0:0] m_axi_z_colind_AWUSER;
output   m_axi_z_colind_WVALID;
input   m_axi_z_colind_WREADY;
output  [31:0] m_axi_z_colind_WDATA;
output  [3:0] m_axi_z_colind_WSTRB;
output   m_axi_z_colind_WLAST;
output  [0:0] m_axi_z_colind_WID;
output  [0:0] m_axi_z_colind_WUSER;
output   m_axi_z_colind_ARVALID;
input   m_axi_z_colind_ARREADY;
output  [63:0] m_axi_z_colind_ARADDR;
output  [0:0] m_axi_z_colind_ARID;
output  [31:0] m_axi_z_colind_ARLEN;
output  [2:0] m_axi_z_colind_ARSIZE;
output  [1:0] m_axi_z_colind_ARBURST;
output  [1:0] m_axi_z_colind_ARLOCK;
output  [3:0] m_axi_z_colind_ARCACHE;
output  [2:0] m_axi_z_colind_ARPROT;
output  [3:0] m_axi_z_colind_ARQOS;
output  [3:0] m_axi_z_colind_ARREGION;
output  [0:0] m_axi_z_colind_ARUSER;
input   m_axi_z_colind_RVALID;
output   m_axi_z_colind_RREADY;
input  [31:0] m_axi_z_colind_RDATA;
input   m_axi_z_colind_RLAST;
input  [0:0] m_axi_z_colind_RID;
input  [0:0] m_axi_z_colind_RUSER;
input  [1:0] m_axi_z_colind_RRESP;
input   m_axi_z_colind_BVALID;
output   m_axi_z_colind_BREADY;
input  [1:0] m_axi_z_colind_BRESP;
input  [0:0] m_axi_z_colind_BID;
input  [0:0] m_axi_z_colind_BUSER;
output   m_axi_z_data_AWVALID;
input   m_axi_z_data_AWREADY;
output  [63:0] m_axi_z_data_AWADDR;
output  [0:0] m_axi_z_data_AWID;
output  [31:0] m_axi_z_data_AWLEN;
output  [2:0] m_axi_z_data_AWSIZE;
output  [1:0] m_axi_z_data_AWBURST;
output  [1:0] m_axi_z_data_AWLOCK;
output  [3:0] m_axi_z_data_AWCACHE;
output  [2:0] m_axi_z_data_AWPROT;
output  [3:0] m_axi_z_data_AWQOS;
output  [3:0] m_axi_z_data_AWREGION;
output  [0:0] m_axi_z_data_AWUSER;
output   m_axi_z_data_WVALID;
input   m_axi_z_data_WREADY;
output  [31:0] m_axi_z_data_WDATA;
output  [3:0] m_axi_z_data_WSTRB;
output   m_axi_z_data_WLAST;
output  [0:0] m_axi_z_data_WID;
output  [0:0] m_axi_z_data_WUSER;
output   m_axi_z_data_ARVALID;
input   m_axi_z_data_ARREADY;
output  [63:0] m_axi_z_data_ARADDR;
output  [0:0] m_axi_z_data_ARID;
output  [31:0] m_axi_z_data_ARLEN;
output  [2:0] m_axi_z_data_ARSIZE;
output  [1:0] m_axi_z_data_ARBURST;
output  [1:0] m_axi_z_data_ARLOCK;
output  [3:0] m_axi_z_data_ARCACHE;
output  [2:0] m_axi_z_data_ARPROT;
output  [3:0] m_axi_z_data_ARQOS;
output  [3:0] m_axi_z_data_ARREGION;
output  [0:0] m_axi_z_data_ARUSER;
input   m_axi_z_data_RVALID;
output   m_axi_z_data_RREADY;
input  [31:0] m_axi_z_data_RDATA;
input   m_axi_z_data_RLAST;
input  [0:0] m_axi_z_data_RID;
input  [0:0] m_axi_z_data_RUSER;
input  [1:0] m_axi_z_data_RRESP;
input   m_axi_z_data_BVALID;
output   m_axi_z_data_BREADY;
input  [1:0] m_axi_z_data_BRESP;
input  [0:0] m_axi_z_data_BID;
input  [0:0] m_axi_z_data_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_z_rowptr_AWVALID;
reg[63:0] m_axi_z_rowptr_AWADDR;
reg m_axi_z_rowptr_WVALID;
reg[31:0] m_axi_z_rowptr_WDATA;
reg m_axi_z_rowptr_ARVALID;
reg m_axi_z_rowptr_RREADY;
reg m_axi_z_rowptr_BREADY;
reg m_axi_x_rowptr_ARVALID;
reg m_axi_x_rowptr_RREADY;
reg m_axi_x_colind_ARVALID;
reg m_axi_x_colind_RREADY;
reg m_axi_x_data_ARVALID;
reg m_axi_x_data_RREADY;
reg m_axi_y_rowptr_ARVALID;
reg m_axi_y_rowptr_RREADY;
reg m_axi_y_colind_ARVALID;
reg m_axi_y_colind_RREADY;
reg m_axi_y_data_ARVALID;
reg m_axi_y_data_RREADY;
reg m_axi_z_colind_AWVALID;
reg m_axi_z_colind_WVALID;
reg m_axi_z_colind_BREADY;
reg m_axi_z_data_AWVALID;
reg m_axi_z_data_WVALID;
reg m_axi_z_data_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    z_rowptr_blk_n_AW;
reg    z_rowptr_blk_n_W;
wire    ap_CS_fsm_state2;
reg    z_rowptr_blk_n_B;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state95;
reg    z_rowptr_blk_n_AR;
wire    ap_CS_fsm_state26;
reg   [0:0] icmp_ln114_reg_1991;
reg    z_rowptr_blk_n_R;
wire    ap_CS_fsm_state78;
reg    x_rowptr_blk_n_AR;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln112_reg_1916;
reg    x_rowptr_blk_n_R;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    x_colind_blk_n_AR;
reg   [0:0] cmp1_i_reg_1976;
reg    x_colind_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln24_reg_2021;
reg    x_data_blk_n_AR;
reg    ap_enable_reg_pp2_iter3;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter2_reg;
reg   [0:0] icmp_ln27_reg_2035;
reg    x_data_blk_n_R;
reg    ap_enable_reg_pp2_iter10;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter9_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter9_reg;
reg    y_rowptr_blk_n_AR;
wire    ap_CS_fsm_state46;
reg    y_rowptr_blk_n_R;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
reg    y_colind_blk_n_AR;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage1;
reg   [0:0] icmp_ln9_reg_2070;
reg    y_colind_blk_n_R;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_pp3_stage8;
reg    y_data_blk_n_AR;
reg    y_data_blk_n_R;
reg    z_colind_blk_n_AW;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln60_reg_2278;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter1_reg;
reg   [0:0] icmp_ln1499_reg_2297;
reg    z_colind_blk_n_W;
reg    ap_enable_reg_pp4_iter3;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter2_reg;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter2_reg;
reg    z_colind_blk_n_B;
reg    ap_enable_reg_pp4_iter8;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter7_reg;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter7_reg;
reg    z_data_blk_n_AW;
reg    z_data_blk_n_W;
reg    z_data_blk_n_B;
reg   [2:0] idx_i3_reg_316;
reg   [2:0] idx_i_reg_327;
reg   [63:0] j_4_reg_372;
reg   [63:0] j_4_reg_372_pp2_iter1_reg;
wire    ap_block_state33_pp2_stage0_iter0;
reg    ap_block_state34_pp2_stage0_iter1;
wire    ap_block_state35_pp2_stage0_iter2;
wire    ap_block_state36_pp2_stage0_iter3;
reg    ap_predicate_op233_readreq_state36;
reg    ap_block_state36_io;
wire    ap_block_state37_pp2_stage0_iter4;
wire    ap_block_state38_pp2_stage0_iter5;
wire    ap_block_state39_pp2_stage0_iter6;
wire    ap_block_state40_pp2_stage0_iter7;
wire    ap_block_state41_pp2_stage0_iter8;
wire    ap_block_state42_pp2_stage0_iter9;
reg    ap_predicate_op240_read_state43;
reg    ap_block_state43_pp2_stage0_iter10;
wire    ap_block_state44_pp2_stage0_iter11;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] extracted_scalar_V_2_reg_382;
reg   [0:0] found_reg_392;
reg   [2:0] i_reg_441;
reg  signed [31:0] j_7_reg_453;
reg   [159:0] row_data_M_elems_V_read_assign_reg_463;
reg   [2:0] i_4_reg_496;
reg   [2:0] i_4_reg_496_pp4_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state80_pp4_stage0_iter0;
wire    ap_block_state81_pp4_stage0_iter1;
wire    ap_block_state82_pp4_stage0_iter2;
reg    ap_predicate_op446_writereq_state82;
reg    ap_predicate_op448_writereq_state82;
reg    ap_block_state82_io;
wire    ap_block_state83_pp4_stage0_iter3;
reg    ap_predicate_op454_write_state83;
reg    ap_predicate_op455_write_state83;
reg    ap_block_state83_io;
wire    ap_block_state84_pp4_stage0_iter4;
wire    ap_block_state85_pp4_stage0_iter5;
wire    ap_block_state86_pp4_stage0_iter6;
wire    ap_block_state87_pp4_stage0_iter7;
reg    ap_predicate_op464_writeresp_state88;
reg    ap_predicate_op465_writeresp_state88;
reg    ap_block_state88_pp4_stage0_iter8;
reg    ap_block_pp4_stage0_11001;
reg   [2:0] i_4_reg_496_pp4_iter2_reg;
reg  signed [31:0] j_2_reg_508;
reg   [31:0] j_5_reg_519;
reg   [2:0] idx_reg_531;
wire   [2:0] add_ln69_fu_554_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln69_fu_560_p2;
reg   [0:0] icmp_ln69_reg_1838;
wire   [7:0] shl_ln_fu_566_p3;
reg   [7:0] shl_ln_reg_1842;
wire   [7:0] empty_46_fu_574_p2;
reg   [7:0] empty_46_reg_1848;
wire   [0:0] icmp_ln71_fu_580_p2;
reg   [0:0] icmp_ln71_reg_1854;
wire   [2:0] add_ln69_1_fu_664_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln69_1_fu_670_p2;
reg   [0:0] icmp_ln69_1_reg_1872;
wire   [7:0] shl_ln71_1_fu_676_p3;
reg   [7:0] shl_ln71_1_reg_1876;
wire   [7:0] empty_48_fu_684_p2;
reg   [7:0] empty_48_reg_1882;
wire   [0:0] icmp_ln71_1_fu_690_p2;
reg   [0:0] icmp_ln71_1_reg_1888;
wire   [0:0] icmp_ln112_fu_789_p2;
wire    ap_CS_fsm_state14;
wire   [2:0] indvars_iv_next193_fu_795_p2;
reg   [2:0] indvars_iv_next193_reg_1920;
reg   [159:0] buffer_row_data_M_elems_V_1_load_reg_1926;
wire   [63:0] zext_ln108_fu_801_p1;
reg   [63:0] zext_ln108_reg_1931;
reg  signed [31:0] start_idx_1_reg_1942;
reg  signed [31:0] end_idx_reg_1949;
wire  signed [63:0] sext_ln114_fu_812_p1;
reg  signed [63:0] sext_ln114_reg_1956;
wire    ap_CS_fsm_state24;
wire   [63:0] indvars_iv_next193_cast_fu_815_p1;
reg   [63:0] indvars_iv_next193_cast_reg_1961;
wire   [31:0] sub_ln24_fu_818_p2;
reg   [31:0] sub_ln24_reg_1966;
wire  signed [63:0] sext_ln114_1_fu_822_p1;
reg  signed [63:0] sext_ln114_1_reg_1971;
wire   [0:0] cmp1_i_fu_825_p2;
reg   [63:0] x_colind_addr_reg_1980;
wire   [2:0] add_ln114_fu_835_p2;
reg   [2:0] add_ln114_reg_1986;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln114_fu_841_p2;
reg   [31:0] extracted_scalar_V_1_reg_1995;
reg   [159:0] extracted_row_data_M_elems_V_1_load_reg_2000;
wire   [31:0] zext_ln114_fu_853_p1;
reg   [31:0] zext_ln114_reg_2005;
wire   [63:0] zext_ln114_1_fu_857_p1;
reg   [63:0] zext_ln114_1_reg_2010;
wire   [0:0] icmp_ln24_fu_867_p2;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter1_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter3_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter4_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter5_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter6_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter7_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter8_reg;
reg   [0:0] icmp_ln24_reg_2021_pp2_iter10_reg;
wire   [63:0] add_ln24_fu_872_p2;
reg   [63:0] add_ln24_reg_2025;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] col_idx_1_reg_2030;
wire   [0:0] icmp_ln27_fu_878_p2;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter3_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter4_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter5_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter6_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter7_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter8_reg;
reg   [0:0] icmp_ln27_reg_2035_pp2_iter10_reg;
reg   [63:0] x_data_addr_reg_2039;
reg   [31:0] extracted_scalar_V_3_reg_2045;
wire   [0:0] icmp_ln1499_1_fu_888_p2;
reg   [0:0] icmp_ln1499_1_reg_2050;
wire    ap_CS_fsm_state45;
reg   [63:0] y_rowptr_addr_reg_2054;
reg   [31:0] start_idx_2_reg_2060;
reg   [31:0] end_idx_1_reg_2065;
wire   [0:0] icmp_ln9_fu_899_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state55_pp3_stage0_iter0;
wire    ap_block_state64_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln9_reg_2070_pp3_iter1_reg;
wire    ap_block_state56_pp3_stage1_iter0;
reg    ap_block_state56_io;
wire    ap_block_state65_pp3_stage1_iter1;
reg    ap_block_pp3_stage1_11001;
wire   [0:0] icmp_ln13_fu_923_p2;
reg   [0:0] icmp_ln13_reg_2086;
wire   [2:0] add_ln9_fu_928_p2;
reg   [2:0] add_ln9_reg_2091;
wire    ap_CS_fsm_pp3_stage5;
wire    ap_block_state60_pp3_stage5_iter0;
wire    ap_block_pp3_stage5_11001;
reg   [31:0] col_idx_2_reg_2096;
reg    ap_block_state63_pp3_stage8_iter0;
reg    ap_block_pp3_stage8_11001;
reg   [31:0] y_data_addr_read_reg_2101;
wire   [0:0] and_ln13_fu_943_p2;
reg   [0:0] and_ln13_reg_2106;
wire   [7:0] shl_ln1_fu_948_p3;
reg   [7:0] shl_ln1_reg_2111;
wire   [0:0] icmp_ln13_2_fu_962_p2;
reg   [0:0] icmp_ln13_2_reg_2116;
wire   [7:0] sub_ln13_fu_968_p2;
reg   [7:0] sub_ln13_reg_2122;
wire   [159:0] and_ln13_1_fu_1016_p2;
reg   [159:0] and_ln13_1_reg_2127;
wire   [31:0] j_9_fu_1028_p3;
reg   [31:0] j_9_reg_2133;
reg    ap_enable_reg_pp3_iter1;
wire   [159:0] extracted_row_data_M_elems_V_3_fu_1094_p2;
wire   [2:0] add_ln69_3_fu_1100_p2;
reg   [2:0] add_ln69_3_reg_2149;
wire    ap_CS_fsm_state67;
wire   [7:0] shl_ln71_3_fu_1112_p3;
reg   [7:0] shl_ln71_3_reg_2157;
wire   [0:0] icmp_ln69_3_fu_1106_p2;
wire   [7:0] empty_55_fu_1120_p2;
reg   [7:0] empty_55_reg_2164;
wire   [0:0] icmp_ln71_3_fu_1126_p2;
reg   [0:0] icmp_ln71_3_reg_2170;
wire   [7:0] sub_ln71_3_fu_1132_p2;
reg   [7:0] sub_ln71_3_reg_2178;
reg   [31:0] trunc_ln_reg_2233;
wire    ap_CS_fsm_state69;
reg   [31:0] trunc_ln708_1_reg_2239;
reg   [31:0] trunc_ln708_2_reg_2245;
reg   [31:0] trunc_ln708_3_reg_2251;
reg   [31:0] trunc_ln708_4_reg_2257;
wire   [159:0] buffer_row_data_M_elems_V_5_fu_1531_p6;
wire    ap_CS_fsm_state70;
reg   [31:0] start_idx_reg_2268;
wire   [2:0] add_ln60_fu_1555_p2;
reg   [2:0] add_ln60_reg_2273;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln60_fu_1561_p2;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter3_reg;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter4_reg;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter5_reg;
reg   [0:0] icmp_ln60_reg_2278_pp4_iter6_reg;
wire   [7:0] sub_ln1499_3_fu_1639_p2;
reg   [7:0] sub_ln1499_3_reg_2282;
wire   [159:0] lshr_ln1499_fu_1649_p2;
reg   [159:0] lshr_ln1499_reg_2287;
wire   [31:0] trunc_ln1499_fu_1669_p1;
reg   [31:0] trunc_ln1499_reg_2292;
reg   [31:0] trunc_ln1499_reg_2292_pp4_iter2_reg;
wire   [0:0] icmp_ln1499_fu_1673_p2;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter3_reg;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter4_reg;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter5_reg;
reg   [0:0] icmp_ln1499_reg_2297_pp4_iter6_reg;
wire   [2:0] add_ln69_2_fu_1715_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state96_pp5_stage0_iter0;
wire    ap_block_state97_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln69_2_fu_1721_p2;
reg   [0:0] icmp_ln69_2_reg_2324;
wire   [7:0] shl_ln71_2_fu_1727_p3;
reg   [7:0] shl_ln71_2_reg_2328;
wire   [7:0] empty_60_fu_1735_p2;
reg   [7:0] empty_60_reg_2333;
wire   [0:0] icmp_ln71_2_fu_1741_p2;
reg   [0:0] icmp_ln71_2_reg_2338;
wire   [7:0] sub_ln71_2_fu_1755_p2;
reg   [7:0] sub_ln71_2_reg_2344;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state10;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state32;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter11;
wire    ap_block_pp3_stage5_subdone;
reg    ap_condition_pp3_exit_iter0_state60;
reg    ap_block_pp3_stage8_subdone;
wire    ap_CS_fsm_state79;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_enable_reg_pp4_iter1;
reg    ap_condition_pp4_exit_iter2_state82;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state96;
reg    ap_enable_reg_pp5_iter1;
reg   [2:0] i_3_reg_338;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state13;
reg   [2:0] k_reg_350;
wire    ap_CS_fsm_state71;
reg   [159:0] buffer_row_data_M_elems_V_2_reg_362;
reg   [63:0] ap_phi_mux_j_4_phi_fu_375_p4;
reg   [31:0] ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4;
reg   [0:0] ap_phi_mux_found_1_phi_fu_420_p4;
wire   [31:0] ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_404;
wire   [0:0] ap_phi_reg_pp2_iter11_found_1_reg_416;
reg   [31:0] ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4;
reg   [31:0] extracted_scalar_V_5_reg_429;
reg   [2:0] ap_phi_mux_i_phi_fu_445_p4;
wire    ap_block_pp3_stage0;
reg  signed [31:0] ap_phi_mux_j_7_phi_fu_456_p4;
reg   [2:0] idx_i1_reg_473;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state66;
reg   [159:0] buffer_row_data_M_elems_V_3_reg_484;
reg   [2:0] ap_phi_mux_i_4_phi_fu_500_p4;
reg  signed [31:0] ap_phi_mux_j_2_phi_fu_512_p4;
wire   [31:0] j_3_fu_1697_p2;
wire   [31:0] ap_phi_reg_pp4_iter2_j_5_reg_519;
wire  signed [63:0] sext_ln11_fu_905_p1;
wire  signed [63:0] sext_ln66_fu_1679_p1;
reg    ap_block_state1;
reg    ap_block_state15_io;
reg    ap_predicate_op216_readreq_state26;
reg    ap_block_state26_io;
reg    ap_block_pp4_stage0_01001;
reg   [159:0] extracted_row_data_M_elems_V_fu_142;
wire   [159:0] extracted_row_data_M_elems_V_2_fu_653_p2;
wire    ap_block_pp0_stage0;
reg   [159:0] buffer_row_data_M_elems_V_fu_146;
wire   [159:0] buffer_row_data_M_elems_V_4_fu_763_p2;
wire    ap_block_pp1_stage0;
reg   [159:0] buffer_row_data_M_elems_V_1_fu_150;
wire   [159:0] or_ln71_fu_1816_p2;
wire    ap_block_pp5_stage0;
reg   [31:0] extracted_scalar_V_fu_154;
reg   [159:0] extracted_row_data_M_elems_V_1_fu_158;
wire   [159:0] extracted_row_data_M_elems_V_4_fu_1453_p6;
reg   [159:0] p_range_M_elems_V_011_i_fu_162;
wire   [159:0] or_ln71_1_fu_1392_p2;
wire   [7:0] select_ln71_fu_586_p3;
wire   [7:0] select_ln71_1_fu_591_p3;
wire   [7:0] sub_ln71_fu_596_p2;
wire   [159:0] zext_ln71_fu_602_p1;
wire   [159:0] zext_ln71_1_fu_606_p1;
wire   [159:0] shl_ln71_fu_617_p2;
wire   [159:0] lshr_ln71_fu_623_p2;
wire   [159:0] and_ln71_fu_629_p2;
wire   [159:0] xor_ln71_fu_635_p2;
wire   [159:0] select_ln71_2_fu_610_p3;
wire   [159:0] and_ln71_1_fu_641_p2;
wire   [159:0] and_ln71_2_fu_647_p2;
wire   [7:0] select_ln71_3_fu_696_p3;
wire   [7:0] select_ln71_4_fu_701_p3;
wire   [7:0] sub_ln71_1_fu_706_p2;
wire   [159:0] zext_ln71_2_fu_712_p1;
wire   [159:0] zext_ln71_3_fu_716_p1;
wire   [159:0] shl_ln71_4_fu_727_p2;
wire   [159:0] lshr_ln71_1_fu_733_p2;
wire   [159:0] and_ln71_3_fu_739_p2;
wire   [159:0] xor_ln71_1_fu_745_p2;
wire   [159:0] select_ln71_5_fu_720_p3;
wire   [159:0] and_ln71_4_fu_751_p2;
wire   [159:0] and_ln71_5_fu_757_p2;
wire    ap_block_pp3_stage5;
wire   [31:0] i_cast_fu_934_p1;
wire   [0:0] icmp_ln13_1_fu_938_p2;
wire   [7:0] empty_58_fu_956_p2;
wire   [7:0] select_ln13_1_fu_974_p3;
wire   [7:0] select_ln13_2_fu_982_p3;
wire   [7:0] sub_ln13_1_fu_990_p2;
wire   [159:0] zext_ln13_2_fu_996_p1;
wire   [159:0] zext_ln13_3_fu_1000_p1;
wire   [159:0] shl_ln13_1_fu_1004_p2;
wire   [159:0] lshr_ln13_fu_1010_p2;
wire   [31:0] j_8_fu_1022_p2;
wire   [31:0] select_ln13_fu_1036_p3;
wire   [7:0] select_ln13_3_fu_1046_p3;
wire   [159:0] zext_ln13_fu_1042_p1;
wire   [159:0] zext_ln13_1_fu_1051_p1;
wire   [159:0] shl_ln13_fu_1055_p2;
reg   [159:0] tmp_3_fu_1061_p4;
wire   [159:0] xor_ln13_fu_1078_p2;
wire   [159:0] select_ln13_4_fu_1071_p3;
wire   [159:0] and_ln13_2_fu_1083_p2;
wire   [159:0] and_ln13_3_fu_1089_p2;
wire  signed [31:0] r_V_fu_1138_p1;
wire  signed [31:0] trunc_ln1118_fu_1146_p1;
wire  signed [31:0] r_V_2_fu_1160_p4;
wire  signed [31:0] tmp_3_i_fu_1174_p4;
wire  signed [31:0] r_V_4_fu_1194_p4;
wire  signed [31:0] tmp_5_i_fu_1208_p4;
wire  signed [31:0] r_V_6_fu_1228_p4;
wire  signed [31:0] tmp_7_i_fu_1242_p4;
wire  signed [31:0] r_V_8_fu_1262_p4;
wire  signed [31:0] tmp_9_i_fu_1276_p4;
wire   [7:0] select_ln71_9_fu_1300_p3;
wire   [7:0] select_ln71_11_fu_1310_p3;
wire   [7:0] select_ln71_10_fu_1305_p3;
wire   [7:0] sub_ln71_4_fu_1315_p2;
wire   [159:0] zext_ln71_6_fu_1296_p1;
wire   [159:0] zext_ln71_7_fu_1321_p1;
wire   [159:0] shl_ln71_6_fu_1333_p2;
reg   [159:0] tmp_5_fu_1339_p4;
wire   [159:0] zext_ln71_8_fu_1325_p1;
wire   [159:0] zext_ln71_9_fu_1329_p1;
wire   [159:0] shl_ln71_7_fu_1356_p2;
wire   [159:0] lshr_ln71_3_fu_1362_p2;
wire   [159:0] and_ln71_9_fu_1368_p2;
wire   [159:0] xor_ln71_3_fu_1374_p2;
wire   [159:0] select_ln71_12_fu_1349_p3;
wire   [159:0] and_ln71_10_fu_1380_p2;
wire   [159:0] and_ln71_11_fu_1386_p2;
wire   [47:0] grp_fu_1154_p2;
wire   [47:0] grp_fu_1188_p2;
wire   [47:0] grp_fu_1222_p2;
wire   [47:0] grp_fu_1256_p2;
wire   [47:0] grp_fu_1290_p2;
wire   [31:0] trunc_ln703_fu_1462_p1;
wire   [31:0] tmp_2_fu_1471_p4;
wire   [31:0] tmp_4_fu_1486_p4;
wire   [31:0] tmp_6_fu_1501_p4;
wire   [31:0] tmp_8_fu_1516_p4;
wire   [31:0] add_ln703_4_fu_1526_p2;
wire   [31:0] add_ln703_3_fu_1511_p2;
wire   [31:0] add_ln703_2_fu_1496_p2;
wire   [31:0] add_ln703_1_fu_1481_p2;
wire   [31:0] add_ln703_fu_1466_p2;
wire   [7:0] tmp_1_fu_1567_p3;
wire   [7:0] empty_59_fu_1575_p2;
wire   [0:0] icmp_ln1499_2_fu_1581_p2;
wire   [7:0] sub_ln1499_fu_1597_p2;
wire   [7:0] sub_ln1499_2_fu_1609_p2;
reg   [159:0] tmp_fu_1587_p4;
wire   [7:0] sub_ln1499_1_fu_1603_p2;
wire   [7:0] select_ln1499_fu_1615_p3;
wire   [7:0] select_ln1499_2_fu_1631_p3;
wire   [159:0] select_ln1499_1_fu_1623_p3;
wire   [159:0] zext_ln1499_fu_1645_p1;
wire   [159:0] zext_ln1499_1_fu_1655_p1;
wire   [159:0] lshr_ln1499_1_fu_1658_p2;
wire   [159:0] and_ln1499_fu_1664_p2;
wire   [7:0] select_ln71_6_fu_1747_p3;
wire   [7:0] select_ln71_7_fu_1761_p3;
wire   [159:0] zext_ln71_4_fu_1766_p1;
wire   [159:0] zext_ln71_5_fu_1770_p1;
wire   [159:0] shl_ln71_5_fu_1780_p2;
wire   [159:0] lshr_ln71_2_fu_1786_p2;
wire   [159:0] and_ln71_6_fu_1792_p2;
wire   [159:0] xor_ln71_2_fu_1798_p2;
wire   [159:0] select_ln71_8_fu_1773_p3;
wire   [159:0] and_ln71_7_fu_1804_p2;
wire   [159:0] and_ln71_8_fu_1810_p2;
reg   [73:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
reg    ap_block_pp3_stage1_subdone;
wire    ap_block_state57_pp3_stage2_iter0;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_state58_pp3_stage3_iter0;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_state59_pp3_stage4_iter0;
wire    ap_block_pp3_stage4_subdone;
wire    ap_block_state61_pp3_stage6_iter0;
wire    ap_block_pp3_stage6_subdone;
wire    ap_block_state62_pp3_stage7_iter0;
wire    ap_block_pp3_stage7_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 74'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
end

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln1118_fu_1146_p1),
    .din1(r_V_fu_1138_p1),
    .ce(1'b1),
    .dout(grp_fu_1154_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_i_fu_1174_p4),
    .din1(r_V_2_fu_1160_p4),
    .ce(1'b1),
    .dout(grp_fu_1188_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_i_fu_1208_p4),
    .din1(r_V_4_fu_1194_p4),
    .ce(1'b1),
    .dout(grp_fu_1222_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_i_fu_1242_p4),
    .din1(r_V_6_fu_1228_p4),
    .ce(1'b1),
    .dout(grp_fu_1256_p2)
);

row_product_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_i_fu_1276_p4),
    .din1(r_V_8_fu_1262_p4),
    .ce(1'b1),
    .dout(grp_fu_1290_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state11))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage5_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state60) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b0 == ap_block_pp3_stage5_subdone) & (1'b1 == ap_CS_fsm_pp3_stage5)) | ((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter2_state82)) begin
                ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end else if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_enable_reg_pp4_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state96) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state95) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state96))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state96);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((1'b1 == ap_CS_fsm_state95) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer_row_data_M_elems_V_1_fu_150 <= buffer_row_data_M_elems_V_fu_146;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln69_2_reg_2324 == 1'd0))) begin
        buffer_row_data_M_elems_V_1_fu_150 <= or_ln71_fu_1816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        buffer_row_data_M_elems_V_2_reg_362 <= buffer_row_data_M_elems_V_3_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_row_data_M_elems_V_2_reg_362 <= buffer_row_data_M_elems_V_1_load_reg_1926;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state70) & (icmp_ln1499_1_reg_2050 == 1'd0))) begin
        buffer_row_data_M_elems_V_3_reg_484 <= buffer_row_data_M_elems_V_5_fu_1531_p6;
    end else if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_888_p2 == 1'd1))) begin
        buffer_row_data_M_elems_V_3_reg_484 <= buffer_row_data_M_elems_V_2_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        extracted_row_data_M_elems_V_1_fu_158 <= extracted_row_data_M_elems_V_fu_142;
    end else if (((1'b1 == ap_CS_fsm_state70) & (icmp_ln1499_1_reg_2050 == 1'd0))) begin
        extracted_row_data_M_elems_V_1_fu_158 <= extracted_row_data_M_elems_V_4_fu_1453_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        extracted_scalar_V_2_reg_382 <= extracted_scalar_V_1_reg_1995;
    end else if (((icmp_ln24_reg_2021_pp2_iter10_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        extracted_scalar_V_2_reg_382 <= ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        if (((found_reg_392 == 1'd1) & (cmp1_i_reg_1976 == 1'd1))) begin
            extracted_scalar_V_5_reg_429 <= extracted_scalar_V_2_reg_382;
        end else if (((found_reg_392 == 1'd0) | (cmp1_i_reg_1976 == 1'd0))) begin
            extracted_scalar_V_5_reg_429 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        extracted_scalar_V_fu_154 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        extracted_scalar_V_fu_154 <= extracted_scalar_V_5_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        found_reg_392 <= 1'd0;
    end else if (((icmp_ln24_reg_2021_pp2_iter10_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        found_reg_392 <= ap_phi_mux_found_1_phi_fu_420_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_3_reg_338 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        i_3_reg_338 <= indvars_iv_next193_reg_1920;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        i_4_reg_496 <= 3'd0;
    end else if (((icmp_ln60_reg_2278 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        i_4_reg_496 <= add_ln60_reg_2273;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        i_reg_441 <= add_ln9_reg_2091;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        i_reg_441 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        idx_i1_reg_473 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        idx_i1_reg_473 <= add_ln69_3_reg_2149;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_560_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_i3_reg_316 <= add_ln69_fu_554_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
        idx_i3_reg_316 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        idx_i_reg_327 <= 3'd0;
    end else if (((icmp_ln69_1_fu_670_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        idx_i_reg_327 <= add_ln69_1_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_2_fu_1721_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        idx_reg_531 <= add_ln69_2_fu_1715_p2;
    end else if (((1'b1 == ap_CS_fsm_state95) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
        idx_reg_531 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        j_2_reg_508 <= start_idx_reg_2268;
    end else if (((icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        j_2_reg_508 <= j_5_reg_519;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_4_reg_372 <= sext_ln114_reg_1956;
    end else if (((icmp_ln24_reg_2021 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_4_reg_372 <= add_ln24_reg_2025;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        if (((icmp_ln1499_reg_2297 == 1'd1) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0))) begin
            j_5_reg_519 <= ap_phi_mux_j_2_phi_fu_512_p4;
        end else if (((icmp_ln1499_reg_2297 == 1'd0) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0))) begin
            j_5_reg_519 <= j_3_fu_1697_p2;
        end else if ((1'b1 == 1'b1)) begin
            j_5_reg_519 <= ap_phi_reg_pp4_iter2_j_5_reg_519;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln9_reg_2070_pp3_iter1_reg == 1'd0))) begin
        j_7_reg_453 <= j_9_reg_2133;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        j_7_reg_453 <= start_idx_2_reg_2060;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        k_reg_350 <= add_ln114_reg_1986;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        k_reg_350 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln9_reg_2070_pp3_iter1_reg == 1'd0))) begin
        row_data_M_elems_V_read_assign_reg_463 <= extracted_row_data_M_elems_V_3_fu_1094_p2;
    end else if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
        row_data_M_elems_V_read_assign_reg_463 <= extracted_row_data_M_elems_V_1_load_reg_2000;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln114_reg_1986 <= add_ln114_fu_835_p2;
        icmp_ln114_reg_1991 <= icmp_ln114_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln24_fu_867_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln24_reg_2025 <= add_ln24_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        add_ln60_reg_2273 <= add_ln60_fu_1555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        add_ln69_3_reg_2149 <= add_ln69_3_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage5_11001) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
        add_ln9_reg_2091 <= add_ln9_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        and_ln13_1_reg_2127 <= and_ln13_1_fu_1016_p2;
        and_ln13_reg_2106 <= and_ln13_fu_943_p2;
        icmp_ln13_2_reg_2116 <= icmp_ln13_2_fu_962_p2;
        shl_ln1_reg_2111[7 : 5] <= shl_ln1_fu_948_p3[7 : 5];
        sub_ln13_reg_2122[7 : 5] <= sub_ln13_fu_968_p2[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_row_data_M_elems_V_1_load_reg_1926 <= buffer_row_data_M_elems_V_1_fu_150;
        indvars_iv_next193_reg_1920 <= indvars_iv_next193_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_reg_1872 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        buffer_row_data_M_elems_V_fu_146 <= buffer_row_data_M_elems_V_4_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        cmp1_i_reg_1976 <= cmp1_i_fu_825_p2;
        indvars_iv_next193_cast_reg_1961[2 : 0] <= indvars_iv_next193_cast_fu_815_p1[2 : 0];
        sext_ln114_1_reg_1971 <= sext_ln114_1_fu_822_p1;
        sext_ln114_reg_1956 <= sext_ln114_fu_812_p1;
        sub_ln24_reg_1966 <= sub_ln24_fu_818_p2;
        x_colind_addr_reg_1980 <= sext_ln114_fu_812_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_2021 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        col_idx_1_reg_2030 <= m_axi_x_colind_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        col_idx_2_reg_2096 <= m_axi_y_colind_RDATA;
        y_data_addr_read_reg_2101 <= m_axi_y_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_560_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_46_reg_1848[7 : 5] <= empty_46_fu_574_p2[7 : 5];
        icmp_ln71_reg_1854 <= icmp_ln71_fu_580_p2;
        shl_ln_reg_1842[7 : 5] <= shl_ln_fu_566_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_fu_670_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_48_reg_1882[7 : 5] <= empty_48_fu_684_p2[7 : 5];
        icmp_ln71_1_reg_1888 <= icmp_ln71_1_fu_690_p2;
        shl_ln71_1_reg_1876[7 : 5] <= shl_ln71_1_fu_676_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln69_3_fu_1106_p2 == 1'd0))) begin
        empty_55_reg_2164[7 : 5] <= empty_55_fu_1120_p2[7 : 5];
        icmp_ln71_3_reg_2170 <= icmp_ln71_3_fu_1126_p2;
        shl_ln71_3_reg_2157[7 : 5] <= shl_ln71_3_fu_1112_p3[7 : 5];
        sub_ln71_3_reg_2178[7 : 5] <= sub_ln71_3_fu_1132_p2[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_2_fu_1721_p2 == 1'd0))) begin
        empty_60_reg_2333[7 : 5] <= empty_60_fu_1735_p2[7 : 5];
        icmp_ln71_2_reg_2338 <= icmp_ln71_2_fu_1741_p2;
        shl_ln71_2_reg_2328[7 : 5] <= shl_ln71_2_fu_1727_p3[7 : 5];
        sub_ln71_2_reg_2344 <= sub_ln71_2_fu_1755_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        end_idx_1_reg_2065 <= m_axi_y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        end_idx_reg_1949 <= m_axi_x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        extracted_row_data_M_elems_V_1_load_reg_2000 <= extracted_row_data_M_elems_V_1_fu_158;
        extracted_scalar_V_1_reg_1995 <= extracted_scalar_V_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_1838 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        extracted_row_data_M_elems_V_fu_142 <= extracted_row_data_M_elems_V_2_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op240_read_state43 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        extracted_scalar_V_3_reg_2045 <= m_axi_x_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_4_reg_496_pp4_iter1_reg <= i_4_reg_496;
        icmp_ln60_reg_2278 <= icmp_ln60_fu_1561_p2;
        icmp_ln60_reg_2278_pp4_iter1_reg <= icmp_ln60_reg_2278;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        i_4_reg_496_pp4_iter2_reg <= i_4_reg_496_pp4_iter1_reg;
        icmp_ln1499_reg_2297_pp4_iter2_reg <= icmp_ln1499_reg_2297;
        icmp_ln1499_reg_2297_pp4_iter3_reg <= icmp_ln1499_reg_2297_pp4_iter2_reg;
        icmp_ln1499_reg_2297_pp4_iter4_reg <= icmp_ln1499_reg_2297_pp4_iter3_reg;
        icmp_ln1499_reg_2297_pp4_iter5_reg <= icmp_ln1499_reg_2297_pp4_iter4_reg;
        icmp_ln1499_reg_2297_pp4_iter6_reg <= icmp_ln1499_reg_2297_pp4_iter5_reg;
        icmp_ln1499_reg_2297_pp4_iter7_reg <= icmp_ln1499_reg_2297_pp4_iter6_reg;
        icmp_ln60_reg_2278_pp4_iter2_reg <= icmp_ln60_reg_2278_pp4_iter1_reg;
        icmp_ln60_reg_2278_pp4_iter3_reg <= icmp_ln60_reg_2278_pp4_iter2_reg;
        icmp_ln60_reg_2278_pp4_iter4_reg <= icmp_ln60_reg_2278_pp4_iter3_reg;
        icmp_ln60_reg_2278_pp4_iter5_reg <= icmp_ln60_reg_2278_pp4_iter4_reg;
        icmp_ln60_reg_2278_pp4_iter6_reg <= icmp_ln60_reg_2278_pp4_iter5_reg;
        icmp_ln60_reg_2278_pp4_iter7_reg <= icmp_ln60_reg_2278_pp4_iter6_reg;
        trunc_ln1499_reg_2292_pp4_iter2_reg <= trunc_ln1499_reg_2292;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln112_reg_1916 <= icmp_ln112_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        icmp_ln13_reg_2086 <= icmp_ln13_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        icmp_ln1499_1_reg_2050 <= icmp_ln1499_1_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_2278 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln1499_reg_2297 <= icmp_ln1499_fu_1673_p2;
        trunc_ln1499_reg_2292 <= trunc_ln1499_fu_1669_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln24_reg_2021 <= icmp_ln24_fu_867_p2;
        icmp_ln24_reg_2021_pp2_iter1_reg <= icmp_ln24_reg_2021;
        j_4_reg_372_pp2_iter1_reg <= j_4_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln24_reg_2021_pp2_iter10_reg <= icmp_ln24_reg_2021_pp2_iter9_reg;
        icmp_ln24_reg_2021_pp2_iter2_reg <= icmp_ln24_reg_2021_pp2_iter1_reg;
        icmp_ln24_reg_2021_pp2_iter3_reg <= icmp_ln24_reg_2021_pp2_iter2_reg;
        icmp_ln24_reg_2021_pp2_iter4_reg <= icmp_ln24_reg_2021_pp2_iter3_reg;
        icmp_ln24_reg_2021_pp2_iter5_reg <= icmp_ln24_reg_2021_pp2_iter4_reg;
        icmp_ln24_reg_2021_pp2_iter6_reg <= icmp_ln24_reg_2021_pp2_iter5_reg;
        icmp_ln24_reg_2021_pp2_iter7_reg <= icmp_ln24_reg_2021_pp2_iter6_reg;
        icmp_ln24_reg_2021_pp2_iter8_reg <= icmp_ln24_reg_2021_pp2_iter7_reg;
        icmp_ln24_reg_2021_pp2_iter9_reg <= icmp_ln24_reg_2021_pp2_iter8_reg;
        icmp_ln27_reg_2035_pp2_iter10_reg <= icmp_ln27_reg_2035_pp2_iter9_reg;
        icmp_ln27_reg_2035_pp2_iter3_reg <= icmp_ln27_reg_2035;
        icmp_ln27_reg_2035_pp2_iter4_reg <= icmp_ln27_reg_2035_pp2_iter3_reg;
        icmp_ln27_reg_2035_pp2_iter5_reg <= icmp_ln27_reg_2035_pp2_iter4_reg;
        icmp_ln27_reg_2035_pp2_iter6_reg <= icmp_ln27_reg_2035_pp2_iter5_reg;
        icmp_ln27_reg_2035_pp2_iter7_reg <= icmp_ln27_reg_2035_pp2_iter6_reg;
        icmp_ln27_reg_2035_pp2_iter8_reg <= icmp_ln27_reg_2035_pp2_iter7_reg;
        icmp_ln27_reg_2035_pp2_iter9_reg <= icmp_ln27_reg_2035_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_2021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln27_reg_2035 <= icmp_ln27_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln69_1_reg_1872 <= icmp_ln69_1_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln69_2_reg_2324 <= icmp_ln69_2_fu_1721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln69_reg_1838 <= icmp_ln69_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln9_reg_2070 <= icmp_ln9_fu_899_p2;
        icmp_ln9_reg_2070_pp3_iter1_reg <= icmp_ln9_reg_2070;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_9_reg_2133 <= j_9_fu_1028_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln60_fu_1561_p2 == 1'd0))) begin
        lshr_ln1499_reg_2287 <= lshr_ln1499_fu_1649_p2;
        sub_ln1499_3_reg_2282[7 : 1] <= sub_ln1499_3_fu_1639_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        p_range_M_elems_V_011_i_fu_162 <= or_ln71_1_fu_1392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        start_idx_1_reg_1942 <= m_axi_x_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        start_idx_2_reg_2060 <= m_axi_y_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        start_idx_reg_2268 <= m_axi_z_rowptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        trunc_ln708_1_reg_2239 <= {{grp_fu_1188_p2[47:16]}};
        trunc_ln708_2_reg_2245 <= {{grp_fu_1222_p2[47:16]}};
        trunc_ln708_3_reg_2251 <= {{grp_fu_1256_p2[47:16]}};
        trunc_ln708_4_reg_2257 <= {{grp_fu_1290_p2[47:16]}};
        trunc_ln_reg_2233 <= {{grp_fu_1154_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_2021_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln27_fu_878_p2 == 1'd1))) begin
        x_data_addr_reg_2039 <= j_4_reg_372_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_888_p2 == 1'd0))) begin
        y_rowptr_addr_reg_2054[2 : 0] <= zext_ln114_1_reg_2010[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1916 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        zext_ln108_reg_1931[2 : 0] <= zext_ln108_fu_801_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_1991 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        zext_ln114_1_reg_2010[2 : 0] <= zext_ln114_1_fu_857_p1[2 : 0];
        zext_ln114_reg_2005[2 : 0] <= zext_ln114_fu_853_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_560_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_1_fu_670_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_867_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln9_reg_2070 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_condition_pp4_exit_iter2_state82 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter2_state82 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln60_fu_1561_p2 == 1'd1))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_2_fu_1721_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state96 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state96 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_reg_2021_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln27_reg_2035_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4 = extracted_scalar_V_2_reg_382;
        end else if ((icmp_ln27_reg_2035_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4 = extracted_scalar_V_3_reg_2045;
        end else begin
            ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4 = ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_404;
        end
    end else begin
        ap_phi_mux_extracted_scalar_V_4_phi_fu_408_p4 = ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_404;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        if (((found_reg_392 == 1'd1) & (cmp1_i_reg_1976 == 1'd1))) begin
            ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4 = extracted_scalar_V_2_reg_382;
        end else if (((found_reg_392 == 1'd0) | (cmp1_i_reg_1976 == 1'd0))) begin
            ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4 = 32'd0;
        end else begin
            ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4 = 'bx;
    end
end

always @ (*) begin
    if ((icmp_ln24_reg_2021_pp2_iter10_reg == 1'd0)) begin
        if ((icmp_ln27_reg_2035_pp2_iter10_reg == 1'd0)) begin
            ap_phi_mux_found_1_phi_fu_420_p4 = found_reg_392;
        end else if ((icmp_ln27_reg_2035_pp2_iter10_reg == 1'd1)) begin
            ap_phi_mux_found_1_phi_fu_420_p4 = 1'd1;
        end else begin
            ap_phi_mux_found_1_phi_fu_420_p4 = ap_phi_reg_pp2_iter11_found_1_reg_416;
        end
    end else begin
        ap_phi_mux_found_1_phi_fu_420_p4 = ap_phi_reg_pp2_iter11_found_1_reg_416;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_2278 == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_i_4_phi_fu_500_p4 = add_ln60_reg_2273;
    end else begin
        ap_phi_mux_i_4_phi_fu_500_p4 = i_4_reg_496;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_445_p4 = add_ln9_reg_2091;
    end else begin
        ap_phi_mux_i_phi_fu_445_p4 = i_reg_441;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_j_2_phi_fu_512_p4 = j_5_reg_519;
    end else begin
        ap_phi_mux_j_2_phi_fu_512_p4 = j_2_reg_508;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_2021 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_4_phi_fu_375_p4 = add_ln24_reg_2025;
    end else begin
        ap_phi_mux_j_4_phi_fu_375_p4 = j_4_reg_372;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln9_reg_2070_pp3_iter1_reg == 1'd0))) begin
        ap_phi_mux_j_7_phi_fu_456_p4 = j_9_reg_2133;
    end else begin
        ap_phi_mux_j_7_phi_fu_456_p4 = j_7_reg_453;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (ap_predicate_op216_readreq_state26 == 1'b1))) begin
        m_axi_x_colind_ARVALID = 1'b1;
    end else begin
        m_axi_x_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_2021 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        m_axi_x_colind_RREADY = 1'b1;
    end else begin
        m_axi_x_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op233_readreq_state36 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        m_axi_x_data_ARVALID = 1'b1;
    end else begin
        m_axi_x_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op240_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        m_axi_x_data_RREADY = 1'b1;
    end else begin
        m_axi_x_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_x_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_x_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state23) & (m_axi_x_rowptr_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (m_axi_x_rowptr_RVALID == 1'b1)))) begin
        m_axi_x_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_x_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        m_axi_y_colind_ARVALID = 1'b1;
    end else begin
        m_axi_y_colind_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        m_axi_y_colind_RREADY = 1'b1;
    end else begin
        m_axi_y_colind_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        m_axi_y_data_ARVALID = 1'b1;
    end else begin
        m_axi_y_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        m_axi_y_data_RREADY = 1'b1;
    end else begin
        m_axi_y_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_y_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        m_axi_y_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_y_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53)))) begin
        m_axi_y_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_y_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op446_writereq_state82 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_AWVALID = 1'b1;
    end else begin
        m_axi_z_colind_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op464_writeresp_state88 == 1'b1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_BREADY = 1'b1;
    end else begin
        m_axi_z_colind_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op454_write_state83 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_colind_WVALID = 1'b1;
    end else begin
        m_axi_z_colind_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op448_writereq_state82 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_AWVALID = 1'b1;
    end else begin
        m_axi_z_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op465_writeresp_state88 == 1'b1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_BREADY = 1'b1;
    end else begin
        m_axi_z_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op455_write_state83 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        m_axi_z_data_WVALID = 1'b1;
    end else begin
        m_axi_z_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state26_io) & (icmp_ln114_reg_1991 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        m_axi_z_rowptr_ARVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_z_rowptr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
        m_axi_z_rowptr_AWADDR = indvars_iv_next193_cast_reg_1961;
    end else if ((~((m_axi_z_rowptr_AWREADY == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_z_rowptr_AWADDR = 64'd0;
    end else begin
        m_axi_z_rowptr_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_z_rowptr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | (~((m_axi_z_rowptr_AWREADY == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_z_rowptr_AWVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state95) & (m_axi_z_rowptr_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1)))) begin
        m_axi_z_rowptr_BREADY = 1'b1;
    end else begin
        m_axi_z_rowptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (m_axi_z_rowptr_RVALID == 1'b1))) begin
        m_axi_z_rowptr_RREADY = 1'b1;
    end else begin
        m_axi_z_rowptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        m_axi_z_rowptr_WDATA = j_2_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_axi_z_rowptr_WDATA = 32'd0;
    end else begin
        m_axi_z_rowptr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state90) & (m_axi_z_rowptr_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_z_rowptr_WREADY == 1'b1)))) begin
        m_axi_z_rowptr_WVALID = 1'b1;
    end else begin
        m_axi_z_rowptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((cmp1_i_reg_1976 == 1'd1) & (icmp_ln114_reg_1991 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        x_colind_blk_n_AR = m_axi_x_colind_ARREADY;
    end else begin
        x_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_2021 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_colind_blk_n_R = m_axi_x_colind_RVALID;
    end else begin
        x_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2035 == 1'd1) & (icmp_ln24_reg_2021_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_AR = m_axi_x_data_ARREADY;
    end else begin
        x_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2035_pp2_iter9_reg == 1'd1) & (icmp_ln24_reg_2021_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        x_data_blk_n_R = m_axi_x_data_RVALID;
    end else begin
        x_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1916 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        x_rowptr_blk_n_AR = m_axi_x_rowptr_ARREADY;
    end else begin
        x_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        x_rowptr_blk_n_R = m_axi_x_rowptr_RVALID;
    end else begin
        x_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_colind_blk_n_AR = m_axi_y_colind_ARREADY;
    end else begin
        y_colind_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_colind_blk_n_R = m_axi_y_colind_RVALID;
    end else begin
        y_colind_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        y_data_blk_n_AR = m_axi_y_data_ARREADY;
    end else begin
        y_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_2070 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage8) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
        y_data_blk_n_R = m_axi_y_data_RVALID;
    end else begin
        y_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        y_rowptr_blk_n_AR = m_axi_y_rowptr_ARREADY;
    end else begin
        y_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53))) begin
        y_rowptr_blk_n_R = m_axi_y_rowptr_RVALID;
    end else begin
        y_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297 == 1'd0) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_AW = m_axi_z_colind_AWREADY;
    end else begin
        z_colind_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297_pp4_iter7_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter7_reg == 1'd0) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_B = m_axi_z_colind_BVALID;
    end else begin
        z_colind_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297_pp4_iter2_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_colind_blk_n_W = m_axi_z_colind_WREADY;
    end else begin
        z_colind_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297 == 1'd0) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_AW = m_axi_z_data_AWREADY;
    end else begin
        z_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297_pp4_iter7_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter7_reg == 1'd0) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_B = m_axi_z_data_BVALID;
    end else begin
        z_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1499_reg_2297_pp4_iter2_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        z_data_blk_n_W = m_axi_z_data_WREADY;
    end else begin
        z_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln114_reg_1991 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        z_rowptr_blk_n_AR = m_axi_z_rowptr_ARREADY;
    end else begin
        z_rowptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        z_rowptr_blk_n_AW = m_axi_z_rowptr_AWREADY;
    end else begin
        z_rowptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state7))) begin
        z_rowptr_blk_n_B = m_axi_z_rowptr_BVALID;
    end else begin
        z_rowptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        z_rowptr_blk_n_R = m_axi_z_rowptr_RVALID;
    end else begin
        z_rowptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state2))) begin
        z_rowptr_blk_n_W = m_axi_z_rowptr_WREADY;
    end else begin
        z_rowptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_z_rowptr_AWREADY == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln69_fu_560_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln69_fu_560_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln69_1_fu_670_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln69_1_fu_670_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state15_io) & (icmp_ln112_reg_1916 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (m_axi_x_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_x_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (cmp1_i_reg_1976 == 1'd0) & (icmp_ln114_reg_1991 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((1'b0 == ap_block_state26_io) & (cmp1_i_reg_1976 == 1'd1) & (icmp_ln114_reg_1991 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((1'b0 == ap_block_state26_io) & (icmp_ln114_reg_1991 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln1499_1_fu_888_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((m_axi_y_rowptr_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((m_axi_y_rowptr_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((~((icmp_ln9_reg_2070 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage5_subdone)) & (1'b0 == ap_block_pp3_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else if (((icmp_ln9_reg_2070 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln69_3_fu_1106_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (m_axi_z_rowptr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b0)) | ((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((m_axi_z_rowptr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & (m_axi_z_rowptr_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((1'b1 == ap_CS_fsm_state95) & (m_axi_z_rowptr_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_2_fu_1721_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_2_fu_1721_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_835_p2 = (k_reg_350 + 3'd1);

assign add_ln24_fu_872_p2 = (ap_phi_mux_j_4_phi_fu_375_p4 + 64'd1);

assign add_ln60_fu_1555_p2 = (ap_phi_mux_i_4_phi_fu_500_p4 + 3'd1);

assign add_ln69_1_fu_664_p2 = (idx_i_reg_327 + 3'd1);

assign add_ln69_2_fu_1715_p2 = (idx_reg_531 + 3'd1);

assign add_ln69_3_fu_1100_p2 = (idx_i1_reg_473 + 3'd1);

assign add_ln69_fu_554_p2 = (idx_i3_reg_316 + 3'd1);

assign add_ln703_1_fu_1481_p2 = (trunc_ln708_1_reg_2239 + tmp_2_fu_1471_p4);

assign add_ln703_2_fu_1496_p2 = (trunc_ln708_2_reg_2245 + tmp_4_fu_1486_p4);

assign add_ln703_3_fu_1511_p2 = (trunc_ln708_3_reg_2251 + tmp_6_fu_1501_p4);

assign add_ln703_4_fu_1526_p2 = (trunc_ln708_4_reg_2257 + tmp_8_fu_1516_p4);

assign add_ln703_fu_1466_p2 = (trunc_ln_reg_2233 + trunc_ln703_fu_1462_p1);

assign add_ln9_fu_928_p2 = (i_reg_441 + 3'd1);

assign and_ln13_1_fu_1016_p2 = (shl_ln13_1_fu_1004_p2 & lshr_ln13_fu_1010_p2);

assign and_ln13_2_fu_1083_p2 = (xor_ln13_fu_1078_p2 & row_data_M_elems_V_read_assign_reg_463);

assign and_ln13_3_fu_1089_p2 = (select_ln13_4_fu_1071_p3 & and_ln13_1_reg_2127);

assign and_ln13_fu_943_p2 = (icmp_ln13_reg_2086 & icmp_ln13_1_fu_938_p2);

assign and_ln1499_fu_1664_p2 = (lshr_ln1499_reg_2287 & lshr_ln1499_1_fu_1658_p2);

assign and_ln71_10_fu_1380_p2 = (xor_ln71_3_fu_1374_p2 & p_range_M_elems_V_011_i_fu_162);

assign and_ln71_11_fu_1386_p2 = (select_ln71_12_fu_1349_p3 & and_ln71_9_fu_1368_p2);

assign and_ln71_1_fu_641_p2 = (xor_ln71_fu_635_p2 & extracted_row_data_M_elems_V_fu_142);

assign and_ln71_2_fu_647_p2 = (select_ln71_2_fu_610_p3 & and_ln71_fu_629_p2);

assign and_ln71_3_fu_739_p2 = (shl_ln71_4_fu_727_p2 & lshr_ln71_1_fu_733_p2);

assign and_ln71_4_fu_751_p2 = (xor_ln71_1_fu_745_p2 & buffer_row_data_M_elems_V_fu_146);

assign and_ln71_5_fu_757_p2 = (select_ln71_5_fu_720_p3 & and_ln71_3_fu_739_p2);

assign and_ln71_6_fu_1792_p2 = (shl_ln71_5_fu_1780_p2 & lshr_ln71_2_fu_1786_p2);

assign and_ln71_7_fu_1804_p2 = (xor_ln71_2_fu_1798_p2 & buffer_row_data_M_elems_V_1_fu_150);

assign and_ln71_8_fu_1810_p2 = (select_ln71_8_fu_1773_p3 & and_ln71_6_fu_1792_p2);

assign and_ln71_9_fu_1368_p2 = (shl_ln71_7_fu_1356_p2 & lshr_ln71_3_fu_1362_p2);

assign and_ln71_fu_629_p2 = (shl_ln71_fu_617_p2 & lshr_ln71_fu_623_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp3_stage5 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd73];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_predicate_op240_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (m_axi_x_data_RVALID == 1'b0)) | ((1'b1 == ap_block_state36_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((icmp_ln24_reg_2021 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (m_axi_x_colind_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_predicate_op240_read_state43 == 1'b1) & (ap_enable_reg_pp2_iter10 == 1'b1) & (m_axi_x_data_RVALID == 1'b0)) | ((1'b1 == ap_block_state36_io) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((icmp_ln24_reg_2021 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (m_axi_x_colind_RVALID == 1'b0)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage8_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_data_RVALID == 1'b0)) | ((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_colind_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp3_stage8_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_data_RVALID == 1'b0)) | ((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_colind_RVALID == 1'b0))));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op465_writeresp_state88 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op464_writeresp_state88 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((1'b1 == ap_block_state83_io) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b1 == ap_block_state82_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op465_writeresp_state88 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op464_writeresp_state88 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((1'b1 == ap_block_state83_io) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b1 == ap_block_state82_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((ap_enable_reg_pp4_iter8 == 1'b1) & (((ap_predicate_op465_writeresp_state88 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op464_writeresp_state88 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)))));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((icmp_ln112_reg_1916 == 1'd0) & (m_axi_x_rowptr_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state26_io = (((icmp_ln114_reg_1991 == 1'd1) & (m_axi_z_rowptr_ARREADY == 1'b0)) | ((m_axi_x_colind_ARREADY == 1'b0) & (ap_predicate_op216_readreq_state26 == 1'b1)));
end

assign ap_block_state33_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp2_stage0_iter1 = ((icmp_ln24_reg_2021 == 1'd0) & (m_axi_x_colind_RVALID == 1'b0));
end

assign ap_block_state35_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((ap_predicate_op233_readreq_state36 == 1'b1) & (m_axi_x_data_ARREADY == 1'b0));
end

assign ap_block_state36_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp2_stage0_iter10 = ((ap_predicate_op240_read_state43 == 1'b1) & (m_axi_x_data_RVALID == 1'b0));
end

assign ap_block_state44_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state56_io = (((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_data_ARREADY == 1'b0)) | ((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_colind_ARREADY == 1'b0)));
end

assign ap_block_state56_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_pp3_stage8_iter0 = (((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_data_RVALID == 1'b0)) | ((icmp_ln9_reg_2070 == 1'd0) & (m_axi_y_colind_RVALID == 1'b0)));
end

assign ap_block_state64_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state82_io = (((ap_predicate_op448_writereq_state82 == 1'b1) & (m_axi_z_data_AWREADY == 1'b0)) | ((ap_predicate_op446_writereq_state82 == 1'b1) & (m_axi_z_colind_AWREADY == 1'b0)));
end

assign ap_block_state82_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_io = (((ap_predicate_op455_write_state83 == 1'b1) & (m_axi_z_data_WREADY == 1'b0)) | ((ap_predicate_op454_write_state83 == 1'b1) & (m_axi_z_colind_WREADY == 1'b0)));
end

assign ap_block_state83_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state88_pp4_stage0_iter8 = (((ap_predicate_op465_writeresp_state88 == 1'b1) & (m_axi_z_data_BVALID == 1'b0)) | ((ap_predicate_op464_writeresp_state88 == 1'b1) & (m_axi_z_colind_BVALID == 1'b0)));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_phi_reg_pp2_iter11_extracted_scalar_V_4_reg_404 = 'bx;

assign ap_phi_reg_pp2_iter11_found_1_reg_416 = 'bx;

assign ap_phi_reg_pp4_iter2_j_5_reg_519 = 'bx;

always @ (*) begin
    ap_predicate_op216_readreq_state26 = ((cmp1_i_reg_1976 == 1'd1) & (icmp_ln114_reg_1991 == 1'd0));
end

always @ (*) begin
    ap_predicate_op233_readreq_state36 = ((icmp_ln27_reg_2035 == 1'd1) & (icmp_ln24_reg_2021_pp2_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op240_read_state43 = ((icmp_ln27_reg_2035_pp2_iter9_reg == 1'd1) & (icmp_ln24_reg_2021_pp2_iter9_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op446_writereq_state82 = ((icmp_ln1499_reg_2297 == 1'd0) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op448_writereq_state82 = ((icmp_ln1499_reg_2297 == 1'd0) & (icmp_ln60_reg_2278_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op454_write_state83 = ((icmp_ln1499_reg_2297_pp4_iter2_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op455_write_state83 = ((icmp_ln1499_reg_2297_pp4_iter2_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op464_writeresp_state88 = ((icmp_ln1499_reg_2297_pp4_iter7_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op465_writeresp_state88 = ((icmp_ln1499_reg_2297_pp4_iter7_reg == 1'd0) & (icmp_ln60_reg_2278_pp4_iter7_reg == 1'd0));
end

assign buffer_row_data_M_elems_V_4_fu_763_p2 = (and_ln71_5_fu_757_p2 | and_ln71_4_fu_751_p2);

assign buffer_row_data_M_elems_V_5_fu_1531_p6 = {{{{{add_ln703_4_fu_1526_p2}, {add_ln703_3_fu_1511_p2}}, {add_ln703_2_fu_1496_p2}}, {add_ln703_1_fu_1481_p2}}, {add_ln703_fu_1466_p2}};

assign cmp1_i_fu_825_p2 = (($signed(start_idx_1_reg_1942) < $signed(end_idx_reg_1949)) ? 1'b1 : 1'b0);

assign empty_46_fu_574_p2 = (shl_ln_fu_566_p3 | 8'd31);

assign empty_48_fu_684_p2 = (shl_ln71_1_fu_676_p3 | 8'd31);

assign empty_55_fu_1120_p2 = (shl_ln71_3_fu_1112_p3 | 8'd31);

assign empty_58_fu_956_p2 = (shl_ln1_fu_948_p3 | 8'd31);

assign empty_59_fu_1575_p2 = (tmp_1_fu_1567_p3 | 8'd31);

assign empty_60_fu_1735_p2 = (shl_ln71_2_fu_1727_p3 | 8'd31);

assign extracted_row_data_M_elems_V_2_fu_653_p2 = (and_ln71_2_fu_647_p2 | and_ln71_1_fu_641_p2);

assign extracted_row_data_M_elems_V_3_fu_1094_p2 = (and_ln13_3_fu_1089_p2 | and_ln13_2_fu_1083_p2);

assign extracted_row_data_M_elems_V_4_fu_1453_p6 = {{{{{trunc_ln708_4_reg_2257}, {trunc_ln708_3_reg_2251}}, {trunc_ln708_2_reg_2245}}, {trunc_ln708_1_reg_2239}}, {trunc_ln_reg_2233}};

assign i_cast_fu_934_p1 = i_reg_441;

assign icmp_ln112_fu_789_p2 = ((i_3_reg_338 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_841_p2 = ((k_reg_350 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln13_1_fu_938_p2 = ((col_idx_2_reg_2096 == i_cast_fu_934_p1) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_962_p2 = ((shl_ln1_fu_948_p3 > empty_58_fu_956_p2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_923_p2 = (($signed(ap_phi_mux_j_7_phi_fu_456_p4) < $signed(end_idx_1_reg_2065)) ? 1'b1 : 1'b0);

assign icmp_ln1499_1_fu_888_p2 = ((ap_phi_mux_extracted_scalar_V_5_phi_fu_432_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1499_2_fu_1581_p2 = ((tmp_1_fu_1567_p3 > empty_59_fu_1575_p2) ? 1'b1 : 1'b0);

assign icmp_ln1499_fu_1673_p2 = ((trunc_ln1499_fu_1669_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_867_p2 = ((ap_phi_mux_j_4_phi_fu_375_p4 == sext_ln114_1_reg_1971) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_878_p2 = ((col_idx_1_reg_2030 == zext_ln114_reg_2005) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1561_p2 = ((ap_phi_mux_i_4_phi_fu_500_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_670_p2 = ((idx_i_reg_327 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_1721_p2 = ((idx_reg_531 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_3_fu_1106_p2 = ((idx_i1_reg_473 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_560_p2 = ((idx_i3_reg_316 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_690_p2 = ((shl_ln71_1_fu_676_p3 > empty_48_fu_684_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_2_fu_1741_p2 = ((shl_ln71_2_fu_1727_p3 > empty_60_fu_1735_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_3_fu_1126_p2 = ((shl_ln71_3_fu_1112_p3 > empty_55_fu_1120_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_580_p2 = ((shl_ln_fu_566_p3 > empty_46_fu_574_p2) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_899_p2 = ((ap_phi_mux_i_phi_fu_445_p4 == 3'd5) ? 1'b1 : 1'b0);

assign indvars_iv_next193_cast_fu_815_p1 = indvars_iv_next193_reg_1920;

assign indvars_iv_next193_fu_795_p2 = (i_3_reg_338 + 3'd1);

assign j_3_fu_1697_p2 = ($signed(ap_phi_mux_j_2_phi_fu_512_p4) + $signed(32'd1));

assign j_8_fu_1022_p2 = ($signed(j_7_reg_453) + $signed(32'd1));

assign j_9_fu_1028_p3 = ((and_ln13_fu_943_p2[0:0] == 1'b1) ? j_8_fu_1022_p2 : j_7_reg_453);

assign lshr_ln13_fu_1010_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln13_3_fu_1000_p1;

assign lshr_ln1499_1_fu_1658_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln1499_1_fu_1655_p1;

assign lshr_ln1499_fu_1649_p2 = select_ln1499_1_fu_1623_p3 >> zext_ln1499_fu_1645_p1;

assign lshr_ln71_1_fu_733_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_3_fu_716_p1;

assign lshr_ln71_2_fu_1786_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_5_fu_1770_p1;

assign lshr_ln71_3_fu_1362_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_9_fu_1329_p1;

assign lshr_ln71_fu_623_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln71_1_fu_606_p1;

assign m_axi_x_colind_ARADDR = x_colind_addr_reg_1980;

assign m_axi_x_colind_ARBURST = 2'd0;

assign m_axi_x_colind_ARCACHE = 4'd0;

assign m_axi_x_colind_ARID = 1'd0;

assign m_axi_x_colind_ARLEN = sub_ln24_reg_1966;

assign m_axi_x_colind_ARLOCK = 2'd0;

assign m_axi_x_colind_ARPROT = 3'd0;

assign m_axi_x_colind_ARQOS = 4'd0;

assign m_axi_x_colind_ARREGION = 4'd0;

assign m_axi_x_colind_ARSIZE = 3'd0;

assign m_axi_x_colind_ARUSER = 1'd0;

assign m_axi_x_colind_AWADDR = 64'd0;

assign m_axi_x_colind_AWBURST = 2'd0;

assign m_axi_x_colind_AWCACHE = 4'd0;

assign m_axi_x_colind_AWID = 1'd0;

assign m_axi_x_colind_AWLEN = 32'd0;

assign m_axi_x_colind_AWLOCK = 2'd0;

assign m_axi_x_colind_AWPROT = 3'd0;

assign m_axi_x_colind_AWQOS = 4'd0;

assign m_axi_x_colind_AWREGION = 4'd0;

assign m_axi_x_colind_AWSIZE = 3'd0;

assign m_axi_x_colind_AWUSER = 1'd0;

assign m_axi_x_colind_AWVALID = 1'b0;

assign m_axi_x_colind_BREADY = 1'b0;

assign m_axi_x_colind_WDATA = 32'd0;

assign m_axi_x_colind_WID = 1'd0;

assign m_axi_x_colind_WLAST = 1'b0;

assign m_axi_x_colind_WSTRB = 4'd0;

assign m_axi_x_colind_WUSER = 1'd0;

assign m_axi_x_colind_WVALID = 1'b0;

assign m_axi_x_data_ARADDR = x_data_addr_reg_2039;

assign m_axi_x_data_ARBURST = 2'd0;

assign m_axi_x_data_ARCACHE = 4'd0;

assign m_axi_x_data_ARID = 1'd0;

assign m_axi_x_data_ARLEN = 32'd1;

assign m_axi_x_data_ARLOCK = 2'd0;

assign m_axi_x_data_ARPROT = 3'd0;

assign m_axi_x_data_ARQOS = 4'd0;

assign m_axi_x_data_ARREGION = 4'd0;

assign m_axi_x_data_ARSIZE = 3'd0;

assign m_axi_x_data_ARUSER = 1'd0;

assign m_axi_x_data_AWADDR = 64'd0;

assign m_axi_x_data_AWBURST = 2'd0;

assign m_axi_x_data_AWCACHE = 4'd0;

assign m_axi_x_data_AWID = 1'd0;

assign m_axi_x_data_AWLEN = 32'd0;

assign m_axi_x_data_AWLOCK = 2'd0;

assign m_axi_x_data_AWPROT = 3'd0;

assign m_axi_x_data_AWQOS = 4'd0;

assign m_axi_x_data_AWREGION = 4'd0;

assign m_axi_x_data_AWSIZE = 3'd0;

assign m_axi_x_data_AWUSER = 1'd0;

assign m_axi_x_data_AWVALID = 1'b0;

assign m_axi_x_data_BREADY = 1'b0;

assign m_axi_x_data_WDATA = 32'd0;

assign m_axi_x_data_WID = 1'd0;

assign m_axi_x_data_WLAST = 1'b0;

assign m_axi_x_data_WSTRB = 4'd0;

assign m_axi_x_data_WUSER = 1'd0;

assign m_axi_x_data_WVALID = 1'b0;

assign m_axi_x_rowptr_ARADDR = zext_ln108_fu_801_p1;

assign m_axi_x_rowptr_ARBURST = 2'd0;

assign m_axi_x_rowptr_ARCACHE = 4'd0;

assign m_axi_x_rowptr_ARID = 1'd0;

assign m_axi_x_rowptr_ARLEN = 32'd2;

assign m_axi_x_rowptr_ARLOCK = 2'd0;

assign m_axi_x_rowptr_ARPROT = 3'd0;

assign m_axi_x_rowptr_ARQOS = 4'd0;

assign m_axi_x_rowptr_ARREGION = 4'd0;

assign m_axi_x_rowptr_ARSIZE = 3'd0;

assign m_axi_x_rowptr_ARUSER = 1'd0;

assign m_axi_x_rowptr_AWADDR = 64'd0;

assign m_axi_x_rowptr_AWBURST = 2'd0;

assign m_axi_x_rowptr_AWCACHE = 4'd0;

assign m_axi_x_rowptr_AWID = 1'd0;

assign m_axi_x_rowptr_AWLEN = 32'd0;

assign m_axi_x_rowptr_AWLOCK = 2'd0;

assign m_axi_x_rowptr_AWPROT = 3'd0;

assign m_axi_x_rowptr_AWQOS = 4'd0;

assign m_axi_x_rowptr_AWREGION = 4'd0;

assign m_axi_x_rowptr_AWSIZE = 3'd0;

assign m_axi_x_rowptr_AWUSER = 1'd0;

assign m_axi_x_rowptr_AWVALID = 1'b0;

assign m_axi_x_rowptr_BREADY = 1'b0;

assign m_axi_x_rowptr_WDATA = 32'd0;

assign m_axi_x_rowptr_WID = 1'd0;

assign m_axi_x_rowptr_WLAST = 1'b0;

assign m_axi_x_rowptr_WSTRB = 4'd0;

assign m_axi_x_rowptr_WUSER = 1'd0;

assign m_axi_x_rowptr_WVALID = 1'b0;

assign m_axi_y_colind_ARADDR = sext_ln11_fu_905_p1;

assign m_axi_y_colind_ARBURST = 2'd0;

assign m_axi_y_colind_ARCACHE = 4'd0;

assign m_axi_y_colind_ARID = 1'd0;

assign m_axi_y_colind_ARLEN = 32'd1;

assign m_axi_y_colind_ARLOCK = 2'd0;

assign m_axi_y_colind_ARPROT = 3'd0;

assign m_axi_y_colind_ARQOS = 4'd0;

assign m_axi_y_colind_ARREGION = 4'd0;

assign m_axi_y_colind_ARSIZE = 3'd0;

assign m_axi_y_colind_ARUSER = 1'd0;

assign m_axi_y_colind_AWADDR = 64'd0;

assign m_axi_y_colind_AWBURST = 2'd0;

assign m_axi_y_colind_AWCACHE = 4'd0;

assign m_axi_y_colind_AWID = 1'd0;

assign m_axi_y_colind_AWLEN = 32'd0;

assign m_axi_y_colind_AWLOCK = 2'd0;

assign m_axi_y_colind_AWPROT = 3'd0;

assign m_axi_y_colind_AWQOS = 4'd0;

assign m_axi_y_colind_AWREGION = 4'd0;

assign m_axi_y_colind_AWSIZE = 3'd0;

assign m_axi_y_colind_AWUSER = 1'd0;

assign m_axi_y_colind_AWVALID = 1'b0;

assign m_axi_y_colind_BREADY = 1'b0;

assign m_axi_y_colind_WDATA = 32'd0;

assign m_axi_y_colind_WID = 1'd0;

assign m_axi_y_colind_WLAST = 1'b0;

assign m_axi_y_colind_WSTRB = 4'd0;

assign m_axi_y_colind_WUSER = 1'd0;

assign m_axi_y_colind_WVALID = 1'b0;

assign m_axi_y_data_ARADDR = sext_ln11_fu_905_p1;

assign m_axi_y_data_ARBURST = 2'd0;

assign m_axi_y_data_ARCACHE = 4'd0;

assign m_axi_y_data_ARID = 1'd0;

assign m_axi_y_data_ARLEN = 32'd1;

assign m_axi_y_data_ARLOCK = 2'd0;

assign m_axi_y_data_ARPROT = 3'd0;

assign m_axi_y_data_ARQOS = 4'd0;

assign m_axi_y_data_ARREGION = 4'd0;

assign m_axi_y_data_ARSIZE = 3'd0;

assign m_axi_y_data_ARUSER = 1'd0;

assign m_axi_y_data_AWADDR = 64'd0;

assign m_axi_y_data_AWBURST = 2'd0;

assign m_axi_y_data_AWCACHE = 4'd0;

assign m_axi_y_data_AWID = 1'd0;

assign m_axi_y_data_AWLEN = 32'd0;

assign m_axi_y_data_AWLOCK = 2'd0;

assign m_axi_y_data_AWPROT = 3'd0;

assign m_axi_y_data_AWQOS = 4'd0;

assign m_axi_y_data_AWREGION = 4'd0;

assign m_axi_y_data_AWSIZE = 3'd0;

assign m_axi_y_data_AWUSER = 1'd0;

assign m_axi_y_data_AWVALID = 1'b0;

assign m_axi_y_data_BREADY = 1'b0;

assign m_axi_y_data_WDATA = 32'd0;

assign m_axi_y_data_WID = 1'd0;

assign m_axi_y_data_WLAST = 1'b0;

assign m_axi_y_data_WSTRB = 4'd0;

assign m_axi_y_data_WUSER = 1'd0;

assign m_axi_y_data_WVALID = 1'b0;

assign m_axi_y_rowptr_ARADDR = y_rowptr_addr_reg_2054;

assign m_axi_y_rowptr_ARBURST = 2'd0;

assign m_axi_y_rowptr_ARCACHE = 4'd0;

assign m_axi_y_rowptr_ARID = 1'd0;

assign m_axi_y_rowptr_ARLEN = 32'd2;

assign m_axi_y_rowptr_ARLOCK = 2'd0;

assign m_axi_y_rowptr_ARPROT = 3'd0;

assign m_axi_y_rowptr_ARQOS = 4'd0;

assign m_axi_y_rowptr_ARREGION = 4'd0;

assign m_axi_y_rowptr_ARSIZE = 3'd0;

assign m_axi_y_rowptr_ARUSER = 1'd0;

assign m_axi_y_rowptr_AWADDR = 64'd0;

assign m_axi_y_rowptr_AWBURST = 2'd0;

assign m_axi_y_rowptr_AWCACHE = 4'd0;

assign m_axi_y_rowptr_AWID = 1'd0;

assign m_axi_y_rowptr_AWLEN = 32'd0;

assign m_axi_y_rowptr_AWLOCK = 2'd0;

assign m_axi_y_rowptr_AWPROT = 3'd0;

assign m_axi_y_rowptr_AWQOS = 4'd0;

assign m_axi_y_rowptr_AWREGION = 4'd0;

assign m_axi_y_rowptr_AWSIZE = 3'd0;

assign m_axi_y_rowptr_AWUSER = 1'd0;

assign m_axi_y_rowptr_AWVALID = 1'b0;

assign m_axi_y_rowptr_BREADY = 1'b0;

assign m_axi_y_rowptr_WDATA = 32'd0;

assign m_axi_y_rowptr_WID = 1'd0;

assign m_axi_y_rowptr_WLAST = 1'b0;

assign m_axi_y_rowptr_WSTRB = 4'd0;

assign m_axi_y_rowptr_WUSER = 1'd0;

assign m_axi_y_rowptr_WVALID = 1'b0;

assign m_axi_z_colind_ARADDR = 64'd0;

assign m_axi_z_colind_ARBURST = 2'd0;

assign m_axi_z_colind_ARCACHE = 4'd0;

assign m_axi_z_colind_ARID = 1'd0;

assign m_axi_z_colind_ARLEN = 32'd0;

assign m_axi_z_colind_ARLOCK = 2'd0;

assign m_axi_z_colind_ARPROT = 3'd0;

assign m_axi_z_colind_ARQOS = 4'd0;

assign m_axi_z_colind_ARREGION = 4'd0;

assign m_axi_z_colind_ARSIZE = 3'd0;

assign m_axi_z_colind_ARUSER = 1'd0;

assign m_axi_z_colind_ARVALID = 1'b0;

assign m_axi_z_colind_AWADDR = sext_ln66_fu_1679_p1;

assign m_axi_z_colind_AWBURST = 2'd0;

assign m_axi_z_colind_AWCACHE = 4'd0;

assign m_axi_z_colind_AWID = 1'd0;

assign m_axi_z_colind_AWLEN = 32'd1;

assign m_axi_z_colind_AWLOCK = 2'd0;

assign m_axi_z_colind_AWPROT = 3'd0;

assign m_axi_z_colind_AWQOS = 4'd0;

assign m_axi_z_colind_AWREGION = 4'd0;

assign m_axi_z_colind_AWSIZE = 3'd0;

assign m_axi_z_colind_AWUSER = 1'd0;

assign m_axi_z_colind_RREADY = 1'b0;

assign m_axi_z_colind_WDATA = i_4_reg_496_pp4_iter2_reg;

assign m_axi_z_colind_WID = 1'd0;

assign m_axi_z_colind_WLAST = 1'b0;

assign m_axi_z_colind_WSTRB = 4'd15;

assign m_axi_z_colind_WUSER = 1'd0;

assign m_axi_z_data_ARADDR = 64'd0;

assign m_axi_z_data_ARBURST = 2'd0;

assign m_axi_z_data_ARCACHE = 4'd0;

assign m_axi_z_data_ARID = 1'd0;

assign m_axi_z_data_ARLEN = 32'd0;

assign m_axi_z_data_ARLOCK = 2'd0;

assign m_axi_z_data_ARPROT = 3'd0;

assign m_axi_z_data_ARQOS = 4'd0;

assign m_axi_z_data_ARREGION = 4'd0;

assign m_axi_z_data_ARSIZE = 3'd0;

assign m_axi_z_data_ARUSER = 1'd0;

assign m_axi_z_data_ARVALID = 1'b0;

assign m_axi_z_data_AWADDR = sext_ln66_fu_1679_p1;

assign m_axi_z_data_AWBURST = 2'd0;

assign m_axi_z_data_AWCACHE = 4'd0;

assign m_axi_z_data_AWID = 1'd0;

assign m_axi_z_data_AWLEN = 32'd1;

assign m_axi_z_data_AWLOCK = 2'd0;

assign m_axi_z_data_AWPROT = 3'd0;

assign m_axi_z_data_AWQOS = 4'd0;

assign m_axi_z_data_AWREGION = 4'd0;

assign m_axi_z_data_AWSIZE = 3'd0;

assign m_axi_z_data_AWUSER = 1'd0;

assign m_axi_z_data_RREADY = 1'b0;

assign m_axi_z_data_WDATA = trunc_ln1499_reg_2292_pp4_iter2_reg;

assign m_axi_z_data_WID = 1'd0;

assign m_axi_z_data_WLAST = 1'b0;

assign m_axi_z_data_WSTRB = 4'd15;

assign m_axi_z_data_WUSER = 1'd0;

assign m_axi_z_rowptr_ARADDR = zext_ln108_reg_1931;

assign m_axi_z_rowptr_ARBURST = 2'd0;

assign m_axi_z_rowptr_ARCACHE = 4'd0;

assign m_axi_z_rowptr_ARID = 1'd0;

assign m_axi_z_rowptr_ARLEN = 32'd1;

assign m_axi_z_rowptr_ARLOCK = 2'd0;

assign m_axi_z_rowptr_ARPROT = 3'd0;

assign m_axi_z_rowptr_ARQOS = 4'd0;

assign m_axi_z_rowptr_ARREGION = 4'd0;

assign m_axi_z_rowptr_ARSIZE = 3'd0;

assign m_axi_z_rowptr_ARUSER = 1'd0;

assign m_axi_z_rowptr_AWBURST = 2'd0;

assign m_axi_z_rowptr_AWCACHE = 4'd0;

assign m_axi_z_rowptr_AWID = 1'd0;

assign m_axi_z_rowptr_AWLEN = 32'd1;

assign m_axi_z_rowptr_AWLOCK = 2'd0;

assign m_axi_z_rowptr_AWPROT = 3'd0;

assign m_axi_z_rowptr_AWQOS = 4'd0;

assign m_axi_z_rowptr_AWREGION = 4'd0;

assign m_axi_z_rowptr_AWSIZE = 3'd0;

assign m_axi_z_rowptr_AWUSER = 1'd0;

assign m_axi_z_rowptr_WID = 1'd0;

assign m_axi_z_rowptr_WLAST = 1'b0;

assign m_axi_z_rowptr_WSTRB = 4'd15;

assign m_axi_z_rowptr_WUSER = 1'd0;

assign or_ln71_1_fu_1392_p2 = (and_ln71_11_fu_1386_p2 | and_ln71_10_fu_1380_p2);

assign or_ln71_fu_1816_p2 = (and_ln71_8_fu_1810_p2 | and_ln71_7_fu_1804_p2);

assign r_V_2_fu_1160_p4 = {{row_data_M_elems_V_read_assign_reg_463[63:32]}};

assign r_V_4_fu_1194_p4 = {{row_data_M_elems_V_read_assign_reg_463[95:64]}};

assign r_V_6_fu_1228_p4 = {{row_data_M_elems_V_read_assign_reg_463[127:96]}};

assign r_V_8_fu_1262_p4 = {{row_data_M_elems_V_read_assign_reg_463[159:128]}};

assign r_V_fu_1138_p1 = row_data_M_elems_V_read_assign_reg_463[31:0];

assign select_ln13_1_fu_974_p3 = ((icmp_ln13_2_fu_962_p2[0:0] == 1'b1) ? shl_ln1_fu_948_p3 : empty_58_fu_956_p2);

assign select_ln13_2_fu_982_p3 = ((icmp_ln13_2_fu_962_p2[0:0] == 1'b1) ? empty_58_fu_956_p2 : shl_ln1_fu_948_p3);

assign select_ln13_3_fu_1046_p3 = ((icmp_ln13_2_reg_2116[0:0] == 1'b1) ? sub_ln13_reg_2122 : shl_ln1_reg_2111);

assign select_ln13_4_fu_1071_p3 = ((icmp_ln13_2_reg_2116[0:0] == 1'b1) ? tmp_3_fu_1061_p4 : shl_ln13_fu_1055_p2);

assign select_ln13_fu_1036_p3 = ((and_ln13_reg_2106[0:0] == 1'b1) ? y_data_addr_read_reg_2101 : 32'd0);

assign select_ln1499_1_fu_1623_p3 = ((icmp_ln1499_2_fu_1581_p2[0:0] == 1'b1) ? tmp_fu_1587_p4 : buffer_row_data_M_elems_V_2_reg_362);

assign select_ln1499_2_fu_1631_p3 = ((icmp_ln1499_2_fu_1581_p2[0:0] == 1'b1) ? sub_ln1499_1_fu_1603_p2 : tmp_1_fu_1567_p3);

assign select_ln1499_fu_1615_p3 = ((icmp_ln1499_2_fu_1581_p2[0:0] == 1'b1) ? sub_ln1499_fu_1597_p2 : sub_ln1499_2_fu_1609_p2);

assign select_ln71_10_fu_1305_p3 = ((icmp_ln71_3_reg_2170[0:0] == 1'b1) ? empty_55_reg_2164 : shl_ln71_3_reg_2157);

assign select_ln71_11_fu_1310_p3 = ((icmp_ln71_3_reg_2170[0:0] == 1'b1) ? sub_ln71_3_reg_2178 : shl_ln71_3_reg_2157);

assign select_ln71_12_fu_1349_p3 = ((icmp_ln71_3_reg_2170[0:0] == 1'b1) ? tmp_5_fu_1339_p4 : shl_ln71_6_fu_1333_p2);

assign select_ln71_1_fu_591_p3 = ((icmp_ln71_reg_1854[0:0] == 1'b1) ? empty_46_reg_1848 : shl_ln_reg_1842);

assign select_ln71_2_fu_610_p3 = ((icmp_ln71_reg_1854[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_3_fu_696_p3 = ((icmp_ln71_1_reg_1888[0:0] == 1'b1) ? shl_ln71_1_reg_1876 : empty_48_reg_1882);

assign select_ln71_4_fu_701_p3 = ((icmp_ln71_1_reg_1888[0:0] == 1'b1) ? empty_48_reg_1882 : shl_ln71_1_reg_1876);

assign select_ln71_5_fu_720_p3 = ((icmp_ln71_1_reg_1888[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_6_fu_1747_p3 = ((icmp_ln71_2_fu_1741_p2[0:0] == 1'b1) ? shl_ln71_2_fu_1727_p3 : empty_60_fu_1735_p2);

assign select_ln71_7_fu_1761_p3 = ((icmp_ln71_2_reg_2338[0:0] == 1'b1) ? empty_60_reg_2333 : shl_ln71_2_reg_2328);

assign select_ln71_8_fu_1773_p3 = ((icmp_ln71_2_reg_2338[0:0] == 1'b1) ? 160'd0 : 160'd0);

assign select_ln71_9_fu_1300_p3 = ((icmp_ln71_3_reg_2170[0:0] == 1'b1) ? shl_ln71_3_reg_2157 : empty_55_reg_2164);

assign select_ln71_fu_586_p3 = ((icmp_ln71_reg_1854[0:0] == 1'b1) ? shl_ln_reg_1842 : empty_46_reg_1848);

assign sext_ln114_1_fu_822_p1 = end_idx_reg_1949;

assign sext_ln114_fu_812_p1 = start_idx_1_reg_1942;

assign sext_ln11_fu_905_p1 = ap_phi_mux_j_7_phi_fu_456_p4;

assign sext_ln66_fu_1679_p1 = ap_phi_mux_j_2_phi_fu_512_p4;

assign shl_ln13_1_fu_1004_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln13_2_fu_996_p1;

assign shl_ln13_fu_1055_p2 = zext_ln13_fu_1042_p1 << zext_ln13_1_fu_1051_p1;

assign shl_ln1_fu_948_p3 = {{i_reg_441}, {5'd0}};

assign shl_ln71_1_fu_676_p3 = {{idx_i_reg_327}, {5'd0}};

assign shl_ln71_2_fu_1727_p3 = {{idx_reg_531}, {5'd0}};

assign shl_ln71_3_fu_1112_p3 = {{idx_i1_reg_473}, {5'd0}};

assign shl_ln71_4_fu_727_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_2_fu_712_p1;

assign shl_ln71_5_fu_1780_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_4_fu_1766_p1;

assign shl_ln71_6_fu_1333_p2 = zext_ln71_6_fu_1296_p1 << zext_ln71_7_fu_1321_p1;

assign shl_ln71_7_fu_1356_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_8_fu_1325_p1;

assign shl_ln71_fu_617_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln71_fu_602_p1;

assign shl_ln_fu_566_p3 = {{idx_i3_reg_316}, {5'd0}};

assign sub_ln13_1_fu_990_p2 = ($signed(8'd159) - $signed(select_ln13_1_fu_974_p3));

assign sub_ln13_fu_968_p2 = ($signed(8'd159) - $signed(shl_ln1_fu_948_p3));

assign sub_ln1499_1_fu_1603_p2 = ($signed(8'd159) - $signed(tmp_1_fu_1567_p3));

assign sub_ln1499_2_fu_1609_p2 = (empty_59_fu_1575_p2 - tmp_1_fu_1567_p3);

assign sub_ln1499_3_fu_1639_p2 = ($signed(8'd159) - $signed(select_ln1499_fu_1615_p3));

assign sub_ln1499_fu_1597_p2 = (tmp_1_fu_1567_p3 - empty_59_fu_1575_p2);

assign sub_ln24_fu_818_p2 = ($signed(end_idx_reg_1949) - $signed(start_idx_1_reg_1942));

assign sub_ln71_1_fu_706_p2 = ($signed(8'd159) - $signed(select_ln71_3_fu_696_p3));

assign sub_ln71_2_fu_1755_p2 = ($signed(8'd159) - $signed(select_ln71_6_fu_1747_p3));

assign sub_ln71_3_fu_1132_p2 = ($signed(8'd159) - $signed(shl_ln71_3_fu_1112_p3));

assign sub_ln71_4_fu_1315_p2 = ($signed(8'd159) - $signed(select_ln71_9_fu_1300_p3));

assign sub_ln71_fu_596_p2 = ($signed(8'd159) - $signed(select_ln71_fu_586_p3));

assign tmp_1_fu_1567_p3 = {{ap_phi_mux_i_4_phi_fu_500_p4}, {5'd0}};

assign tmp_2_fu_1471_p4 = {{buffer_row_data_M_elems_V_2_reg_362[63:32]}};

integer ap_tvar_int_0;

always @ (shl_ln13_fu_1055_p2) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_3_fu_1061_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_3_fu_1061_p4[ap_tvar_int_0] = shl_ln13_fu_1055_p2[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_3_i_fu_1174_p4 = {{p_range_M_elems_V_011_i_fu_162[63:32]}};

assign tmp_4_fu_1486_p4 = {{buffer_row_data_M_elems_V_2_reg_362[95:64]}};

integer ap_tvar_int_1;

always @ (shl_ln71_6_fu_1333_p2) begin
    for (ap_tvar_int_1 = 160 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 159 - 0) begin
            tmp_5_fu_1339_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_5_fu_1339_p4[ap_tvar_int_1] = shl_ln71_6_fu_1333_p2[159 - ap_tvar_int_1];
        end
    end
end

assign tmp_5_i_fu_1208_p4 = {{p_range_M_elems_V_011_i_fu_162[95:64]}};

assign tmp_6_fu_1501_p4 = {{buffer_row_data_M_elems_V_2_reg_362[127:96]}};

assign tmp_7_i_fu_1242_p4 = {{p_range_M_elems_V_011_i_fu_162[127:96]}};

assign tmp_8_fu_1516_p4 = {{buffer_row_data_M_elems_V_2_reg_362[159:128]}};

assign tmp_9_i_fu_1276_p4 = {{p_range_M_elems_V_011_i_fu_162[159:128]}};

integer ap_tvar_int_2;

always @ (buffer_row_data_M_elems_V_2_reg_362) begin
    for (ap_tvar_int_2 = 160 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 159 - 0) begin
            tmp_fu_1587_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_fu_1587_p4[ap_tvar_int_2] = buffer_row_data_M_elems_V_2_reg_362[159 - ap_tvar_int_2];
        end
    end
end

assign trunc_ln1118_fu_1146_p1 = p_range_M_elems_V_011_i_fu_162[31:0];

assign trunc_ln1499_fu_1669_p1 = and_ln1499_fu_1664_p2[31:0];

assign trunc_ln703_fu_1462_p1 = buffer_row_data_M_elems_V_2_reg_362[31:0];

assign xor_ln13_fu_1078_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln13_1_reg_2127);

assign xor_ln71_1_fu_745_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_3_fu_739_p2);

assign xor_ln71_2_fu_1798_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_6_fu_1792_p2);

assign xor_ln71_3_fu_1374_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_9_fu_1368_p2);

assign xor_ln71_fu_635_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln71_fu_629_p2);

assign zext_ln108_fu_801_p1 = i_3_reg_338;

assign zext_ln114_1_fu_857_p1 = k_reg_350;

assign zext_ln114_fu_853_p1 = k_reg_350;

assign zext_ln13_1_fu_1051_p1 = select_ln13_3_fu_1046_p3;

assign zext_ln13_2_fu_996_p1 = select_ln13_2_fu_982_p3;

assign zext_ln13_3_fu_1000_p1 = sub_ln13_1_fu_990_p2;

assign zext_ln13_fu_1042_p1 = select_ln13_fu_1036_p3;

assign zext_ln1499_1_fu_1655_p1 = sub_ln1499_3_reg_2282;

assign zext_ln1499_fu_1645_p1 = select_ln1499_2_fu_1631_p3;

assign zext_ln71_1_fu_606_p1 = sub_ln71_fu_596_p2;

assign zext_ln71_2_fu_712_p1 = select_ln71_4_fu_701_p3;

assign zext_ln71_3_fu_716_p1 = sub_ln71_1_fu_706_p2;

assign zext_ln71_4_fu_1766_p1 = select_ln71_7_fu_1761_p3;

assign zext_ln71_5_fu_1770_p1 = sub_ln71_2_reg_2344;

assign zext_ln71_6_fu_1296_p1 = extracted_scalar_V_5_reg_429;

assign zext_ln71_7_fu_1321_p1 = select_ln71_11_fu_1310_p3;

assign zext_ln71_8_fu_1325_p1 = select_ln71_10_fu_1305_p3;

assign zext_ln71_9_fu_1329_p1 = sub_ln71_4_fu_1315_p2;

assign zext_ln71_fu_602_p1 = select_ln71_1_fu_591_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1842[4:0] <= 5'b00000;
    empty_46_reg_1848[4:0] <= 5'b11111;
    shl_ln71_1_reg_1876[4:0] <= 5'b00000;
    empty_48_reg_1882[4:0] <= 5'b11111;
    zext_ln108_reg_1931[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    indvars_iv_next193_cast_reg_1961[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_2005[31:3] <= 29'b00000000000000000000000000000;
    zext_ln114_1_reg_2010[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    y_rowptr_addr_reg_2054[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    shl_ln1_reg_2111[4:0] <= 5'b00000;
    sub_ln13_reg_2122[4:0] <= 5'b11111;
    shl_ln71_3_reg_2157[4:0] <= 5'b00000;
    empty_55_reg_2164[4:0] <= 5'b11111;
    sub_ln71_3_reg_2178[4:0] <= 5'b11111;
    sub_ln1499_3_reg_2282[0] <= 1'b0;
    shl_ln71_2_reg_2328[4:0] <= 5'b00000;
    empty_60_reg_2333[4:0] <= 5'b11111;
end

endmodule //row_product_Block_ZN8ap_fixedILi32ELi16EL9ap_q_mode5EL9ap_o_mode3ELi0EEC2Ei_exit96_proc
