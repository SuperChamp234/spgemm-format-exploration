// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="row_product_row_product,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=14236,HLS_SYN_LUT=43641,HLS_VERSION=2020_2}" *)

module row_product (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_csr_x_AWVALID,
        m_axi_csr_x_AWREADY,
        m_axi_csr_x_AWADDR,
        m_axi_csr_x_AWID,
        m_axi_csr_x_AWLEN,
        m_axi_csr_x_AWSIZE,
        m_axi_csr_x_AWBURST,
        m_axi_csr_x_AWLOCK,
        m_axi_csr_x_AWCACHE,
        m_axi_csr_x_AWPROT,
        m_axi_csr_x_AWQOS,
        m_axi_csr_x_AWREGION,
        m_axi_csr_x_AWUSER,
        m_axi_csr_x_WVALID,
        m_axi_csr_x_WREADY,
        m_axi_csr_x_WDATA,
        m_axi_csr_x_WSTRB,
        m_axi_csr_x_WLAST,
        m_axi_csr_x_WID,
        m_axi_csr_x_WUSER,
        m_axi_csr_x_ARVALID,
        m_axi_csr_x_ARREADY,
        m_axi_csr_x_ARADDR,
        m_axi_csr_x_ARID,
        m_axi_csr_x_ARLEN,
        m_axi_csr_x_ARSIZE,
        m_axi_csr_x_ARBURST,
        m_axi_csr_x_ARLOCK,
        m_axi_csr_x_ARCACHE,
        m_axi_csr_x_ARPROT,
        m_axi_csr_x_ARQOS,
        m_axi_csr_x_ARREGION,
        m_axi_csr_x_ARUSER,
        m_axi_csr_x_RVALID,
        m_axi_csr_x_RREADY,
        m_axi_csr_x_RDATA,
        m_axi_csr_x_RLAST,
        m_axi_csr_x_RID,
        m_axi_csr_x_RUSER,
        m_axi_csr_x_RRESP,
        m_axi_csr_x_BVALID,
        m_axi_csr_x_BREADY,
        m_axi_csr_x_BRESP,
        m_axi_csr_x_BID,
        m_axi_csr_x_BUSER,
        m_axi_csr_y_AWVALID,
        m_axi_csr_y_AWREADY,
        m_axi_csr_y_AWADDR,
        m_axi_csr_y_AWID,
        m_axi_csr_y_AWLEN,
        m_axi_csr_y_AWSIZE,
        m_axi_csr_y_AWBURST,
        m_axi_csr_y_AWLOCK,
        m_axi_csr_y_AWCACHE,
        m_axi_csr_y_AWPROT,
        m_axi_csr_y_AWQOS,
        m_axi_csr_y_AWREGION,
        m_axi_csr_y_AWUSER,
        m_axi_csr_y_WVALID,
        m_axi_csr_y_WREADY,
        m_axi_csr_y_WDATA,
        m_axi_csr_y_WSTRB,
        m_axi_csr_y_WLAST,
        m_axi_csr_y_WID,
        m_axi_csr_y_WUSER,
        m_axi_csr_y_ARVALID,
        m_axi_csr_y_ARREADY,
        m_axi_csr_y_ARADDR,
        m_axi_csr_y_ARID,
        m_axi_csr_y_ARLEN,
        m_axi_csr_y_ARSIZE,
        m_axi_csr_y_ARBURST,
        m_axi_csr_y_ARLOCK,
        m_axi_csr_y_ARCACHE,
        m_axi_csr_y_ARPROT,
        m_axi_csr_y_ARQOS,
        m_axi_csr_y_ARREGION,
        m_axi_csr_y_ARUSER,
        m_axi_csr_y_RVALID,
        m_axi_csr_y_RREADY,
        m_axi_csr_y_RDATA,
        m_axi_csr_y_RLAST,
        m_axi_csr_y_RID,
        m_axi_csr_y_RUSER,
        m_axi_csr_y_RRESP,
        m_axi_csr_y_BVALID,
        m_axi_csr_y_BREADY,
        m_axi_csr_y_BRESP,
        m_axi_csr_y_BID,
        m_axi_csr_y_BUSER,
        m_axi_csr_z_AWVALID,
        m_axi_csr_z_AWREADY,
        m_axi_csr_z_AWADDR,
        m_axi_csr_z_AWID,
        m_axi_csr_z_AWLEN,
        m_axi_csr_z_AWSIZE,
        m_axi_csr_z_AWBURST,
        m_axi_csr_z_AWLOCK,
        m_axi_csr_z_AWCACHE,
        m_axi_csr_z_AWPROT,
        m_axi_csr_z_AWQOS,
        m_axi_csr_z_AWREGION,
        m_axi_csr_z_AWUSER,
        m_axi_csr_z_WVALID,
        m_axi_csr_z_WREADY,
        m_axi_csr_z_WDATA,
        m_axi_csr_z_WSTRB,
        m_axi_csr_z_WLAST,
        m_axi_csr_z_WID,
        m_axi_csr_z_WUSER,
        m_axi_csr_z_ARVALID,
        m_axi_csr_z_ARREADY,
        m_axi_csr_z_ARADDR,
        m_axi_csr_z_ARID,
        m_axi_csr_z_ARLEN,
        m_axi_csr_z_ARSIZE,
        m_axi_csr_z_ARBURST,
        m_axi_csr_z_ARLOCK,
        m_axi_csr_z_ARCACHE,
        m_axi_csr_z_ARPROT,
        m_axi_csr_z_ARQOS,
        m_axi_csr_z_ARREGION,
        m_axi_csr_z_ARUSER,
        m_axi_csr_z_RVALID,
        m_axi_csr_z_RREADY,
        m_axi_csr_z_RDATA,
        m_axi_csr_z_RLAST,
        m_axi_csr_z_RID,
        m_axi_csr_z_RUSER,
        m_axi_csr_z_RRESP,
        m_axi_csr_z_BVALID,
        m_axi_csr_z_BREADY,
        m_axi_csr_z_BRESP,
        m_axi_csr_z_BID,
        m_axi_csr_z_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 104'd1;
parameter    ap_ST_fsm_state2 = 104'd2;
parameter    ap_ST_fsm_state3 = 104'd4;
parameter    ap_ST_fsm_state4 = 104'd8;
parameter    ap_ST_fsm_state5 = 104'd16;
parameter    ap_ST_fsm_state6 = 104'd32;
parameter    ap_ST_fsm_state7 = 104'd64;
parameter    ap_ST_fsm_state8 = 104'd128;
parameter    ap_ST_fsm_pp0_stage0 = 104'd256;
parameter    ap_ST_fsm_state11 = 104'd512;
parameter    ap_ST_fsm_state12 = 104'd1024;
parameter    ap_ST_fsm_state13 = 104'd2048;
parameter    ap_ST_fsm_state14 = 104'd4096;
parameter    ap_ST_fsm_state15 = 104'd8192;
parameter    ap_ST_fsm_state16 = 104'd16384;
parameter    ap_ST_fsm_state17 = 104'd32768;
parameter    ap_ST_fsm_state18 = 104'd65536;
parameter    ap_ST_fsm_state19 = 104'd131072;
parameter    ap_ST_fsm_state20 = 104'd262144;
parameter    ap_ST_fsm_state21 = 104'd524288;
parameter    ap_ST_fsm_state22 = 104'd1048576;
parameter    ap_ST_fsm_state23 = 104'd2097152;
parameter    ap_ST_fsm_state24 = 104'd4194304;
parameter    ap_ST_fsm_state25 = 104'd8388608;
parameter    ap_ST_fsm_state26 = 104'd16777216;
parameter    ap_ST_fsm_state27 = 104'd33554432;
parameter    ap_ST_fsm_state28 = 104'd67108864;
parameter    ap_ST_fsm_state29 = 104'd134217728;
parameter    ap_ST_fsm_state30 = 104'd268435456;
parameter    ap_ST_fsm_state31 = 104'd536870912;
parameter    ap_ST_fsm_state32 = 104'd1073741824;
parameter    ap_ST_fsm_state33 = 104'd2147483648;
parameter    ap_ST_fsm_state34 = 104'd4294967296;
parameter    ap_ST_fsm_state35 = 104'd8589934592;
parameter    ap_ST_fsm_state36 = 104'd17179869184;
parameter    ap_ST_fsm_state37 = 104'd34359738368;
parameter    ap_ST_fsm_state38 = 104'd68719476736;
parameter    ap_ST_fsm_state39 = 104'd137438953472;
parameter    ap_ST_fsm_state40 = 104'd274877906944;
parameter    ap_ST_fsm_state41 = 104'd549755813888;
parameter    ap_ST_fsm_state42 = 104'd1099511627776;
parameter    ap_ST_fsm_state43 = 104'd2199023255552;
parameter    ap_ST_fsm_state44 = 104'd4398046511104;
parameter    ap_ST_fsm_state45 = 104'd8796093022208;
parameter    ap_ST_fsm_state46 = 104'd17592186044416;
parameter    ap_ST_fsm_state47 = 104'd35184372088832;
parameter    ap_ST_fsm_state48 = 104'd70368744177664;
parameter    ap_ST_fsm_state49 = 104'd140737488355328;
parameter    ap_ST_fsm_state50 = 104'd281474976710656;
parameter    ap_ST_fsm_state51 = 104'd562949953421312;
parameter    ap_ST_fsm_state52 = 104'd1125899906842624;
parameter    ap_ST_fsm_state53 = 104'd2251799813685248;
parameter    ap_ST_fsm_state54 = 104'd4503599627370496;
parameter    ap_ST_fsm_state55 = 104'd9007199254740992;
parameter    ap_ST_fsm_pp2_stage0 = 104'd18014398509481984;
parameter    ap_ST_fsm_pp2_stage1 = 104'd36028797018963968;
parameter    ap_ST_fsm_pp2_stage2 = 104'd72057594037927936;
parameter    ap_ST_fsm_pp2_stage3 = 104'd144115188075855872;
parameter    ap_ST_fsm_pp2_stage4 = 104'd288230376151711744;
parameter    ap_ST_fsm_pp2_stage5 = 104'd576460752303423488;
parameter    ap_ST_fsm_pp2_stage6 = 104'd1152921504606846976;
parameter    ap_ST_fsm_pp2_stage7 = 104'd2305843009213693952;
parameter    ap_ST_fsm_pp2_stage8 = 104'd4611686018427387904;
parameter    ap_ST_fsm_pp2_stage9 = 104'd9223372036854775808;
parameter    ap_ST_fsm_state76 = 104'd18446744073709551616;
parameter    ap_ST_fsm_pp3_stage0 = 104'd36893488147419103232;
parameter    ap_ST_fsm_state79 = 104'd73786976294838206464;
parameter    ap_ST_fsm_state80 = 104'd147573952589676412928;
parameter    ap_ST_fsm_state81 = 104'd295147905179352825856;
parameter    ap_ST_fsm_state82 = 104'd590295810358705651712;
parameter    ap_ST_fsm_state83 = 104'd1180591620717411303424;
parameter    ap_ST_fsm_state84 = 104'd2361183241434822606848;
parameter    ap_ST_fsm_state85 = 104'd4722366482869645213696;
parameter    ap_ST_fsm_state86 = 104'd9444732965739290427392;
parameter    ap_ST_fsm_state87 = 104'd18889465931478580854784;
parameter    ap_ST_fsm_state88 = 104'd37778931862957161709568;
parameter    ap_ST_fsm_state89 = 104'd75557863725914323419136;
parameter    ap_ST_fsm_state90 = 104'd151115727451828646838272;
parameter    ap_ST_fsm_state91 = 104'd302231454903657293676544;
parameter    ap_ST_fsm_state92 = 104'd604462909807314587353088;
parameter    ap_ST_fsm_state93 = 104'd1208925819614629174706176;
parameter    ap_ST_fsm_state94 = 104'd2417851639229258349412352;
parameter    ap_ST_fsm_state95 = 104'd4835703278458516698824704;
parameter    ap_ST_fsm_state96 = 104'd9671406556917033397649408;
parameter    ap_ST_fsm_state97 = 104'd19342813113834066795298816;
parameter    ap_ST_fsm_state98 = 104'd38685626227668133590597632;
parameter    ap_ST_fsm_state99 = 104'd77371252455336267181195264;
parameter    ap_ST_fsm_state100 = 104'd154742504910672534362390528;
parameter    ap_ST_fsm_state101 = 104'd309485009821345068724781056;
parameter    ap_ST_fsm_state102 = 104'd618970019642690137449562112;
parameter    ap_ST_fsm_state103 = 104'd1237940039285380274899124224;
parameter    ap_ST_fsm_state104 = 104'd2475880078570760549798248448;
parameter    ap_ST_fsm_pp4_stage0 = 104'd4951760157141521099596496896;
parameter    ap_ST_fsm_pp4_stage1 = 104'd9903520314283042199192993792;
parameter    ap_ST_fsm_state117 = 104'd19807040628566084398385987584;
parameter    ap_ST_fsm_state118 = 104'd39614081257132168796771975168;
parameter    ap_ST_fsm_state119 = 104'd79228162514264337593543950336;
parameter    ap_ST_fsm_state120 = 104'd158456325028528675187087900672;
parameter    ap_ST_fsm_state121 = 104'd316912650057057350374175801344;
parameter    ap_ST_fsm_state122 = 104'd633825300114114700748351602688;
parameter    ap_ST_fsm_state123 = 104'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state124 = 104'd2535301200456458802993406410752;
parameter    ap_ST_fsm_pp5_stage0 = 104'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state127 = 104'd10141204801825835211973625643008;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CSR_X_ID_WIDTH = 1;
parameter    C_M_AXI_CSR_X_ADDR_WIDTH = 64;
parameter    C_M_AXI_CSR_X_DATA_WIDTH = 64;
parameter    C_M_AXI_CSR_X_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_X_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_X_WUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_X_RUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_X_BUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_X_USER_VALUE = 0;
parameter    C_M_AXI_CSR_X_PROT_VALUE = 0;
parameter    C_M_AXI_CSR_X_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CSR_Y_ID_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_ADDR_WIDTH = 64;
parameter    C_M_AXI_CSR_Y_DATA_WIDTH = 64;
parameter    C_M_AXI_CSR_Y_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_WUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_RUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_BUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Y_USER_VALUE = 0;
parameter    C_M_AXI_CSR_Y_PROT_VALUE = 0;
parameter    C_M_AXI_CSR_Y_CACHE_VALUE = 3;
parameter    C_M_AXI_CSR_Z_ID_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_ADDR_WIDTH = 64;
parameter    C_M_AXI_CSR_Z_DATA_WIDTH = 64;
parameter    C_M_AXI_CSR_Z_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_WUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_RUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_BUSER_WIDTH = 1;
parameter    C_M_AXI_CSR_Z_USER_VALUE = 0;
parameter    C_M_AXI_CSR_Z_PROT_VALUE = 0;
parameter    C_M_AXI_CSR_Z_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CSR_X_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CSR_Y_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_CSR_Z_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_csr_x_AWVALID;
input   m_axi_csr_x_AWREADY;
output  [C_M_AXI_CSR_X_ADDR_WIDTH - 1:0] m_axi_csr_x_AWADDR;
output  [C_M_AXI_CSR_X_ID_WIDTH - 1:0] m_axi_csr_x_AWID;
output  [7:0] m_axi_csr_x_AWLEN;
output  [2:0] m_axi_csr_x_AWSIZE;
output  [1:0] m_axi_csr_x_AWBURST;
output  [1:0] m_axi_csr_x_AWLOCK;
output  [3:0] m_axi_csr_x_AWCACHE;
output  [2:0] m_axi_csr_x_AWPROT;
output  [3:0] m_axi_csr_x_AWQOS;
output  [3:0] m_axi_csr_x_AWREGION;
output  [C_M_AXI_CSR_X_AWUSER_WIDTH - 1:0] m_axi_csr_x_AWUSER;
output   m_axi_csr_x_WVALID;
input   m_axi_csr_x_WREADY;
output  [C_M_AXI_CSR_X_DATA_WIDTH - 1:0] m_axi_csr_x_WDATA;
output  [C_M_AXI_CSR_X_WSTRB_WIDTH - 1:0] m_axi_csr_x_WSTRB;
output   m_axi_csr_x_WLAST;
output  [C_M_AXI_CSR_X_ID_WIDTH - 1:0] m_axi_csr_x_WID;
output  [C_M_AXI_CSR_X_WUSER_WIDTH - 1:0] m_axi_csr_x_WUSER;
output   m_axi_csr_x_ARVALID;
input   m_axi_csr_x_ARREADY;
output  [C_M_AXI_CSR_X_ADDR_WIDTH - 1:0] m_axi_csr_x_ARADDR;
output  [C_M_AXI_CSR_X_ID_WIDTH - 1:0] m_axi_csr_x_ARID;
output  [7:0] m_axi_csr_x_ARLEN;
output  [2:0] m_axi_csr_x_ARSIZE;
output  [1:0] m_axi_csr_x_ARBURST;
output  [1:0] m_axi_csr_x_ARLOCK;
output  [3:0] m_axi_csr_x_ARCACHE;
output  [2:0] m_axi_csr_x_ARPROT;
output  [3:0] m_axi_csr_x_ARQOS;
output  [3:0] m_axi_csr_x_ARREGION;
output  [C_M_AXI_CSR_X_ARUSER_WIDTH - 1:0] m_axi_csr_x_ARUSER;
input   m_axi_csr_x_RVALID;
output   m_axi_csr_x_RREADY;
input  [C_M_AXI_CSR_X_DATA_WIDTH - 1:0] m_axi_csr_x_RDATA;
input   m_axi_csr_x_RLAST;
input  [C_M_AXI_CSR_X_ID_WIDTH - 1:0] m_axi_csr_x_RID;
input  [C_M_AXI_CSR_X_RUSER_WIDTH - 1:0] m_axi_csr_x_RUSER;
input  [1:0] m_axi_csr_x_RRESP;
input   m_axi_csr_x_BVALID;
output   m_axi_csr_x_BREADY;
input  [1:0] m_axi_csr_x_BRESP;
input  [C_M_AXI_CSR_X_ID_WIDTH - 1:0] m_axi_csr_x_BID;
input  [C_M_AXI_CSR_X_BUSER_WIDTH - 1:0] m_axi_csr_x_BUSER;
output   m_axi_csr_y_AWVALID;
input   m_axi_csr_y_AWREADY;
output  [C_M_AXI_CSR_Y_ADDR_WIDTH - 1:0] m_axi_csr_y_AWADDR;
output  [C_M_AXI_CSR_Y_ID_WIDTH - 1:0] m_axi_csr_y_AWID;
output  [7:0] m_axi_csr_y_AWLEN;
output  [2:0] m_axi_csr_y_AWSIZE;
output  [1:0] m_axi_csr_y_AWBURST;
output  [1:0] m_axi_csr_y_AWLOCK;
output  [3:0] m_axi_csr_y_AWCACHE;
output  [2:0] m_axi_csr_y_AWPROT;
output  [3:0] m_axi_csr_y_AWQOS;
output  [3:0] m_axi_csr_y_AWREGION;
output  [C_M_AXI_CSR_Y_AWUSER_WIDTH - 1:0] m_axi_csr_y_AWUSER;
output   m_axi_csr_y_WVALID;
input   m_axi_csr_y_WREADY;
output  [C_M_AXI_CSR_Y_DATA_WIDTH - 1:0] m_axi_csr_y_WDATA;
output  [C_M_AXI_CSR_Y_WSTRB_WIDTH - 1:0] m_axi_csr_y_WSTRB;
output   m_axi_csr_y_WLAST;
output  [C_M_AXI_CSR_Y_ID_WIDTH - 1:0] m_axi_csr_y_WID;
output  [C_M_AXI_CSR_Y_WUSER_WIDTH - 1:0] m_axi_csr_y_WUSER;
output   m_axi_csr_y_ARVALID;
input   m_axi_csr_y_ARREADY;
output  [C_M_AXI_CSR_Y_ADDR_WIDTH - 1:0] m_axi_csr_y_ARADDR;
output  [C_M_AXI_CSR_Y_ID_WIDTH - 1:0] m_axi_csr_y_ARID;
output  [7:0] m_axi_csr_y_ARLEN;
output  [2:0] m_axi_csr_y_ARSIZE;
output  [1:0] m_axi_csr_y_ARBURST;
output  [1:0] m_axi_csr_y_ARLOCK;
output  [3:0] m_axi_csr_y_ARCACHE;
output  [2:0] m_axi_csr_y_ARPROT;
output  [3:0] m_axi_csr_y_ARQOS;
output  [3:0] m_axi_csr_y_ARREGION;
output  [C_M_AXI_CSR_Y_ARUSER_WIDTH - 1:0] m_axi_csr_y_ARUSER;
input   m_axi_csr_y_RVALID;
output   m_axi_csr_y_RREADY;
input  [C_M_AXI_CSR_Y_DATA_WIDTH - 1:0] m_axi_csr_y_RDATA;
input   m_axi_csr_y_RLAST;
input  [C_M_AXI_CSR_Y_ID_WIDTH - 1:0] m_axi_csr_y_RID;
input  [C_M_AXI_CSR_Y_RUSER_WIDTH - 1:0] m_axi_csr_y_RUSER;
input  [1:0] m_axi_csr_y_RRESP;
input   m_axi_csr_y_BVALID;
output   m_axi_csr_y_BREADY;
input  [1:0] m_axi_csr_y_BRESP;
input  [C_M_AXI_CSR_Y_ID_WIDTH - 1:0] m_axi_csr_y_BID;
input  [C_M_AXI_CSR_Y_BUSER_WIDTH - 1:0] m_axi_csr_y_BUSER;
output   m_axi_csr_z_AWVALID;
input   m_axi_csr_z_AWREADY;
output  [C_M_AXI_CSR_Z_ADDR_WIDTH - 1:0] m_axi_csr_z_AWADDR;
output  [C_M_AXI_CSR_Z_ID_WIDTH - 1:0] m_axi_csr_z_AWID;
output  [7:0] m_axi_csr_z_AWLEN;
output  [2:0] m_axi_csr_z_AWSIZE;
output  [1:0] m_axi_csr_z_AWBURST;
output  [1:0] m_axi_csr_z_AWLOCK;
output  [3:0] m_axi_csr_z_AWCACHE;
output  [2:0] m_axi_csr_z_AWPROT;
output  [3:0] m_axi_csr_z_AWQOS;
output  [3:0] m_axi_csr_z_AWREGION;
output  [C_M_AXI_CSR_Z_AWUSER_WIDTH - 1:0] m_axi_csr_z_AWUSER;
output   m_axi_csr_z_WVALID;
input   m_axi_csr_z_WREADY;
output  [C_M_AXI_CSR_Z_DATA_WIDTH - 1:0] m_axi_csr_z_WDATA;
output  [C_M_AXI_CSR_Z_WSTRB_WIDTH - 1:0] m_axi_csr_z_WSTRB;
output   m_axi_csr_z_WLAST;
output  [C_M_AXI_CSR_Z_ID_WIDTH - 1:0] m_axi_csr_z_WID;
output  [C_M_AXI_CSR_Z_WUSER_WIDTH - 1:0] m_axi_csr_z_WUSER;
output   m_axi_csr_z_ARVALID;
input   m_axi_csr_z_ARREADY;
output  [C_M_AXI_CSR_Z_ADDR_WIDTH - 1:0] m_axi_csr_z_ARADDR;
output  [C_M_AXI_CSR_Z_ID_WIDTH - 1:0] m_axi_csr_z_ARID;
output  [7:0] m_axi_csr_z_ARLEN;
output  [2:0] m_axi_csr_z_ARSIZE;
output  [1:0] m_axi_csr_z_ARBURST;
output  [1:0] m_axi_csr_z_ARLOCK;
output  [3:0] m_axi_csr_z_ARCACHE;
output  [2:0] m_axi_csr_z_ARPROT;
output  [3:0] m_axi_csr_z_ARQOS;
output  [3:0] m_axi_csr_z_ARREGION;
output  [C_M_AXI_CSR_Z_ARUSER_WIDTH - 1:0] m_axi_csr_z_ARUSER;
input   m_axi_csr_z_RVALID;
output   m_axi_csr_z_RREADY;
input  [C_M_AXI_CSR_Z_DATA_WIDTH - 1:0] m_axi_csr_z_RDATA;
input   m_axi_csr_z_RLAST;
input  [C_M_AXI_CSR_Z_ID_WIDTH - 1:0] m_axi_csr_z_RID;
input  [C_M_AXI_CSR_Z_RUSER_WIDTH - 1:0] m_axi_csr_z_RUSER;
input  [1:0] m_axi_csr_z_RRESP;
input   m_axi_csr_z_BVALID;
output   m_axi_csr_z_BREADY;
input  [1:0] m_axi_csr_z_BRESP;
input  [C_M_AXI_CSR_Z_ID_WIDTH - 1:0] m_axi_csr_z_BID;
input  [C_M_AXI_CSR_Z_BUSER_WIDTH - 1:0] m_axi_csr_z_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [103:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] x_rowptr;
wire   [63:0] x_colind;
wire   [63:0] x_data;
wire   [63:0] y_rowptr;
wire   [63:0] y_colind;
wire   [63:0] y_data;
wire   [63:0] z_rowptr;
wire   [63:0] z_colind;
wire   [63:0] z_data;
reg    csr_x_blk_n_AR;
wire    ap_CS_fsm_state13;
reg    csr_x_blk_n_R;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
reg   [0:0] icmp_ln44_1_reg_2807;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    csr_y_blk_n_AR;
wire    ap_CS_fsm_state46;
reg    csr_y_blk_n_R;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln15_reg_2939;
wire    ap_CS_fsm_pp2_stage8;
wire    ap_block_pp2_stage8;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] and_ln18_reg_2964;
wire    ap_CS_fsm_pp2_stage7;
wire    ap_block_pp2_stage7;
reg   [0:0] icmp_ln15_reg_2939_pp2_iter1_reg;
reg    csr_z_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    csr_z_blk_n_W;
wire    ap_CS_fsm_state3;
reg    csr_z_blk_n_B;
wire    ap_CS_fsm_state8;
reg    csr_z_blk_n_AR;
wire    ap_CS_fsm_state96;
reg    csr_z_blk_n_R;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln84_reg_3218;
reg   [0:0] icmp_ln84_reg_3218_pp4_iter1_reg;
reg   [0:0] and_ln86_reg_3258;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_pp4_stage1;
reg   [0:0] icmp_ln84_reg_3218_pp4_iter2_reg;
reg    ap_enable_reg_pp4_iter5;
reg   [0:0] icmp_ln84_reg_3218_pp4_iter4_reg;
reg   [0:0] and_ln86_reg_3258_pp4_iter4_reg;
reg    ap_enable_reg_pp4_iter3;
reg   [0:0] and_ln86_reg_3258_pp4_iter2_reg;
reg   [0:0] icmp_ln84_reg_3218_pp4_iter5_reg;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state124;
wire    csr_x_AWREADY;
wire    csr_x_WREADY;
reg    csr_x_ARVALID;
wire    csr_x_ARREADY;
reg   [63:0] csr_x_ARADDR;
wire    csr_x_RVALID;
reg    csr_x_RREADY;
wire   [63:0] csr_x_RDATA;
wire    csr_x_RLAST;
wire   [0:0] csr_x_RID;
wire   [0:0] csr_x_RUSER;
wire   [1:0] csr_x_RRESP;
wire    csr_x_BVALID;
wire   [1:0] csr_x_BRESP;
wire   [0:0] csr_x_BID;
wire   [0:0] csr_x_BUSER;
wire    csr_y_AWREADY;
wire    csr_y_WREADY;
reg    csr_y_ARVALID;
wire    csr_y_ARREADY;
reg   [63:0] csr_y_ARADDR;
wire    csr_y_RVALID;
reg    csr_y_RREADY;
wire   [63:0] csr_y_RDATA;
wire    csr_y_RLAST;
wire   [0:0] csr_y_RID;
wire   [0:0] csr_y_RUSER;
wire   [1:0] csr_y_RRESP;
wire    csr_y_BVALID;
wire   [1:0] csr_y_BRESP;
wire   [0:0] csr_y_BID;
wire   [0:0] csr_y_BUSER;
reg    csr_z_AWVALID;
wire    csr_z_AWREADY;
reg   [63:0] csr_z_AWADDR;
reg    csr_z_WVALID;
wire    csr_z_WREADY;
reg   [63:0] csr_z_WDATA;
reg   [7:0] csr_z_WSTRB;
reg    csr_z_ARVALID;
wire    csr_z_ARREADY;
wire    csr_z_RVALID;
reg    csr_z_RREADY;
wire   [63:0] csr_z_RDATA;
wire    csr_z_RLAST;
wire   [0:0] csr_z_RID;
wire   [0:0] csr_z_RUSER;
wire   [1:0] csr_z_RRESP;
wire    csr_z_BVALID;
reg    csr_z_BREADY;
wire   [1:0] csr_z_BRESP;
wire   [0:0] csr_z_BID;
wire   [0:0] csr_z_BUSER;
reg   [2:0] idx283_reg_448;
reg   [2:0] i_1_reg_503;
reg   [2:0] i_1_reg_503_pp2_iter1_reg;
wire    ap_block_state56_pp2_stage0_iter0;
wire    ap_block_state66_pp2_stage0_iter1;
reg    ap_predicate_op408_readreq_state66;
reg    ap_block_state66_io;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] j_3_reg_515;
reg   [31:0] j_5_reg_525;
reg   [2:0] idx287_reg_537;
reg   [2:0] i_reg_566;
reg   [2:0] i_reg_566_pp4_iter1_reg;
wire    ap_block_state105_pp4_stage0_iter0;
wire    ap_block_state107_pp4_stage0_iter1;
wire    ap_block_state109_pp4_stage0_iter2;
reg    ap_predicate_op670_writereq_state109;
reg    ap_block_state109_io;
wire    ap_block_state111_pp4_stage0_iter3;
reg    ap_predicate_op683_write_state111;
reg    ap_block_state111_io;
wire    ap_block_state113_pp4_stage0_iter4;
reg    ap_predicate_op690_writeresp_state115;
reg    ap_block_state115_pp4_stage0_iter5;
reg    ap_block_pp4_stage0_11001;
reg   [31:0] inc67_i_reg_578;
reg   [31:0] inc5_i_reg_588;
reg   [2:0] idx289_reg_600;
reg   [63:0] z_data_read_reg_2559;
reg   [63:0] z_colind_read_reg_2564;
reg   [63:0] z_rowptr_read_reg_2570;
reg   [63:0] y_data_read_reg_2576;
reg   [63:0] y_colind_read_reg_2581;
reg   [63:0] y_rowptr_read_reg_2587;
reg   [63:0] x_data_read_reg_2593;
reg   [63:0] x_colind_read_reg_2598;
reg   [63:0] x_rowptr_read_reg_2604;
wire   [2:0] trunc_ln128_fu_668_p1;
reg   [2:0] trunc_ln128_reg_2610;
reg   [60:0] trunc_ln128_1_reg_2617;
wire   [7:0] shl_ln128_fu_685_p2;
reg   [7:0] shl_ln128_reg_2622;
wire   [2:0] add_ln69_fu_701_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln69_fu_707_p2;
reg   [0:0] icmp_ln69_reg_2638;
wire   [8:0] shl_ln_fu_713_p3;
reg   [8:0] shl_ln_reg_2642;
wire   [8:0] empty_34_fu_721_p2;
reg   [8:0] empty_34_reg_2648;
wire   [0:0] icmp_ln71_fu_727_p2;
reg   [0:0] icmp_ln71_reg_2654;
wire   [2:0] empty_33_fu_811_p1;
reg   [2:0] empty_33_reg_2681;
wire    ap_CS_fsm_state11;
wire   [2:0] trunc_ln46_fu_814_p1;
reg   [2:0] trunc_ln46_reg_2686;
wire   [2:0] trunc_ln11_fu_817_p1;
reg   [2:0] trunc_ln11_reg_2691;
wire   [2:0] trunc_ln17_fu_820_p1;
reg   [2:0] trunc_ln17_reg_2696;
wire   [2:0] trunc_ln90_fu_823_p1;
reg   [2:0] trunc_ln90_reg_2701;
wire   [2:0] indvars_iv_next277_fu_831_p2;
reg   [2:0] indvars_iv_next277_reg_2706;
wire    ap_CS_fsm_state12;
reg   [319:0] buffer_row_data_M_elems_1_load_reg_2713;
wire   [63:0] p_cast37_fu_851_p1;
reg   [63:0] p_cast37_reg_2721;
wire   [0:0] icmp_ln135_fu_837_p2;
reg   [60:0] p_cast1_reg_2726;
reg   [60:0] p_cast3_reg_2731;
reg   [63:0] csr_x_addr_read_reg_2748;
wire   [2:0] empty_36_fu_906_p2;
reg   [2:0] empty_36_reg_2753;
wire   [2:0] empty_38_fu_912_p2;
reg   [2:0] empty_38_reg_2758;
wire  signed [31:0] j_fu_934_p1;
reg  signed [31:0] j_reg_2763;
reg   [63:0] csr_x_addr_1_read_reg_2769;
wire   [0:0] icmp_ln44_fu_964_p2;
reg   [0:0] icmp_ln44_reg_2774;
wire    ap_CS_fsm_state22;
wire  signed [63:0] sext_ln44_fu_969_p1;
reg  signed [63:0] sext_ln44_reg_2778;
wire  signed [63:0] sext_ln44_1_fu_972_p1;
reg  signed [63:0] sext_ln44_1_reg_2783;
wire   [2:0] add_ln137_fu_976_p2;
reg   [2:0] add_ln137_reg_2788;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln137_fu_982_p2;
wire   [31:0] zext_ln137_fu_988_p1;
reg   [31:0] zext_ln137_reg_2797;
reg   [60:0] p_cast7_reg_2802;
wire   [0:0] icmp_ln44_1_fu_1006_p2;
wire    ap_CS_fsm_state24;
wire   [0:0] trunc_ln46_2_fu_1017_p1;
reg   [0:0] trunc_ln46_2_reg_2811;
reg   [60:0] p_cast8_reg_2816;
reg   [63:0] csr_x_addr_2_read_reg_2827;
wire   [63:0] add_ln44_fu_1084_p2;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln47_fu_1079_p2;
reg   [60:0] p_cast_reg_2840;
wire    ap_CS_fsm_state34;
reg   [63:0] csr_x_addr_3_read_reg_2851;
reg   [10:0] tmp_17_reg_2857;
wire   [51:0] trunc_ln140_fu_1131_p1;
reg   [51:0] trunc_ln140_reg_2862;
wire   [63:0] extracted_scalar_fu_1135_p1;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln140_fu_1139_p2;
reg   [0:0] icmp_ln140_reg_2872;
wire   [0:0] icmp_ln140_1_fu_1144_p2;
reg   [0:0] icmp_ln140_1_reg_2877;
wire   [0:0] and_ln140_fu_1153_p2;
reg   [0:0] and_ln140_reg_2882;
wire    ap_CS_fsm_state44;
reg   [60:0] p_cast6_reg_2886;
wire    ap_CS_fsm_state45;
wire   [2:0] empty_48_fu_1192_p2;
reg   [2:0] empty_48_reg_2891;
reg   [60:0] p_cast9_reg_2897;
reg   [63:0] csr_y_addr_read_reg_2914;
wire   [31:0] j_2_fu_1249_p1;
reg   [31:0] j_2_reg_2919;
reg   [63:0] csr_y_addr_1_read_reg_2924;
wire   [31:0] empty_53_fu_1275_p1;
reg   [31:0] empty_53_reg_2929;
wire    ap_CS_fsm_state55;
wire   [2:0] add_ln15_fu_1279_p2;
reg   [2:0] add_ln15_reg_2934;
wire   [0:0] icmp_ln15_fu_1285_p2;
reg   [60:0] p_cast10_reg_2943;
wire   [0:0] icmp_ln18_fu_1318_p2;
reg   [0:0] icmp_ln18_reg_2948;
wire    ap_block_state57_pp2_stage1_iter0;
reg    ap_block_state57_io;
wire    ap_block_state67_pp2_stage1_iter1;
reg    ap_block_pp2_stage1_11001;
reg   [63:0] csr_y_addr_2_read_reg_2959;
reg    ap_block_state64_pp2_stage8_iter0;
wire    ap_block_state74_pp2_stage8_iter1;
reg    ap_block_pp2_stage8_11001;
wire   [0:0] and_ln18_fu_1381_p2;
wire    ap_CS_fsm_pp2_stage9;
wire    ap_block_state65_pp2_stage9_iter0;
wire    ap_block_state75_pp2_stage9_iter1;
wire    ap_block_pp2_stage9_11001;
reg   [60:0] p_cast11_reg_2968;
reg   [63:0] csr_y_addr_3_read_reg_2979;
wire    ap_block_state63_pp2_stage7_iter0;
reg    ap_predicate_op415_read_state73;
reg    ap_block_state73_pp2_stage7_iter1;
reg    ap_block_pp2_stage7_11001;
wire   [8:0] shl_ln4_fu_1430_p3;
reg   [8:0] shl_ln4_reg_2984;
wire   [8:0] empty_59_fu_1438_p2;
reg   [8:0] empty_59_reg_2989;
wire   [0:0] icmp_ln29_fu_1444_p2;
reg   [0:0] icmp_ln29_reg_2994;
wire   [8:0] sub_ln29_fu_1458_p2;
reg   [8:0] sub_ln29_reg_3000;
wire   [8:0] shl_ln9_fu_1464_p3;
reg   [8:0] shl_ln9_reg_3005;
wire   [8:0] empty_58_fu_1472_p2;
reg   [8:0] empty_58_reg_3010;
wire   [0:0] icmp_ln21_fu_1478_p2;
reg   [0:0] icmp_ln21_reg_3015;
wire   [8:0] sub_ln21_1_fu_1509_p2;
reg   [8:0] sub_ln21_1_reg_3021;
wire   [319:0] shl_ln21_fu_1519_p2;
reg   [319:0] shl_ln21_reg_3026;
wire   [63:0] bitcast_ln142_fu_1669_p1;
reg   [63:0] bitcast_ln142_reg_3032;
wire    ap_CS_fsm_state76;
wire   [63:0] bitcast_ln142_1_fu_1683_p1;
reg   [63:0] bitcast_ln142_1_reg_3037;
wire   [63:0] bitcast_ln142_2_fu_1697_p1;
reg   [63:0] bitcast_ln142_2_reg_3042;
wire   [63:0] bitcast_ln142_3_fu_1711_p1;
reg   [63:0] bitcast_ln142_3_reg_3047;
wire   [63:0] bitcast_ln142_4_fu_1725_p1;
reg   [63:0] bitcast_ln142_4_reg_3052;
wire   [2:0] add_ln69_2_fu_1729_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state77_pp3_stage0_iter0;
wire    ap_block_state78_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln69_2_fu_1735_p2;
reg   [0:0] icmp_ln69_2_reg_3062;
wire   [8:0] shl_ln71_2_fu_1741_p3;
reg   [8:0] shl_ln71_2_reg_3066;
wire   [8:0] empty_61_fu_1749_p2;
reg   [8:0] empty_61_reg_3073;
wire   [0:0] icmp_ln71_2_fu_1755_p2;
reg   [0:0] icmp_ln71_2_reg_3079;
wire   [8:0] sub_ln71_2_fu_1761_p2;
reg   [8:0] sub_ln71_2_reg_3087;
wire    ap_CS_fsm_state79;
wire   [63:0] grp_fu_631_p2;
reg   [63:0] mul_i_i_reg_3117;
wire    ap_CS_fsm_state85;
wire   [63:0] grp_fu_635_p2;
reg   [63:0] mul_1_i_i_reg_3122;
wire   [63:0] grp_fu_639_p2;
reg   [63:0] mul_2_i_i_reg_3127;
wire   [63:0] grp_fu_643_p2;
reg   [63:0] mul_3_i_i_reg_3132;
wire   [63:0] grp_fu_647_p2;
reg   [63:0] mul_4_i_i_reg_3137;
wire    ap_CS_fsm_state86;
wire   [63:0] grp_fu_611_p2;
reg   [63:0] add_i_i_reg_3167;
wire    ap_CS_fsm_state92;
wire   [63:0] grp_fu_615_p2;
reg   [63:0] add_1_i_i_reg_3172;
wire   [63:0] grp_fu_619_p2;
reg   [63:0] add_2_i_i_reg_3177;
wire   [63:0] grp_fu_623_p2;
reg   [63:0] add_3_i_i_reg_3182;
wire   [63:0] grp_fu_627_p2;
reg   [63:0] add_4_i_i_reg_3187;
wire   [319:0] buffer_row_data_M_elems_5_fu_2026_p6;
wire    ap_CS_fsm_state93;
reg   [63:0] csr_z_addr_1_read_reg_3203;
wire   [2:0] empty_62_fu_2050_p2;
reg   [2:0] empty_62_reg_3208;
wire   [31:0] empty_64_fu_2070_p1;
wire    ap_CS_fsm_state104;
wire   [0:0] icmp_ln84_fu_2074_p2;
reg   [0:0] icmp_ln84_reg_3218_pp4_iter3_reg;
wire   [8:0] sub_ln86_3_fu_2152_p2;
reg   [8:0] sub_ln86_3_reg_3222;
wire   [319:0] lshr_ln86_fu_2162_p2;
reg   [319:0] lshr_ln86_reg_3227;
wire   [2:0] add_ln84_fu_2168_p2;
reg   [2:0] add_ln84_reg_3232;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state106_pp4_stage1_iter0;
wire    ap_block_state108_pp4_stage1_iter1;
wire    ap_block_state110_pp4_stage1_iter2;
reg    ap_predicate_op678_write_state110;
reg    ap_predicate_op681_writereq_state110;
reg    ap_block_state110_io;
wire    ap_block_state112_pp4_stage1_iter3;
wire    ap_block_state114_pp4_stage1_iter4;
reg    ap_predicate_op692_writeresp_state116;
reg    ap_block_state116_pp4_stage1_iter5;
reg    ap_block_pp4_stage1_11001;
wire   [63:0] trunc_ln86_fu_2188_p1;
reg   [63:0] trunc_ln86_reg_3237;
reg   [63:0] trunc_ln86_reg_3237_pp4_iter1_reg;
reg   [63:0] trunc_ln86_reg_3237_pp4_iter2_reg;
wire   [0:0] icmp_ln86_fu_2206_p2;
reg   [0:0] icmp_ln86_reg_3243;
wire   [0:0] icmp_ln86_1_fu_2212_p2;
reg   [0:0] icmp_ln86_1_reg_3248;
wire   [63:0] bitcast_ln86_fu_2218_p1;
wire   [0:0] and_ln86_fu_2226_p2;
reg   [0:0] and_ln86_reg_3258_pp4_iter3_reg;
wire   [2:0] empty_67_fu_2261_p2;
reg   [2:0] empty_67_reg_3262;
wire   [7:0] empty_68_fu_2270_p2;
reg   [7:0] empty_68_reg_3267;
reg   [60:0] p_cast4_reg_3272;
wire   [31:0] add_ln92_fu_2286_p2;
wire   [58:0] empty_69_fu_2307_p2;
reg   [58:0] empty_69_reg_3282;
reg   [60:0] p_cast5_reg_3293;
wire   [2:0] empty_72_fu_2389_p2;
reg   [2:0] empty_72_reg_3304;
wire    ap_CS_fsm_state117;
wire   [63:0] empty_74_fu_2406_p2;
reg   [63:0] empty_74_reg_3309;
reg   [60:0] p_cast2_reg_3314;
wire   [7:0] empty_73_fu_2425_p2;
reg   [7:0] empty_73_reg_3319;
wire   [2:0] add_ln69_1_fu_2441_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state125_pp5_stage0_iter0;
wire    ap_block_state126_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln69_1_fu_2447_p2;
reg   [0:0] icmp_ln69_1_reg_3335;
wire   [8:0] shl_ln71_1_fu_2453_p3;
reg   [8:0] shl_ln71_1_reg_3339;
wire   [8:0] empty_78_fu_2461_p2;
reg   [8:0] empty_78_reg_3344;
wire   [0:0] icmp_ln71_1_fu_2467_p2;
reg   [0:0] icmp_ln71_1_reg_3349;
wire   [8:0] sub_ln71_1_fu_2481_p2;
reg   [8:0] sub_ln71_1_reg_3355;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state56;
wire    ap_block_pp2_stage9_subdone;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state77;
reg    ap_enable_reg_pp3_iter1;
reg    ap_block_pp4_stage1_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_enable_reg_pp4_iter1;
reg    ap_condition_pp4_exit_iter1_state108;
reg    ap_enable_reg_pp4_iter4;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state125;
reg    ap_enable_reg_pp5_iter1;
reg   [2:0] i_3_reg_459;
wire    ap_CS_fsm_state127;
wire   [319:0] ap_phi_mux_buffer_row_data_M_elems_2_phi_fu_474_p4;
reg   [319:0] buffer_row_data_M_elems_2_reg_471;
wire    ap_CS_fsm_state95;
reg   [2:0] k_reg_481;
reg   [63:0] j_1_reg_493;
reg   [2:0] ap_phi_mux_i_1_phi_fu_507_p4;
reg   [31:0] ap_phi_mux_j_3_phi_fu_518_p4;
wire   [31:0] j_4_fu_1413_p2;
wire   [31:0] ap_phi_reg_pp2_iter0_j_5_reg_525;
reg   [319:0] buffer_row_data_M_elems_3_reg_548;
wire    ap_CS_fsm_state94;
reg   [2:0] ap_phi_mux_i_phi_fu_570_p4;
reg   [31:0] ap_phi_mux_inc67_i_phi_fu_581_p4;
wire   [31:0] ap_phi_reg_pp4_iter0_inc5_i_reg_588;
reg   [31:0] ap_phi_reg_pp4_iter1_inc5_i_reg_588;
reg   [31:0] ap_phi_reg_pp4_iter2_inc5_i_reg_588;
wire  signed [63:0] sext_ln128_fu_691_p1;
wire  signed [63:0] p_cast1_cast_fu_886_p1;
wire  signed [63:0] p_cast3_cast_fu_896_p1;
wire  signed [63:0] p_cast12_cast_fu_1036_p1;
wire  signed [63:0] p_cast21_cast_fu_1111_p1;
wire  signed [63:0] p_cast23_cast_fu_1213_p1;
wire  signed [63:0] p_cast26_cast_fu_1223_p1;
wire  signed [63:0] p_cast29_cast_fu_1323_p1;
wire  signed [63:0] p_cast33_cast_fu_1420_p1;
wire   [63:0] p_cast7_cast_fu_2040_p1;
wire  signed [63:0] p_cast18_cast_fu_2313_p1;
wire  signed [63:0] p_cast20_cast_fu_2354_p1;
wire  signed [63:0] p_cast11_cast_fu_2431_p1;
reg    ap_block_state25_io;
reg    ap_block_state32;
wire   [63:0] p_cast48_fu_2350_p1;
reg    ap_block_pp4_stage1_01001;
reg    ap_block_pp4_stage0_01001;
reg   [319:0] buffer_row_data_M_elems_fu_208;
wire   [319:0] buffer_row_data_M_elems_4_fu_800_p2;
wire    ap_block_pp0_stage0;
reg   [319:0] buffer_row_data_M_elems_1_fu_212;
wire   [319:0] or_ln71_fu_2542_p2;
wire    ap_block_pp5_stage0;
reg   [319:0] p_range_M_elems_071_fu_216;
wire   [319:0] or_ln71_1_fu_1862_p2;
wire    ap_block_pp3_stage0;
reg   [319:0] out_row_data_M_elems_fu_220;
wire   [319:0] out_row_data_M_elems_2_fu_1580_p2;
wire   [319:0] out_row_data_M_elems_1_fu_1654_p2;
wire    ap_block_pp2_stage9;
wire   [63:0] grp_fu_611_p0;
wire   [63:0] grp_fu_615_p0;
wire   [63:0] grp_fu_619_p0;
wire   [63:0] grp_fu_623_p0;
wire   [63:0] grp_fu_627_p0;
wire   [63:0] grp_fu_631_p1;
wire   [63:0] grp_fu_635_p1;
wire   [63:0] grp_fu_639_p1;
wire   [63:0] grp_fu_643_p1;
wire   [63:0] grp_fu_647_p1;
reg   [63:0] grp_fu_651_p0;
wire   [7:0] zext_ln128_fu_682_p1;
wire   [8:0] select_ln71_fu_733_p3;
wire   [8:0] select_ln71_1_fu_738_p3;
wire   [8:0] sub_ln71_fu_743_p2;
wire   [319:0] zext_ln71_fu_749_p1;
wire   [319:0] zext_ln71_1_fu_753_p1;
wire   [319:0] shl_ln71_fu_764_p2;
wire   [319:0] lshr_ln71_fu_770_p2;
wire   [319:0] and_ln71_fu_776_p2;
wire   [319:0] xor_ln71_fu_782_p2;
wire   [319:0] select_ln71_2_fu_757_p3;
wire   [319:0] and_ln71_1_fu_788_p2;
wire   [319:0] and_ln71_2_fu_794_p2;
wire   [4:0] tmp_1_fu_843_p3;
wire   [63:0] empty_37_fu_855_p2;
wire   [63:0] empty_39_fu_870_p2;
wire   [5:0] tmp_8_fu_917_p3;
wire   [63:0] p_cast38_fu_925_p1;
wire   [63:0] empty_41_fu_929_p2;
wire   [2:0] empty_40_fu_938_p2;
wire   [5:0] tmp_10_fu_943_p3;
wire   [63:0] p_cast39_fu_951_p1;
wire   [63:0] empty_42_fu_955_p2;
wire  signed [31:0] empty_43_fu_960_p1;
wire   [63:0] add_ln80_fu_992_p2;
wire   [63:0] shl_ln46_fu_1011_p2;
wire   [63:0] add_ln46_fu_1021_p2;
wire   [2:0] trunc_ln46_1_fu_1046_p3;
wire   [2:0] empty_45_fu_1053_p2;
wire   [5:0] tmp_23_fu_1058_p3;
wire   [63:0] p_cast46_fu_1066_p1;
wire   [63:0] empty_46_fu_1070_p2;
wire   [31:0] empty_47_fu_1075_p1;
wire   [63:0] shl_ln49_fu_1090_p2;
wire   [63:0] add_ln49_fu_1096_p2;
wire   [0:0] or_ln140_fu_1149_p2;
wire   [0:0] grp_fu_651_p2;
wire   [4:0] shl_ln6_fu_1159_p3;
wire   [63:0] zext_ln11_fu_1167_p1;
wire   [63:0] add_ln11_fu_1177_p2;
wire   [2:0] shl_ln11_fu_1171_p2;
wire   [63:0] empty_50_fu_1197_p2;
wire   [5:0] tmp_24_fu_1233_p3;
wire   [63:0] p_cast50_fu_1240_p1;
wire   [63:0] empty_49_fu_1244_p2;
wire   [2:0] empty_51_fu_1253_p2;
wire   [5:0] tmp_25_fu_1258_p3;
wire   [63:0] p_cast51_fu_1266_p1;
wire   [63:0] empty_52_fu_1270_p2;
wire   [33:0] shl_ln7_fu_1291_p3;
wire  signed [63:0] sext_ln17_fu_1299_p1;
wire   [63:0] add_ln17_fu_1303_p2;
wire   [0:0] trunc_ln17_2_fu_1337_p1;
wire   [2:0] trunc_ln17_1_fu_1341_p3;
wire   [2:0] empty_55_fu_1349_p2;
wire   [5:0] tmp_26_fu_1354_p3;
wire   [63:0] p_cast52_fu_1362_p1;
wire   [63:0] empty_56_fu_1366_p2;
wire   [31:0] empty_57_fu_1371_p1;
wire   [31:0] i_1_cast_fu_1333_p1;
wire   [0:0] icmp_ln18_1_fu_1375_p2;
wire   [34:0] shl_ln8_fu_1386_p3;
wire  signed [63:0] sext_ln20_fu_1394_p1;
wire   [63:0] add_ln20_fu_1398_p2;
wire   [8:0] select_ln29_fu_1450_p3;
wire   [8:0] sub_ln21_fu_1487_p2;
wire   [8:0] select_ln21_fu_1493_p3;
wire   [8:0] select_ln21_2_fu_1501_p3;
wire   [319:0] zext_ln21_fu_1484_p1;
wire   [319:0] zext_ln21_1_fu_1515_p1;
wire   [8:0] select_ln29_1_fu_1525_p3;
wire   [319:0] zext_ln29_fu_1530_p1;
wire   [319:0] zext_ln29_1_fu_1534_p1;
wire   [319:0] shl_ln29_fu_1544_p2;
wire   [319:0] lshr_ln29_fu_1550_p2;
wire   [319:0] and_ln29_fu_1556_p2;
wire   [319:0] xor_ln29_fu_1562_p2;
wire   [319:0] select_ln29_2_fu_1537_p3;
wire   [319:0] and_ln29_1_fu_1568_p2;
wire   [319:0] and_ln29_2_fu_1574_p2;
wire   [8:0] select_ln21_1_fu_1591_p3;
reg   [319:0] tmp_27_fu_1603_p4;
wire   [319:0] zext_ln21_2_fu_1596_p1;
wire   [319:0] zext_ln21_3_fu_1600_p1;
wire   [319:0] shl_ln21_1_fu_1618_p2;
wire   [319:0] lshr_ln21_fu_1624_p2;
wire   [319:0] and_ln21_fu_1630_p2;
wire   [319:0] xor_ln21_fu_1636_p2;
wire   [319:0] select_ln21_3_fu_1612_p3;
wire   [319:0] and_ln21_1_fu_1642_p2;
wire   [319:0] and_ln21_2_fu_1648_p2;
wire   [63:0] trunc_ln142_fu_1665_p1;
wire   [63:0] tmp_2_fu_1673_p4;
wire   [63:0] tmp_3_fu_1687_p4;
wire   [63:0] tmp_4_fu_1701_p4;
wire   [63:0] tmp_5_fu_1715_p4;
wire   [8:0] select_ln71_6_fu_1770_p3;
wire   [8:0] select_ln71_8_fu_1780_p3;
wire   [8:0] select_ln71_7_fu_1775_p3;
wire   [8:0] sub_ln71_3_fu_1785_p2;
wire   [319:0] zext_ln71_4_fu_1767_p1;
wire   [319:0] zext_ln71_5_fu_1791_p1;
wire   [319:0] shl_ln71_4_fu_1803_p2;
reg   [319:0] tmp_28_fu_1809_p4;
wire   [319:0] zext_ln71_6_fu_1795_p1;
wire   [319:0] zext_ln71_7_fu_1799_p1;
wire   [319:0] shl_ln71_5_fu_1826_p2;
wire   [319:0] lshr_ln71_2_fu_1832_p2;
wire   [319:0] and_ln71_6_fu_1838_p2;
wire   [319:0] xor_ln71_2_fu_1844_p2;
wire   [319:0] select_ln71_9_fu_1819_p3;
wire   [319:0] and_ln71_7_fu_1850_p2;
wire   [319:0] and_ln71_8_fu_1856_p2;
wire   [63:0] trunc_ln139_fu_1873_p1;
wire   [63:0] tmp_9_fu_1882_p4;
wire   [63:0] tmp_s_fu_1897_p4;
wire   [63:0] tmp_6_fu_1912_p4;
wire   [63:0] tmp_7_fu_1927_p4;
wire   [63:0] trunc_ln137_fu_1942_p1;
wire   [63:0] tmp_11_fu_1951_p4;
wire   [63:0] tmp_12_fu_1966_p4;
wire   [63:0] tmp_13_fu_1981_p4;
wire   [63:0] tmp_14_fu_1996_p4;
wire   [63:0] bitcast_ln137_9_fu_2023_p1;
wire   [63:0] bitcast_ln137_7_fu_2020_p1;
wire   [63:0] bitcast_ln137_5_fu_2017_p1;
wire   [63:0] bitcast_ln137_3_fu_2014_p1;
wire   [63:0] bitcast_ln137_1_fu_2011_p1;
wire   [5:0] tmp_19_fu_2054_p3;
wire   [63:0] p_cast40_fu_2061_p1;
wire   [63:0] empty_63_fu_2065_p2;
wire   [8:0] tmp_21_fu_2080_p3;
wire   [8:0] empty_66_fu_2088_p2;
wire   [0:0] icmp_ln86_2_fu_2094_p2;
wire   [8:0] sub_ln86_fu_2110_p2;
wire   [8:0] sub_ln86_2_fu_2122_p2;
reg   [319:0] tmp_fu_2100_p4;
wire   [8:0] sub_ln86_1_fu_2116_p2;
wire   [8:0] select_ln86_fu_2128_p3;
wire   [8:0] select_ln86_2_fu_2144_p3;
wire   [319:0] select_ln86_1_fu_2136_p3;
wire   [319:0] zext_ln86_fu_2158_p1;
wire   [319:0] zext_ln86_1_fu_2174_p1;
wire   [319:0] lshr_ln86_1_fu_2177_p2;
wire   [319:0] and_ln86_1_fu_2183_p2;
wire   [10:0] tmp_15_fu_2192_p4;
wire   [51:0] trunc_ln86_1_fu_2202_p1;
wire   [0:0] or_ln86_fu_2222_p2;
wire   [33:0] shl_ln2_fu_2232_p3;
wire   [0:0] trunc_ln90_2_fu_2244_p1;
wire  signed [63:0] sext_ln90_fu_2240_p1;
wire   [2:0] trunc_ln90_1_fu_2248_p3;
wire   [7:0] p_cast47_fu_2266_p1;
wire   [63:0] add_ln90_fu_2256_p2;
wire   [5:0] tmp_22_fu_2296_p3;
wire   [58:0] i_2_cast16_fu_2292_p1;
wire   [58:0] p_cast17_fu_2303_p1;
wire   [34:0] shl_ln3_fu_2323_p3;
wire  signed [63:0] sext_ln91_fu_2331_p1;
wire   [63:0] add_ln91_fu_2335_p2;
wire   [4:0] shl_ln1_fu_2364_p3;
wire   [63:0] zext_ln96_fu_2371_p1;
wire   [2:0] shl_ln96_fu_2375_p2;
wire   [5:0] tmp_20_fu_2394_p3;
wire   [63:0] inc67_i_cast41_fu_2385_p1;
wire   [63:0] p_cast43_fu_2402_p1;
wire   [63:0] add_ln96_fu_2380_p2;
wire   [7:0] p_cast42_fu_2422_p1;
wire   [8:0] select_ln71_3_fu_2473_p3;
wire   [8:0] select_ln71_4_fu_2487_p3;
wire   [319:0] zext_ln71_2_fu_2492_p1;
wire   [319:0] zext_ln71_3_fu_2496_p1;
wire   [319:0] shl_ln71_3_fu_2506_p2;
wire   [319:0] lshr_ln71_1_fu_2512_p2;
wire   [319:0] and_ln71_3_fu_2518_p2;
wire   [319:0] xor_ln71_1_fu_2524_p2;
wire   [319:0] select_ln71_5_fu_2499_p3;
wire   [319:0] and_ln71_4_fu_2530_p2;
wire   [319:0] and_ln71_5_fu_2536_p2;
reg    grp_fu_651_ce;
reg    ap_block_pp4_stage0_00001;
reg   [103:0] ap_NS_fsm;
reg    ap_block_pp2_stage1_subdone;
wire    ap_block_state58_pp2_stage2_iter0;
wire    ap_block_state68_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp2_stage2_11001;
wire    ap_block_state59_pp2_stage3_iter0;
wire    ap_block_state69_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage3_11001;
wire    ap_block_state60_pp2_stage4_iter0;
wire    ap_block_state70_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_subdone;
wire    ap_block_pp2_stage4_11001;
wire    ap_block_state61_pp2_stage5_iter0;
wire    ap_block_state71_pp2_stage5_iter1;
wire    ap_block_pp2_stage5_subdone;
wire    ap_block_pp2_stage5_11001;
wire    ap_block_state62_pp2_stage6_iter0;
wire    ap_block_state72_pp2_stage6_iter1;
wire    ap_block_pp2_stage6_subdone;
wire    ap_block_pp2_stage6_11001;
reg    ap_block_pp2_stage7_subdone;
reg    ap_block_pp2_stage8_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_condition_1562;
reg    ap_condition_1564;
reg    ap_condition_1528;
reg    ap_condition_3364;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 104'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
end

row_product_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x_rowptr(x_rowptr),
    .x_colind(x_colind),
    .x_data(x_data),
    .y_rowptr(y_rowptr),
    .y_colind(y_colind),
    .y_data(y_data),
    .z_rowptr(z_rowptr),
    .z_colind(z_colind),
    .z_data(z_data)
);

row_product_csr_x_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CSR_X_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CSR_X_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CSR_X_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CSR_X_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CSR_X_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CSR_X_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CSR_X_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CSR_X_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CSR_X_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CSR_X_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CSR_X_CACHE_VALUE ))
csr_x_m_axi_U(
    .AWVALID(m_axi_csr_x_AWVALID),
    .AWREADY(m_axi_csr_x_AWREADY),
    .AWADDR(m_axi_csr_x_AWADDR),
    .AWID(m_axi_csr_x_AWID),
    .AWLEN(m_axi_csr_x_AWLEN),
    .AWSIZE(m_axi_csr_x_AWSIZE),
    .AWBURST(m_axi_csr_x_AWBURST),
    .AWLOCK(m_axi_csr_x_AWLOCK),
    .AWCACHE(m_axi_csr_x_AWCACHE),
    .AWPROT(m_axi_csr_x_AWPROT),
    .AWQOS(m_axi_csr_x_AWQOS),
    .AWREGION(m_axi_csr_x_AWREGION),
    .AWUSER(m_axi_csr_x_AWUSER),
    .WVALID(m_axi_csr_x_WVALID),
    .WREADY(m_axi_csr_x_WREADY),
    .WDATA(m_axi_csr_x_WDATA),
    .WSTRB(m_axi_csr_x_WSTRB),
    .WLAST(m_axi_csr_x_WLAST),
    .WID(m_axi_csr_x_WID),
    .WUSER(m_axi_csr_x_WUSER),
    .ARVALID(m_axi_csr_x_ARVALID),
    .ARREADY(m_axi_csr_x_ARREADY),
    .ARADDR(m_axi_csr_x_ARADDR),
    .ARID(m_axi_csr_x_ARID),
    .ARLEN(m_axi_csr_x_ARLEN),
    .ARSIZE(m_axi_csr_x_ARSIZE),
    .ARBURST(m_axi_csr_x_ARBURST),
    .ARLOCK(m_axi_csr_x_ARLOCK),
    .ARCACHE(m_axi_csr_x_ARCACHE),
    .ARPROT(m_axi_csr_x_ARPROT),
    .ARQOS(m_axi_csr_x_ARQOS),
    .ARREGION(m_axi_csr_x_ARREGION),
    .ARUSER(m_axi_csr_x_ARUSER),
    .RVALID(m_axi_csr_x_RVALID),
    .RREADY(m_axi_csr_x_RREADY),
    .RDATA(m_axi_csr_x_RDATA),
    .RLAST(m_axi_csr_x_RLAST),
    .RID(m_axi_csr_x_RID),
    .RUSER(m_axi_csr_x_RUSER),
    .RRESP(m_axi_csr_x_RRESP),
    .BVALID(m_axi_csr_x_BVALID),
    .BREADY(m_axi_csr_x_BREADY),
    .BRESP(m_axi_csr_x_BRESP),
    .BID(m_axi_csr_x_BID),
    .BUSER(m_axi_csr_x_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(csr_x_ARVALID),
    .I_ARREADY(csr_x_ARREADY),
    .I_ARADDR(csr_x_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(csr_x_RVALID),
    .I_RREADY(csr_x_RREADY),
    .I_RDATA(csr_x_RDATA),
    .I_RID(csr_x_RID),
    .I_RUSER(csr_x_RUSER),
    .I_RRESP(csr_x_RRESP),
    .I_RLAST(csr_x_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(csr_x_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(csr_x_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(csr_x_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(csr_x_BRESP),
    .I_BID(csr_x_BID),
    .I_BUSER(csr_x_BUSER)
);

row_product_csr_y_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CSR_Y_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CSR_Y_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CSR_Y_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CSR_Y_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CSR_Y_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CSR_Y_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CSR_Y_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CSR_Y_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CSR_Y_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CSR_Y_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CSR_Y_CACHE_VALUE ))
csr_y_m_axi_U(
    .AWVALID(m_axi_csr_y_AWVALID),
    .AWREADY(m_axi_csr_y_AWREADY),
    .AWADDR(m_axi_csr_y_AWADDR),
    .AWID(m_axi_csr_y_AWID),
    .AWLEN(m_axi_csr_y_AWLEN),
    .AWSIZE(m_axi_csr_y_AWSIZE),
    .AWBURST(m_axi_csr_y_AWBURST),
    .AWLOCK(m_axi_csr_y_AWLOCK),
    .AWCACHE(m_axi_csr_y_AWCACHE),
    .AWPROT(m_axi_csr_y_AWPROT),
    .AWQOS(m_axi_csr_y_AWQOS),
    .AWREGION(m_axi_csr_y_AWREGION),
    .AWUSER(m_axi_csr_y_AWUSER),
    .WVALID(m_axi_csr_y_WVALID),
    .WREADY(m_axi_csr_y_WREADY),
    .WDATA(m_axi_csr_y_WDATA),
    .WSTRB(m_axi_csr_y_WSTRB),
    .WLAST(m_axi_csr_y_WLAST),
    .WID(m_axi_csr_y_WID),
    .WUSER(m_axi_csr_y_WUSER),
    .ARVALID(m_axi_csr_y_ARVALID),
    .ARREADY(m_axi_csr_y_ARREADY),
    .ARADDR(m_axi_csr_y_ARADDR),
    .ARID(m_axi_csr_y_ARID),
    .ARLEN(m_axi_csr_y_ARLEN),
    .ARSIZE(m_axi_csr_y_ARSIZE),
    .ARBURST(m_axi_csr_y_ARBURST),
    .ARLOCK(m_axi_csr_y_ARLOCK),
    .ARCACHE(m_axi_csr_y_ARCACHE),
    .ARPROT(m_axi_csr_y_ARPROT),
    .ARQOS(m_axi_csr_y_ARQOS),
    .ARREGION(m_axi_csr_y_ARREGION),
    .ARUSER(m_axi_csr_y_ARUSER),
    .RVALID(m_axi_csr_y_RVALID),
    .RREADY(m_axi_csr_y_RREADY),
    .RDATA(m_axi_csr_y_RDATA),
    .RLAST(m_axi_csr_y_RLAST),
    .RID(m_axi_csr_y_RID),
    .RUSER(m_axi_csr_y_RUSER),
    .RRESP(m_axi_csr_y_RRESP),
    .BVALID(m_axi_csr_y_BVALID),
    .BREADY(m_axi_csr_y_BREADY),
    .BRESP(m_axi_csr_y_BRESP),
    .BID(m_axi_csr_y_BID),
    .BUSER(m_axi_csr_y_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(csr_y_ARVALID),
    .I_ARREADY(csr_y_ARREADY),
    .I_ARADDR(csr_y_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(csr_y_RVALID),
    .I_RREADY(csr_y_RREADY),
    .I_RDATA(csr_y_RDATA),
    .I_RID(csr_y_RID),
    .I_RUSER(csr_y_RUSER),
    .I_RRESP(csr_y_RRESP),
    .I_RLAST(csr_y_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(csr_y_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(csr_y_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(csr_y_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(csr_y_BRESP),
    .I_BID(csr_y_BID),
    .I_BUSER(csr_y_BUSER)
);

row_product_csr_z_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CSR_Z_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CSR_Z_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CSR_Z_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CSR_Z_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CSR_Z_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CSR_Z_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CSR_Z_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CSR_Z_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CSR_Z_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CSR_Z_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CSR_Z_CACHE_VALUE ))
csr_z_m_axi_U(
    .AWVALID(m_axi_csr_z_AWVALID),
    .AWREADY(m_axi_csr_z_AWREADY),
    .AWADDR(m_axi_csr_z_AWADDR),
    .AWID(m_axi_csr_z_AWID),
    .AWLEN(m_axi_csr_z_AWLEN),
    .AWSIZE(m_axi_csr_z_AWSIZE),
    .AWBURST(m_axi_csr_z_AWBURST),
    .AWLOCK(m_axi_csr_z_AWLOCK),
    .AWCACHE(m_axi_csr_z_AWCACHE),
    .AWPROT(m_axi_csr_z_AWPROT),
    .AWQOS(m_axi_csr_z_AWQOS),
    .AWREGION(m_axi_csr_z_AWREGION),
    .AWUSER(m_axi_csr_z_AWUSER),
    .WVALID(m_axi_csr_z_WVALID),
    .WREADY(m_axi_csr_z_WREADY),
    .WDATA(m_axi_csr_z_WDATA),
    .WSTRB(m_axi_csr_z_WSTRB),
    .WLAST(m_axi_csr_z_WLAST),
    .WID(m_axi_csr_z_WID),
    .WUSER(m_axi_csr_z_WUSER),
    .ARVALID(m_axi_csr_z_ARVALID),
    .ARREADY(m_axi_csr_z_ARREADY),
    .ARADDR(m_axi_csr_z_ARADDR),
    .ARID(m_axi_csr_z_ARID),
    .ARLEN(m_axi_csr_z_ARLEN),
    .ARSIZE(m_axi_csr_z_ARSIZE),
    .ARBURST(m_axi_csr_z_ARBURST),
    .ARLOCK(m_axi_csr_z_ARLOCK),
    .ARCACHE(m_axi_csr_z_ARCACHE),
    .ARPROT(m_axi_csr_z_ARPROT),
    .ARQOS(m_axi_csr_z_ARQOS),
    .ARREGION(m_axi_csr_z_ARREGION),
    .ARUSER(m_axi_csr_z_ARUSER),
    .RVALID(m_axi_csr_z_RVALID),
    .RREADY(m_axi_csr_z_RREADY),
    .RDATA(m_axi_csr_z_RDATA),
    .RLAST(m_axi_csr_z_RLAST),
    .RID(m_axi_csr_z_RID),
    .RUSER(m_axi_csr_z_RUSER),
    .RRESP(m_axi_csr_z_RRESP),
    .BVALID(m_axi_csr_z_BVALID),
    .BREADY(m_axi_csr_z_BREADY),
    .BRESP(m_axi_csr_z_BRESP),
    .BID(m_axi_csr_z_BID),
    .BUSER(m_axi_csr_z_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(csr_z_ARVALID),
    .I_ARREADY(csr_z_ARREADY),
    .I_ARADDR(p_cast7_cast_fu_2040_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(csr_z_RVALID),
    .I_RREADY(csr_z_RREADY),
    .I_RDATA(csr_z_RDATA),
    .I_RID(csr_z_RID),
    .I_RUSER(csr_z_RUSER),
    .I_RRESP(csr_z_RRESP),
    .I_RLAST(csr_z_RLAST),
    .I_AWVALID(csr_z_AWVALID),
    .I_AWREADY(csr_z_AWREADY),
    .I_AWADDR(csr_z_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(csr_z_WVALID),
    .I_WREADY(csr_z_WREADY),
    .I_WDATA(csr_z_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(csr_z_WSTRB),
    .I_BVALID(csr_z_BVALID),
    .I_BREADY(csr_z_BREADY),
    .I_BRESP(csr_z_BRESP),
    .I_BID(csr_z_BID),
    .I_BUSER(csr_z_BUSER)
);

row_product_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_611_p0),
    .din1(mul_i_i_reg_3117),
    .ce(1'b1),
    .dout(grp_fu_611_p2)
);

row_product_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_615_p0),
    .din1(mul_1_i_i_reg_3122),
    .ce(1'b1),
    .dout(grp_fu_615_p2)
);

row_product_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_619_p0),
    .din1(mul_2_i_i_reg_3127),
    .ce(1'b1),
    .dout(grp_fu_619_p2)
);

row_product_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_623_p0),
    .din1(mul_3_i_i_reg_3132),
    .ce(1'b1),
    .dout(grp_fu_623_p2)
);

row_product_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_627_p0),
    .din1(mul_4_i_i_reg_3137),
    .ce(1'b1),
    .dout(grp_fu_627_p2)
);

row_product_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln142_reg_3032),
    .din1(grp_fu_631_p1),
    .ce(1'b1),
    .dout(grp_fu_631_p2)
);

row_product_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln142_1_reg_3037),
    .din1(grp_fu_635_p1),
    .ce(1'b1),
    .dout(grp_fu_635_p2)
);

row_product_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln142_2_reg_3042),
    .din1(grp_fu_639_p1),
    .ce(1'b1),
    .dout(grp_fu_639_p2)
);

row_product_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln142_3_reg_3047),
    .din1(grp_fu_643_p1),
    .ce(1'b1),
    .dout(grp_fu_643_p2)
);

row_product_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bitcast_ln142_4_reg_3052),
    .din1(grp_fu_647_p1),
    .ce(1'b1),
    .dout(grp_fu_647_p2)
);

row_product_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_651_p0),
    .din1(64'd0),
    .ce(grp_fu_651_ce),
    .opcode(5'd1),
    .dout(grp_fu_651_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state56))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state55)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage9_subdone) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state55)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state77) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state77))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state77);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state104)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            if ((1'b1 == ap_condition_pp4_exit_iter1_state108)) begin
                ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end else if ((1'b1 == ap_CS_fsm_state104)) begin
            ap_enable_reg_pp4_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state125) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state125))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state125);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1562)) begin
        if (((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'd0 == and_ln86_fu_2226_p2))) begin
            ap_phi_reg_pp4_iter2_inc5_i_reg_588 <= add_ln92_fu_2286_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp4_iter2_inc5_i_reg_588 <= ap_phi_reg_pp4_iter1_inc5_i_reg_588;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_row_data_M_elems_1_fu_212 <= buffer_row_data_M_elems_fu_208;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln69_1_reg_3335 == 1'd0))) begin
        buffer_row_data_M_elems_1_fu_212 <= or_ln71_fu_2542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        buffer_row_data_M_elems_2_reg_471 <= buffer_row_data_M_elems_3_reg_548;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_row_data_M_elems_2_reg_471 <= buffer_row_data_M_elems_1_load_reg_2713;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_982_p2 == 1'd0) & (icmp_ln44_reg_2774 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        buffer_row_data_M_elems_3_reg_548 <= ap_phi_mux_buffer_row_data_M_elems_2_phi_fu_474_p4;
    end else if (((1'b1 == ap_CS_fsm_state94) | ((1'd1 == and_ln140_reg_2882) & (1'b1 == ap_CS_fsm_state45)))) begin
        buffer_row_data_M_elems_3_reg_548 <= buffer_row_data_M_elems_2_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        buffer_row_data_M_elems_3_reg_548 <= buffer_row_data_M_elems_5_fu_2026_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_503 <= add_ln15_reg_2934;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        i_1_reg_503 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_459 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        i_3_reg_459 <= indvars_iv_next277_reg_2706;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        i_reg_566 <= 3'd0;
    end else if (((icmp_ln84_reg_3218 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        i_reg_566 <= add_ln84_reg_3232;
    end
end

always @ (posedge ap_clk) begin
    if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        idx283_reg_448 <= 3'd0;
    end else if (((icmp_ln69_fu_707_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx283_reg_448 <= add_ln69_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln69_2_fu_1735_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        idx287_reg_537 <= add_ln69_2_fu_1729_p2;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        idx287_reg_537 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_1_fu_2447_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        idx289_reg_600 <= add_ln69_1_fu_2441_p2;
    end else if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
        idx289_reg_600 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1564)) begin
        if (((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'd1 == and_ln86_reg_3258))) begin
            inc5_i_reg_588 <= inc67_i_reg_578;
        end else if ((1'b1 == 1'b1)) begin
            inc5_i_reg_588 <= ap_phi_reg_pp4_iter2_inc5_i_reg_588;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        inc67_i_reg_578 <= empty_64_fu_2070_p1;
    end else if (((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        inc67_i_reg_578 <= inc5_i_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_982_p2 == 1'd0) & (icmp_ln44_reg_2774 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        j_1_reg_493 <= sext_ln44_reg_2778;
    end else if (((icmp_ln47_fu_1079_p2 == 1'd0) & (icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        j_1_reg_493 <= add_ln44_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_3_reg_515 <= j_5_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        j_3_reg_515 <= j_2_reg_2919;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1528)) begin
        if (((1'd0 == and_ln18_fu_1381_p2) & (icmp_ln15_reg_2939 == 1'd0))) begin
            j_5_reg_525 <= j_3_reg_515;
        end else if (((icmp_ln15_reg_2939 == 1'd0) & (1'd1 == and_ln18_fu_1381_p2))) begin
            j_5_reg_525 <= j_4_fu_1413_p2;
        end else if ((1'b1 == 1'b1)) begin
            j_5_reg_525 <= ap_phi_reg_pp2_iter0_j_5_reg_525;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        k_reg_481 <= add_ln137_reg_2788;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_reg_481 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_3364)) begin
        if ((1'd1 == and_ln18_reg_2964)) begin
            out_row_data_M_elems_fu_220 <= out_row_data_M_elems_1_fu_1654_p2;
        end else if ((1'd0 == and_ln18_reg_2964)) begin
            out_row_data_M_elems_fu_220 <= out_row_data_M_elems_2_fu_1580_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        add_1_i_i_reg_3172 <= grp_fu_615_p2;
        add_2_i_i_reg_3177 <= grp_fu_619_p2;
        add_3_i_i_reg_3182 <= grp_fu_623_p2;
        add_4_i_i_reg_3187 <= grp_fu_627_p2;
        add_i_i_reg_3167 <= grp_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln137_reg_2788 <= add_ln137_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln15_reg_2934 <= add_ln15_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        add_ln84_reg_3232 <= add_ln84_fu_2168_p2;
        ap_phi_reg_pp4_iter1_inc5_i_reg_588 <= ap_phi_reg_pp4_iter0_inc5_i_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        and_ln140_reg_2882 <= and_ln140_fu_1153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage9_11001) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        and_ln18_reg_2964 <= and_ln18_fu_1381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        and_ln86_reg_3258 <= and_ln86_fu_2226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        and_ln86_reg_3258_pp4_iter2_reg <= and_ln86_reg_3258;
        and_ln86_reg_3258_pp4_iter3_reg <= and_ln86_reg_3258_pp4_iter2_reg;
        and_ln86_reg_3258_pp4_iter4_reg <= and_ln86_reg_3258_pp4_iter3_reg;
        trunc_ln86_reg_3237_pp4_iter1_reg <= trunc_ln86_reg_3237;
        trunc_ln86_reg_3237_pp4_iter2_reg <= trunc_ln86_reg_3237_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        bitcast_ln142_1_reg_3037 <= bitcast_ln142_1_fu_1683_p1;
        bitcast_ln142_2_reg_3042 <= bitcast_ln142_2_fu_1697_p1;
        bitcast_ln142_3_reg_3047 <= bitcast_ln142_3_fu_1711_p1;
        bitcast_ln142_4_reg_3052 <= bitcast_ln142_4_fu_1725_p1;
        bitcast_ln142_reg_3032 <= bitcast_ln142_fu_1669_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_row_data_M_elems_1_load_reg_2713 <= buffer_row_data_M_elems_1_fu_212;
        indvars_iv_next277_reg_2706 <= indvars_iv_next277_fu_831_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_2638 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_row_data_M_elems_fu_208 <= buffer_row_data_M_elems_4_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        csr_x_addr_1_read_reg_2769 <= csr_x_RDATA;
        empty_36_reg_2753[2] <= empty_36_fu_906_p2[2];
        empty_38_reg_2758 <= empty_38_fu_912_p2;
        j_reg_2763 <= j_fu_934_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        csr_x_addr_2_read_reg_2827 <= csr_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        csr_x_addr_3_read_reg_2851 <= csr_x_RDATA;
        tmp_17_reg_2857 <= {{csr_x_RDATA[62:52]}};
        trunc_ln140_reg_2862 <= trunc_ln140_fu_1131_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        csr_x_addr_read_reg_2748 <= csr_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        csr_y_addr_1_read_reg_2924 <= csr_y_RDATA;
        j_2_reg_2919 <= j_2_fu_1249_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage8_11001) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        csr_y_addr_2_read_reg_2959 <= csr_y_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_predicate_op415_read_state73 == 1'b1))) begin
        csr_y_addr_3_read_reg_2979 <= csr_y_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        csr_y_addr_read_reg_2914 <= csr_y_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        csr_z_addr_1_read_reg_3203 <= csr_z_RDATA;
        empty_62_reg_3208 <= empty_62_fu_2050_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_33_reg_2681 <= empty_33_fu_811_p1;
        trunc_ln11_reg_2691 <= trunc_ln11_fu_817_p1;
        trunc_ln17_reg_2696 <= trunc_ln17_fu_820_p1;
        trunc_ln46_reg_2686 <= trunc_ln46_fu_814_p1;
        trunc_ln90_reg_2701 <= trunc_ln90_fu_823_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_707_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_34_reg_2648[8 : 6] <= empty_34_fu_721_p2[8 : 6];
        icmp_ln71_reg_2654 <= icmp_ln71_fu_727_p2;
        shl_ln_reg_2642[8 : 6] <= shl_ln_fu_713_p3[8 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln140_reg_2882) & (1'b1 == ap_CS_fsm_state45))) begin
        empty_48_reg_2891 <= empty_48_fu_1192_p2;
        p_cast6_reg_2886 <= {{add_ln11_fu_1177_p2[63:3]}};
        p_cast9_reg_2897 <= {{empty_50_fu_1197_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        empty_53_reg_2929 <= empty_53_fu_1275_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_2939_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage8_11001) & (1'd1 == and_ln18_reg_2964) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        empty_58_reg_3010[8 : 6] <= empty_58_fu_1472_p2[8 : 6];
        icmp_ln21_reg_3015 <= icmp_ln21_fu_1478_p2;
        shl_ln21_reg_3026 <= shl_ln21_fu_1519_p2;
        shl_ln9_reg_3005[8 : 6] <= shl_ln9_fu_1464_p3[8 : 6];
        sub_ln21_1_reg_3021 <= sub_ln21_1_fu_1509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_2939_pp2_iter1_reg == 1'd0) & (1'd0 == and_ln18_reg_2964) & (1'b0 == ap_block_pp2_stage8_11001) & (1'b1 == ap_CS_fsm_pp2_stage8))) begin
        empty_59_reg_2989[8 : 6] <= empty_59_fu_1438_p2[8 : 6];
        icmp_ln29_reg_2994 <= icmp_ln29_fu_1444_p2;
        shl_ln4_reg_2984[8 : 6] <= shl_ln4_fu_1430_p3[8 : 6];
        sub_ln29_reg_3000 <= sub_ln29_fu_1458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln69_2_fu_1735_p2 == 1'd0))) begin
        empty_61_reg_3073[8 : 6] <= empty_61_fu_1749_p2[8 : 6];
        icmp_ln71_2_reg_3079 <= icmp_ln71_2_fu_1755_p2;
        shl_ln71_2_reg_3066[8 : 6] <= shl_ln71_2_fu_1741_p3[8 : 6];
        sub_ln71_2_reg_3087[8 : 6] <= sub_ln71_2_fu_1761_p2[8 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'd0 == and_ln86_fu_2226_p2) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        empty_67_reg_3262 <= empty_67_fu_2261_p2;
        empty_68_reg_3267 <= empty_68_fu_2270_p2;
        p_cast4_reg_3272 <= {{add_ln90_fu_2256_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'd0 == and_ln86_reg_3258) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_69_reg_3282 <= empty_69_fu_2307_p2;
        p_cast5_reg_3293 <= {{add_ln91_fu_2335_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        empty_72_reg_3304 <= empty_72_fu_2389_p2;
        empty_74_reg_3309 <= empty_74_fu_2406_p2;
        p_cast2_reg_3314 <= {{add_ln96_fu_2380_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        empty_73_reg_3319 <= empty_73_fu_2425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln69_1_fu_2447_p2 == 1'd0))) begin
        empty_78_reg_3344[8 : 6] <= empty_78_fu_2461_p2[8 : 6];
        icmp_ln71_1_reg_3349 <= icmp_ln71_1_fu_2467_p2;
        shl_ln71_1_reg_3339[8 : 6] <= shl_ln71_1_fu_2453_p3[8 : 6];
        sub_ln71_1_reg_3355 <= sub_ln71_1_fu_2481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_503_pp2_iter1_reg <= i_1_reg_503;
        icmp_ln15_reg_2939 <= icmp_ln15_fu_1285_p2;
        icmp_ln15_reg_2939_pp2_iter1_reg <= icmp_ln15_reg_2939;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_reg_566_pp4_iter1_reg <= i_reg_566;
        icmp_ln84_reg_3218 <= icmp_ln84_fu_2074_p2;
        icmp_ln84_reg_3218_pp4_iter1_reg <= icmp_ln84_reg_3218;
        icmp_ln84_reg_3218_pp4_iter2_reg <= icmp_ln84_reg_3218_pp4_iter1_reg;
        icmp_ln84_reg_3218_pp4_iter3_reg <= icmp_ln84_reg_3218_pp4_iter2_reg;
        icmp_ln84_reg_3218_pp4_iter4_reg <= icmp_ln84_reg_3218_pp4_iter3_reg;
        icmp_ln84_reg_3218_pp4_iter5_reg <= icmp_ln84_reg_3218_pp4_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        icmp_ln140_1_reg_2877 <= icmp_ln140_1_fu_1144_p2;
        icmp_ln140_reg_2872 <= icmp_ln140_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln15_fu_1285_p2 == 1'd0))) begin
        icmp_ln18_reg_2948 <= icmp_ln18_fu_1318_p2;
        p_cast10_reg_2943 <= {{add_ln17_fu_1303_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        icmp_ln44_1_reg_2807 <= icmp_ln44_1_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        icmp_ln44_reg_2774 <= icmp_ln44_fu_964_p2;
        sext_ln44_1_reg_2783 <= sext_ln44_1_fu_972_p1;
        sext_ln44_reg_2778 <= sext_ln44_fu_969_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln69_1_reg_3335 <= icmp_ln69_1_fu_2447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln69_2_reg_3062 <= icmp_ln69_2_fu_1735_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln69_reg_2638 <= icmp_ln69_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_3218 == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        icmp_ln86_1_reg_3248 <= icmp_ln86_1_fu_2212_p2;
        icmp_ln86_reg_3243 <= icmp_ln86_fu_2206_p2;
        trunc_ln86_reg_3237 <= trunc_ln86_fu_2188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln84_fu_2074_p2 == 1'd0))) begin
        lshr_ln86_reg_3227 <= lshr_ln86_fu_2162_p2;
        sub_ln86_3_reg_3222[8 : 1] <= sub_ln86_3_fu_2152_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        mul_1_i_i_reg_3122 <= grp_fu_635_p2;
        mul_2_i_i_reg_3127 <= grp_fu_639_p2;
        mul_3_i_i_reg_3132 <= grp_fu_643_p2;
        mul_4_i_i_reg_3137 <= grp_fu_647_p2;
        mul_i_i_reg_3117 <= grp_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage9_11001) & (1'd1 == and_ln18_fu_1381_p2) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
        p_cast11_reg_2968 <= {{add_ln20_fu_1398_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_837_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        p_cast1_reg_2726 <= {{empty_37_fu_855_p2[63:3]}};
        p_cast37_reg_2721[4 : 2] <= p_cast37_fu_851_p1[4 : 2];
        p_cast3_reg_2731 <= {{empty_39_fu_870_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_982_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        p_cast7_reg_2802 <= {{add_ln80_fu_992_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_1_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        p_cast8_reg_2816 <= {{add_ln46_fu_1021_p2[63:3]}};
        trunc_ln46_2_reg_2811 <= trunc_ln46_2_fu_1017_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_cast_reg_2840 <= {{add_ln49_fu_1096_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln69_2_reg_3062 == 1'd0))) begin
        p_range_M_elems_071_fu_216 <= or_ln71_1_fu_1862_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shl_ln128_reg_2622 <= shl_ln128_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln128_1_reg_2617 <= {{z_rowptr[63:3]}};
        trunc_ln128_reg_2610 <= trunc_ln128_fu_668_p1;
        x_colind_read_reg_2598 <= x_colind;
        x_data_read_reg_2593 <= x_data;
        x_rowptr_read_reg_2604 <= x_rowptr;
        y_colind_read_reg_2581 <= y_colind;
        y_data_read_reg_2576 <= y_data;
        y_rowptr_read_reg_2587 <= y_rowptr;
        z_colind_read_reg_2564 <= z_colind;
        z_data_read_reg_2559 <= z_data;
        z_rowptr_read_reg_2570 <= z_rowptr;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_982_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        zext_ln137_reg_2797[2 : 0] <= zext_ln137_fu_988_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_707_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_1285_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state56 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state56 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_2_fu_1735_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state77 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state77 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_condition_pp4_exit_iter1_state108 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter1_state108 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_3218 == 1'd1) & (1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_1_fu_2447_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state125 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state125 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln135_fu_837_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_1_phi_fu_507_p4 = add_ln15_reg_2934;
    end else begin
        ap_phi_mux_i_1_phi_fu_507_p4 = i_1_reg_503;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_3218 == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_570_p4 = add_ln84_reg_3232;
    end else begin
        ap_phi_mux_i_phi_fu_570_p4 = i_reg_566;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        ap_phi_mux_inc67_i_phi_fu_581_p4 = inc5_i_reg_588;
    end else begin
        ap_phi_mux_inc67_i_phi_fu_581_p4 = inc67_i_reg_578;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_3_phi_fu_518_p4 = j_5_reg_525;
    end else begin
        ap_phi_mux_j_3_phi_fu_518_p4 = j_3_reg_515;
    end
end

always @ (*) begin
    if (((icmp_ln135_fu_837_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        csr_x_ARADDR = p_cast21_cast_fu_1111_p1;
    end else if (((1'b0 == ap_block_state25_io) & (icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        csr_x_ARADDR = p_cast12_cast_fu_1036_p1;
    end else if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        csr_x_ARADDR = p_cast3_cast_fu_896_p1;
    end else if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        csr_x_ARADDR = p_cast1_cast_fu_886_p1;
    end else begin
        csr_x_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state25_io) & (icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state25)) | ((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        csr_x_ARVALID = 1'b1;
    end else begin
        csr_x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((csr_x_RVALID == 1'b0) & (icmp_ln44_1_reg_2807 == 1'd1)) & (icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        csr_x_RREADY = 1'b1;
    end else begin
        csr_x_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        csr_x_blk_n_AR = m_axi_csr_x_ARREADY;
    end else begin
        csr_x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state32)))) begin
        csr_x_blk_n_R = m_axi_csr_x_RVALID;
    end else begin
        csr_x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op408_readreq_state66 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        csr_y_ARADDR = p_cast33_cast_fu_1420_p1;
    end else if (((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        csr_y_ARADDR = p_cast29_cast_fu_1323_p1;
    end else if (((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        csr_y_ARADDR = p_cast26_cast_fu_1223_p1;
    end else if (((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        csr_y_ARADDR = p_cast23_cast_fu_1213_p1;
    end else begin
        csr_y_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op408_readreq_state66 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46)))) begin
        csr_y_ARVALID = 1'b1;
    end else begin
        csr_y_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage7_11001) & (1'b1 == ap_CS_fsm_pp2_stage7) & (ap_predicate_op415_read_state73 == 1'b1)) | ((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage8_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8)) | ((csr_y_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((csr_y_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53)))) begin
        csr_y_RREADY = 1'b1;
    end else begin
        csr_y_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'd1 == and_ln18_reg_2964) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        csr_y_blk_n_AR = m_axi_csr_y_ARREADY;
    end else begin
        csr_y_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | ((icmp_ln15_reg_2939_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage7) & (1'd1 == and_ln18_reg_2964) & (1'b1 == ap_CS_fsm_pp2_stage7)) | ((icmp_ln15_reg_2939 == 1'd0) & (1'b0 == ap_block_pp2_stage8) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage8)))) begin
        csr_y_blk_n_R = m_axi_csr_y_RVALID;
    end else begin
        csr_y_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((csr_z_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
        csr_z_ARVALID = 1'b1;
    end else begin
        csr_z_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        csr_z_AWADDR = p_cast11_cast_fu_2431_p1;
    end else if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op681_writereq_state110 == 1'b1))) begin
        csr_z_AWADDR = p_cast20_cast_fu_2354_p1;
    end else if (((ap_predicate_op670_writereq_state109 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        csr_z_AWADDR = p_cast18_cast_fu_2313_p1;
    end else if (((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        csr_z_AWADDR = sext_ln128_fu_691_p1;
    end else begin
        csr_z_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op670_writereq_state109 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op681_writereq_state110 == 1'b1)) | ((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state118)) | ((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        csr_z_AWVALID = 1'b1;
    end else begin
        csr_z_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op690_writeresp_state115 == 1'b1) & (ap_enable_reg_pp4_iter5 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp4_iter5 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op692_writeresp_state116 == 1'b1)) | ((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124)) | ((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        csr_z_BREADY = 1'b1;
    end else begin
        csr_z_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((csr_z_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
        csr_z_RREADY = 1'b1;
    end else begin
        csr_z_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        csr_z_WDATA = empty_74_reg_3309;
    end else if (((ap_predicate_op683_write_state111 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        csr_z_WDATA = trunc_ln86_reg_3237_pp4_iter2_reg;
    end else if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op678_write_state110 == 1'b1))) begin
        csr_z_WDATA = p_cast48_fu_2350_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        csr_z_WDATA = 64'd0;
    end else begin
        csr_z_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        csr_z_WSTRB = empty_73_reg_3319;
    end else if (((ap_predicate_op683_write_state111 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        csr_z_WSTRB = 8'd255;
    end else if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op678_write_state110 == 1'b1))) begin
        csr_z_WSTRB = empty_68_reg_3267;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        csr_z_WSTRB = shl_ln128_reg_2622;
    end else begin
        csr_z_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op683_write_state111 == 1'b1) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_predicate_op678_write_state110 == 1'b1)) | ((csr_z_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119)) | ((csr_z_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        csr_z_WVALID = 1'b1;
    end else begin
        csr_z_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        csr_z_blk_n_AR = m_axi_csr_z_ARREADY;
    end else begin
        csr_z_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'd0 == and_ln86_reg_3258) & (1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'd0 == and_ln86_reg_3258) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        csr_z_blk_n_AW = m_axi_csr_z_AWREADY;
    end else begin
        csr_z_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln84_reg_3218_pp4_iter5_reg == 1'd0) & (ap_enable_reg_pp4_iter5 == 1'b1) & (1'd0 == and_ln86_reg_3258_pp4_iter4_reg) & (1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((icmp_ln84_reg_3218_pp4_iter4_reg == 1'd0) & (ap_enable_reg_pp4_iter5 == 1'b1) & (1'd0 == and_ln86_reg_3258_pp4_iter4_reg) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        csr_z_blk_n_B = m_axi_csr_z_BVALID;
    end else begin
        csr_z_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        csr_z_blk_n_R = m_axi_csr_z_RVALID;
    end else begin
        csr_z_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp4_iter3 == 1'b1) & (icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (1'd0 == and_ln86_reg_3258_pp4_iter2_reg) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'd0 == and_ln86_reg_3258) & (1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1)))) begin
        csr_z_blk_n_W = m_axi_csr_z_WREADY;
    end else begin
        csr_z_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)))) begin
        grp_fu_651_ce = 1'b1;
    end else begin
        grp_fu_651_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_651_p0 = bitcast_ln86_fu_2218_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_651_p0 = extracted_scalar_fu_1135_p1;
    end else begin
        grp_fu_651_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((csr_z_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln69_fu_707_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln69_fu_707_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln135_fu_837_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln137_fu_982_p2 == 1'd0) & (icmp_ln44_reg_2774 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((icmp_ln137_fu_982_p2 == 1'd0) & (icmp_ln44_reg_2774 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if ((~((csr_x_RVALID == 1'b0) & (icmp_ln44_1_reg_2807 == 1'd1)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln47_fu_1079_p2 == 1'd0) & (icmp_ln44_1_reg_2807 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((icmp_ln44_1_reg_2807 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((csr_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((csr_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'd1 == and_ln140_reg_2882) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((csr_y_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((csr_y_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((csr_y_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln15_fu_1285_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln15_fu_1285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_pp2_stage5 : begin
            if ((1'b0 == ap_block_pp2_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage5;
            end
        end
        ap_ST_fsm_pp2_stage6 : begin
            if ((1'b0 == ap_block_pp2_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage6;
            end
        end
        ap_ST_fsm_pp2_stage7 : begin
            if ((1'b0 == ap_block_pp2_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage7;
            end
        end
        ap_ST_fsm_pp2_stage8 : begin
            if ((1'b0 == ap_block_pp2_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage8;
            end
        end
        ap_ST_fsm_pp2_stage9 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage9_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage9)) & (1'b0 == ap_block_pp2_stage9_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage9_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage9))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage9;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln69_2_fu_1735_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln69_2_fu_1735_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state96 : begin
            if (((csr_z_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((csr_z_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((~((ap_enable_reg_pp4_iter2 == 1'b0) & (1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1) & (ap_enable_reg_pp4_iter0 == 1'b0)) & ~((ap_enable_reg_pp4_iter5 == 1'b1) & (1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter4 == 1'b0)) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter5 == 1'b1) & (1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter4 == 1'b0)) | ((ap_enable_reg_pp4_iter2 == 1'b0) & (1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1) & (ap_enable_reg_pp4_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            if (((csr_z_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state119 : begin
            if (((csr_z_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            if (((csr_z_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_1_fu_2447_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln69_1_fu_2447_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_1177_p2 = (zext_ln11_fu_1167_p1 + y_rowptr_read_reg_2587);

assign add_ln137_fu_976_p2 = (k_reg_481 + 3'd1);

assign add_ln15_fu_1279_p2 = (ap_phi_mux_i_1_phi_fu_507_p4 + 3'd1);

assign add_ln17_fu_1303_p2 = ($signed(sext_ln17_fu_1299_p1) + $signed(y_colind_read_reg_2581));

assign add_ln20_fu_1398_p2 = ($signed(sext_ln20_fu_1394_p1) + $signed(y_data_read_reg_2576));

assign add_ln44_fu_1084_p2 = (j_1_reg_493 + 64'd1);

assign add_ln46_fu_1021_p2 = (shl_ln46_fu_1011_p2 + x_colind_read_reg_2598);

assign add_ln49_fu_1096_p2 = (shl_ln49_fu_1090_p2 + x_data_read_reg_2593);

assign add_ln69_1_fu_2441_p2 = (idx289_reg_600 + 3'd1);

assign add_ln69_2_fu_1729_p2 = (idx287_reg_537 + 3'd1);

assign add_ln69_fu_701_p2 = (idx283_reg_448 + 3'd1);

assign add_ln80_fu_992_p2 = (p_cast37_reg_2721 + z_rowptr_read_reg_2570);

assign add_ln84_fu_2168_p2 = (i_reg_566 + 3'd1);

assign add_ln90_fu_2256_p2 = ($signed(sext_ln90_fu_2240_p1) + $signed(z_colind_read_reg_2564));

assign add_ln91_fu_2335_p2 = ($signed(sext_ln91_fu_2331_p1) + $signed(z_data_read_reg_2559));

assign add_ln92_fu_2286_p2 = (ap_phi_mux_inc67_i_phi_fu_581_p4 + 32'd1);

assign add_ln96_fu_2380_p2 = (zext_ln96_fu_2371_p1 + z_rowptr_read_reg_2570);

assign and_ln140_fu_1153_p2 = (or_ln140_fu_1149_p2 & grp_fu_651_p2);

assign and_ln18_fu_1381_p2 = (icmp_ln18_reg_2948 & icmp_ln18_1_fu_1375_p2);

assign and_ln21_1_fu_1642_p2 = (xor_ln21_fu_1636_p2 & out_row_data_M_elems_fu_220);

assign and_ln21_2_fu_1648_p2 = (select_ln21_3_fu_1612_p3 & and_ln21_fu_1630_p2);

assign and_ln21_fu_1630_p2 = (shl_ln21_1_fu_1618_p2 & lshr_ln21_fu_1624_p2);

assign and_ln29_1_fu_1568_p2 = (xor_ln29_fu_1562_p2 & out_row_data_M_elems_fu_220);

assign and_ln29_2_fu_1574_p2 = (select_ln29_2_fu_1537_p3 & and_ln29_fu_1556_p2);

assign and_ln29_fu_1556_p2 = (shl_ln29_fu_1544_p2 & lshr_ln29_fu_1550_p2);

assign and_ln71_1_fu_788_p2 = (xor_ln71_fu_782_p2 & buffer_row_data_M_elems_fu_208);

assign and_ln71_2_fu_794_p2 = (select_ln71_2_fu_757_p3 & and_ln71_fu_776_p2);

assign and_ln71_3_fu_2518_p2 = (shl_ln71_3_fu_2506_p2 & lshr_ln71_1_fu_2512_p2);

assign and_ln71_4_fu_2530_p2 = (xor_ln71_1_fu_2524_p2 & buffer_row_data_M_elems_1_fu_212);

assign and_ln71_5_fu_2536_p2 = (select_ln71_5_fu_2499_p3 & and_ln71_3_fu_2518_p2);

assign and_ln71_6_fu_1838_p2 = (shl_ln71_5_fu_1826_p2 & lshr_ln71_2_fu_1832_p2);

assign and_ln71_7_fu_1850_p2 = (xor_ln71_2_fu_1844_p2 & p_range_M_elems_071_fu_216);

assign and_ln71_8_fu_1856_p2 = (select_ln71_9_fu_1819_p3 & and_ln71_6_fu_1838_p2);

assign and_ln71_fu_776_p2 = (shl_ln71_fu_764_p2 & lshr_ln71_fu_770_p2);

assign and_ln86_1_fu_2183_p2 = (lshr_ln86_reg_3227 & lshr_ln86_1_fu_2177_p2);

assign and_ln86_fu_2226_p2 = (or_ln86_fu_2222_p2 & grp_fu_651_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp2_stage7 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp2_stage8 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp2_stage9 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd83];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state66_io));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state66_io));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state57_io));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_block_state57_io));
end

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage7_11001 = ((csr_y_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op415_read_state73 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage7_subdone = ((csr_y_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op415_read_state73 == 1'b1));
end

assign ap_block_pp2_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage8_11001 = ((csr_y_RVALID == 1'b0) & (icmp_ln15_reg_2939 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage8_subdone = ((csr_y_RVALID == 1'b0) & (icmp_ln15_reg_2939 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp2_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_00001 = ((ap_predicate_op690_writeresp_state115 == 1'b1) & (csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((ap_predicate_op690_writeresp_state115 == 1'b1) & (csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_predicate_op690_writeresp_state115 == 1'b1) & (csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((ap_enable_reg_pp4_iter3 == 1'b1) & (1'b1 == ap_block_state111_io)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state109_io)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_predicate_op690_writeresp_state115 == 1'b1) & (csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((ap_enable_reg_pp4_iter3 == 1'b1) & (1'b1 == ap_block_state111_io)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state109_io)));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = ((csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1) & (ap_predicate_op692_writeresp_state116 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1) & (ap_predicate_op692_writeresp_state116 == 1'b1)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state110_io)));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((csr_z_BVALID == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1) & (ap_predicate_op692_writeresp_state116 == 1'b1)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state110_io)));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state105_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state109_io = ((ap_predicate_op670_writereq_state109 == 1'b1) & (csr_z_AWREADY == 1'b0));
end

assign ap_block_state109_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state110_io = (((csr_z_WREADY == 1'b0) & (ap_predicate_op678_write_state110 == 1'b1)) | ((csr_z_AWREADY == 1'b0) & (ap_predicate_op681_writereq_state110 == 1'b1)));
end

assign ap_block_state110_pp4_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state111_io = ((ap_predicate_op683_write_state111 == 1'b1) & (csr_z_WREADY == 1'b0));
end

assign ap_block_state111_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp4_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp4_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_pp4_stage0_iter5 = ((ap_predicate_op690_writeresp_state115 == 1'b1) & (csr_z_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state116_pp4_stage1_iter5 = ((csr_z_BVALID == 1'b0) & (ap_predicate_op692_writeresp_state116 == 1'b1));
end

assign ap_block_state125_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_io = ((csr_x_ARREADY == 1'b0) & (icmp_ln44_1_reg_2807 == 1'd1));
end

always @ (*) begin
    ap_block_state32 = ((csr_x_RVALID == 1'b0) & (icmp_ln44_1_reg_2807 == 1'd1));
end

assign ap_block_state56_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state57_io = ((csr_y_ARREADY == 1'b0) & (icmp_ln15_reg_2939 == 1'd0));
end

assign ap_block_state57_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp2_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp2_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp2_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state64_pp2_stage8_iter0 = ((csr_y_RVALID == 1'b0) & (icmp_ln15_reg_2939 == 1'd0));
end

assign ap_block_state65_pp2_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66_io = ((ap_predicate_op408_readreq_state66 == 1'b1) & (csr_y_ARREADY == 1'b0));
end

assign ap_block_state66_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp2_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp2_stage7_iter1 = ((csr_y_RVALID == 1'b0) & (ap_predicate_op415_read_state73 == 1'b1));
end

assign ap_block_state74_pp2_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp2_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1528 = ((1'b0 == ap_block_pp2_stage9_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage9));
end

always @ (*) begin
    ap_condition_1562 = ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_1564 = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0));
end

always @ (*) begin
    ap_condition_3364 = ((icmp_ln15_reg_2939_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage9_11001) & (1'b1 == ap_CS_fsm_pp2_stage9));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_phi_mux_buffer_row_data_M_elems_2_phi_fu_474_p4 = buffer_row_data_M_elems_2_reg_471;

assign ap_phi_reg_pp2_iter0_j_5_reg_525 = 'bx;

assign ap_phi_reg_pp4_iter0_inc5_i_reg_588 = 'bx;

always @ (*) begin
    ap_predicate_op408_readreq_state66 = ((icmp_ln15_reg_2939 == 1'd0) & (1'd1 == and_ln18_reg_2964));
end

always @ (*) begin
    ap_predicate_op415_read_state73 = ((icmp_ln15_reg_2939_pp2_iter1_reg == 1'd0) & (1'd1 == and_ln18_reg_2964));
end

always @ (*) begin
    ap_predicate_op670_writereq_state109 = ((icmp_ln84_reg_3218_pp4_iter1_reg == 1'd0) & (1'd0 == and_ln86_reg_3258));
end

always @ (*) begin
    ap_predicate_op678_write_state110 = ((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (1'd0 == and_ln86_reg_3258));
end

always @ (*) begin
    ap_predicate_op681_writereq_state110 = ((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (1'd0 == and_ln86_reg_3258));
end

always @ (*) begin
    ap_predicate_op683_write_state111 = ((icmp_ln84_reg_3218_pp4_iter2_reg == 1'd0) & (1'd0 == and_ln86_reg_3258_pp4_iter2_reg));
end

always @ (*) begin
    ap_predicate_op690_writeresp_state115 = ((icmp_ln84_reg_3218_pp4_iter4_reg == 1'd0) & (1'd0 == and_ln86_reg_3258_pp4_iter4_reg));
end

always @ (*) begin
    ap_predicate_op692_writeresp_state116 = ((icmp_ln84_reg_3218_pp4_iter5_reg == 1'd0) & (1'd0 == and_ln86_reg_3258_pp4_iter4_reg));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln137_1_fu_2011_p1 = add_i_i_reg_3167;

assign bitcast_ln137_3_fu_2014_p1 = add_1_i_i_reg_3172;

assign bitcast_ln137_5_fu_2017_p1 = add_2_i_i_reg_3177;

assign bitcast_ln137_7_fu_2020_p1 = add_3_i_i_reg_3182;

assign bitcast_ln137_9_fu_2023_p1 = add_4_i_i_reg_3187;

assign bitcast_ln142_1_fu_1683_p1 = tmp_2_fu_1673_p4;

assign bitcast_ln142_2_fu_1697_p1 = tmp_3_fu_1687_p4;

assign bitcast_ln142_3_fu_1711_p1 = tmp_4_fu_1701_p4;

assign bitcast_ln142_4_fu_1725_p1 = tmp_5_fu_1715_p4;

assign bitcast_ln142_fu_1669_p1 = trunc_ln142_fu_1665_p1;

assign bitcast_ln86_fu_2218_p1 = trunc_ln86_reg_3237;

assign buffer_row_data_M_elems_4_fu_800_p2 = (and_ln71_2_fu_794_p2 | and_ln71_1_fu_788_p2);

assign buffer_row_data_M_elems_5_fu_2026_p6 = {{{{{bitcast_ln137_9_fu_2023_p1}, {bitcast_ln137_7_fu_2020_p1}}, {bitcast_ln137_5_fu_2017_p1}}, {bitcast_ln137_3_fu_2014_p1}}, {bitcast_ln137_1_fu_2011_p1}};

assign empty_33_fu_811_p1 = x_rowptr_read_reg_2604[2:0];

assign empty_34_fu_721_p2 = (shl_ln_fu_713_p3 | 9'd63);

assign empty_36_fu_906_p2 = i_3_reg_459 << 3'd2;

assign empty_37_fu_855_p2 = (p_cast37_fu_851_p1 + x_rowptr_read_reg_2604);

assign empty_38_fu_912_p2 = (empty_36_fu_906_p2 + empty_33_reg_2681);

assign empty_39_fu_870_p2 = (empty_37_fu_855_p2 + 64'd4);

assign empty_40_fu_938_p2 = (empty_38_reg_2758 ^ 3'd4);

assign empty_41_fu_929_p2 = csr_x_addr_read_reg_2748 >> p_cast38_fu_925_p1;

assign empty_42_fu_955_p2 = csr_x_addr_1_read_reg_2769 >> p_cast39_fu_951_p1;

assign empty_43_fu_960_p1 = empty_42_fu_955_p2[31:0];

assign empty_45_fu_1053_p2 = (trunc_ln46_1_fu_1046_p3 + trunc_ln46_reg_2686);

assign empty_46_fu_1070_p2 = csr_x_addr_2_read_reg_2827 >> p_cast46_fu_1066_p1;

assign empty_47_fu_1075_p1 = empty_46_fu_1070_p2[31:0];

assign empty_48_fu_1192_p2 = (shl_ln11_fu_1171_p2 + trunc_ln11_reg_2691);

assign empty_49_fu_1244_p2 = csr_y_addr_read_reg_2914 >> p_cast50_fu_1240_p1;

assign empty_50_fu_1197_p2 = (add_ln11_fu_1177_p2 + 64'd4);

assign empty_51_fu_1253_p2 = (empty_48_reg_2891 ^ 3'd4);

assign empty_52_fu_1270_p2 = csr_y_addr_1_read_reg_2924 >> p_cast51_fu_1266_p1;

assign empty_53_fu_1275_p1 = empty_52_fu_1270_p2[31:0];

assign empty_55_fu_1349_p2 = (trunc_ln17_1_fu_1341_p3 + trunc_ln17_reg_2696);

assign empty_56_fu_1366_p2 = csr_y_addr_2_read_reg_2959 >> p_cast52_fu_1362_p1;

assign empty_57_fu_1371_p1 = empty_56_fu_1366_p2[31:0];

assign empty_58_fu_1472_p2 = (shl_ln9_fu_1464_p3 | 9'd63);

assign empty_59_fu_1438_p2 = (shl_ln4_fu_1430_p3 | 9'd63);

assign empty_61_fu_1749_p2 = (shl_ln71_2_fu_1741_p3 | 9'd63);

assign empty_62_fu_2050_p2 = (empty_36_reg_2753 + trunc_ln128_reg_2610);

assign empty_63_fu_2065_p2 = csr_z_addr_1_read_reg_3203 >> p_cast40_fu_2061_p1;

assign empty_64_fu_2070_p1 = empty_63_fu_2065_p2[31:0];

assign empty_66_fu_2088_p2 = (tmp_21_fu_2080_p3 | 9'd63);

assign empty_67_fu_2261_p2 = (trunc_ln90_1_fu_2248_p3 + trunc_ln90_reg_2701);

assign empty_68_fu_2270_p2 = 8'd15 << p_cast47_fu_2266_p1;

assign empty_69_fu_2307_p2 = i_2_cast16_fu_2292_p1 << p_cast17_fu_2303_p1;

assign empty_72_fu_2389_p2 = (shl_ln96_fu_2375_p2 + trunc_ln128_reg_2610);

assign empty_73_fu_2425_p2 = 8'd15 << p_cast42_fu_2422_p1;

assign empty_74_fu_2406_p2 = inc67_i_cast41_fu_2385_p1 << p_cast43_fu_2402_p1;

assign empty_78_fu_2461_p2 = (shl_ln71_1_fu_2453_p3 | 9'd63);

assign extracted_scalar_fu_1135_p1 = csr_x_addr_3_read_reg_2851;

assign grp_fu_611_p0 = trunc_ln137_fu_1942_p1;

assign grp_fu_615_p0 = tmp_11_fu_1951_p4;

assign grp_fu_619_p0 = tmp_12_fu_1966_p4;

assign grp_fu_623_p0 = tmp_13_fu_1981_p4;

assign grp_fu_627_p0 = tmp_14_fu_1996_p4;

assign grp_fu_631_p1 = trunc_ln139_fu_1873_p1;

assign grp_fu_635_p1 = tmp_9_fu_1882_p4;

assign grp_fu_639_p1 = tmp_s_fu_1897_p4;

assign grp_fu_643_p1 = tmp_6_fu_1912_p4;

assign grp_fu_647_p1 = tmp_7_fu_1927_p4;

assign i_1_cast_fu_1333_p1 = i_1_reg_503;

assign i_2_cast16_fu_2292_p1 = i_reg_566_pp4_iter1_reg;

assign icmp_ln135_fu_837_p2 = ((i_3_reg_459 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_982_p2 = ((k_reg_481 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln140_1_fu_1144_p2 = ((trunc_ln140_reg_2862 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_1139_p2 = ((tmp_17_reg_2857 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_1285_p2 = ((ap_phi_mux_i_1_phi_fu_507_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_1375_p2 = ((empty_57_fu_1371_p1 == i_1_cast_fu_1333_p1) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_1318_p2 = (($signed(ap_phi_mux_j_3_phi_fu_518_p4) < $signed(empty_53_reg_2929)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1478_p2 = ((shl_ln9_fu_1464_p3 > empty_58_fu_1472_p2) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_1444_p2 = ((shl_ln4_fu_1430_p3 > empty_59_fu_1438_p2) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_1006_p2 = (($signed(j_1_reg_493) < $signed(sext_ln44_1_reg_2783)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_964_p2 = (($signed(j_reg_2763) < $signed(empty_43_fu_960_p1)) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1079_p2 = ((empty_47_fu_1075_p1 == zext_ln137_reg_2797) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_2447_p2 = ((idx289_reg_600 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_1735_p2 = ((idx287_reg_537 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_707_p2 = ((idx283_reg_448 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_2467_p2 = ((shl_ln71_1_fu_2453_p3 > empty_78_fu_2461_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_2_fu_1755_p2 = ((shl_ln71_2_fu_1741_p3 > empty_61_fu_1749_p2) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_727_p2 = ((shl_ln_fu_713_p3 > empty_34_fu_721_p2) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_2074_p2 = ((ap_phi_mux_i_phi_fu_570_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_2212_p2 = ((trunc_ln86_1_fu_2202_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_2_fu_2094_p2 = ((tmp_21_fu_2080_p3 > empty_66_fu_2088_p2) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_2206_p2 = ((tmp_15_fu_2192_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign inc67_i_cast41_fu_2385_p1 = inc67_i_reg_578;

assign indvars_iv_next277_fu_831_p2 = (i_3_reg_459 + 3'd1);

assign j_2_fu_1249_p1 = empty_49_fu_1244_p2[31:0];

assign j_4_fu_1413_p2 = (j_3_reg_515 + 32'd1);

assign j_fu_934_p1 = empty_41_fu_929_p2[31:0];

assign lshr_ln21_fu_1624_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln21_3_fu_1600_p1;

assign lshr_ln29_fu_1550_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln29_1_fu_1534_p1;

assign lshr_ln71_1_fu_2512_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln71_3_fu_2496_p1;

assign lshr_ln71_2_fu_1832_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln71_7_fu_1799_p1;

assign lshr_ln71_fu_770_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln71_1_fu_753_p1;

assign lshr_ln86_1_fu_2177_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 >> zext_ln86_1_fu_2174_p1;

assign lshr_ln86_fu_2162_p2 = select_ln86_1_fu_2136_p3 >> zext_ln86_fu_2158_p1;

assign or_ln140_fu_1149_p2 = (icmp_ln140_reg_2872 | icmp_ln140_1_reg_2877);

assign or_ln71_1_fu_1862_p2 = (and_ln71_8_fu_1856_p2 | and_ln71_7_fu_1850_p2);

assign or_ln71_fu_2542_p2 = (and_ln71_5_fu_2536_p2 | and_ln71_4_fu_2530_p2);

assign or_ln86_fu_2222_p2 = (icmp_ln86_reg_3243 | icmp_ln86_1_reg_3248);

assign out_row_data_M_elems_1_fu_1654_p2 = (and_ln21_2_fu_1648_p2 | and_ln21_1_fu_1642_p2);

assign out_row_data_M_elems_2_fu_1580_p2 = (and_ln29_2_fu_1574_p2 | and_ln29_1_fu_1568_p2);

assign p_cast11_cast_fu_2431_p1 = $signed(p_cast2_reg_3314);

assign p_cast12_cast_fu_1036_p1 = $signed(p_cast8_reg_2816);

assign p_cast17_fu_2303_p1 = tmp_22_fu_2296_p3;

assign p_cast18_cast_fu_2313_p1 = $signed(p_cast4_reg_3272);

assign p_cast1_cast_fu_886_p1 = $signed(p_cast1_reg_2726);

assign p_cast20_cast_fu_2354_p1 = $signed(p_cast5_reg_3293);

assign p_cast21_cast_fu_1111_p1 = $signed(p_cast_reg_2840);

assign p_cast23_cast_fu_1213_p1 = $signed(p_cast6_reg_2886);

assign p_cast26_cast_fu_1223_p1 = $signed(p_cast9_reg_2897);

assign p_cast29_cast_fu_1323_p1 = $signed(p_cast10_reg_2943);

assign p_cast33_cast_fu_1420_p1 = $signed(p_cast11_reg_2968);

assign p_cast37_fu_851_p1 = tmp_1_fu_843_p3;

assign p_cast38_fu_925_p1 = tmp_8_fu_917_p3;

assign p_cast39_fu_951_p1 = tmp_10_fu_943_p3;

assign p_cast3_cast_fu_896_p1 = $signed(p_cast3_reg_2731);

assign p_cast40_fu_2061_p1 = tmp_19_fu_2054_p3;

assign p_cast42_fu_2422_p1 = empty_72_reg_3304;

assign p_cast43_fu_2402_p1 = tmp_20_fu_2394_p3;

assign p_cast46_fu_1066_p1 = tmp_23_fu_1058_p3;

assign p_cast47_fu_2266_p1 = empty_67_fu_2261_p2;

assign p_cast48_fu_2350_p1 = empty_69_reg_3282;

assign p_cast50_fu_1240_p1 = tmp_24_fu_1233_p3;

assign p_cast51_fu_1266_p1 = tmp_25_fu_1258_p3;

assign p_cast52_fu_1362_p1 = tmp_26_fu_1354_p3;

assign p_cast7_cast_fu_2040_p1 = $signed(p_cast7_reg_2802);

assign select_ln21_1_fu_1591_p3 = ((icmp_ln21_reg_3015[0:0] == 1'b1) ? empty_58_reg_3010 : shl_ln9_reg_3005);

assign select_ln21_2_fu_1501_p3 = ((icmp_ln21_fu_1478_p2[0:0] == 1'b1) ? sub_ln21_fu_1487_p2 : shl_ln9_fu_1464_p3);

assign select_ln21_3_fu_1612_p3 = ((icmp_ln21_reg_3015[0:0] == 1'b1) ? tmp_27_fu_1603_p4 : shl_ln21_reg_3026);

assign select_ln21_fu_1493_p3 = ((icmp_ln21_fu_1478_p2[0:0] == 1'b1) ? shl_ln9_fu_1464_p3 : empty_58_fu_1472_p2);

assign select_ln29_1_fu_1525_p3 = ((icmp_ln29_reg_2994[0:0] == 1'b1) ? empty_59_reg_2989 : shl_ln4_reg_2984);

assign select_ln29_2_fu_1537_p3 = ((icmp_ln29_reg_2994[0:0] == 1'b1) ? 320'd0 : 320'd0);

assign select_ln29_fu_1450_p3 = ((icmp_ln29_fu_1444_p2[0:0] == 1'b1) ? shl_ln4_fu_1430_p3 : empty_59_fu_1438_p2);

assign select_ln71_1_fu_738_p3 = ((icmp_ln71_reg_2654[0:0] == 1'b1) ? empty_34_reg_2648 : shl_ln_reg_2642);

assign select_ln71_2_fu_757_p3 = ((icmp_ln71_reg_2654[0:0] == 1'b1) ? 320'd0 : 320'd0);

assign select_ln71_3_fu_2473_p3 = ((icmp_ln71_1_fu_2467_p2[0:0] == 1'b1) ? shl_ln71_1_fu_2453_p3 : empty_78_fu_2461_p2);

assign select_ln71_4_fu_2487_p3 = ((icmp_ln71_1_reg_3349[0:0] == 1'b1) ? empty_78_reg_3344 : shl_ln71_1_reg_3339);

assign select_ln71_5_fu_2499_p3 = ((icmp_ln71_1_reg_3349[0:0] == 1'b1) ? 320'd0 : 320'd0);

assign select_ln71_6_fu_1770_p3 = ((icmp_ln71_2_reg_3079[0:0] == 1'b1) ? shl_ln71_2_reg_3066 : empty_61_reg_3073);

assign select_ln71_7_fu_1775_p3 = ((icmp_ln71_2_reg_3079[0:0] == 1'b1) ? empty_61_reg_3073 : shl_ln71_2_reg_3066);

assign select_ln71_8_fu_1780_p3 = ((icmp_ln71_2_reg_3079[0:0] == 1'b1) ? sub_ln71_2_reg_3087 : shl_ln71_2_reg_3066);

assign select_ln71_9_fu_1819_p3 = ((icmp_ln71_2_reg_3079[0:0] == 1'b1) ? tmp_28_fu_1809_p4 : shl_ln71_4_fu_1803_p2);

assign select_ln71_fu_733_p3 = ((icmp_ln71_reg_2654[0:0] == 1'b1) ? shl_ln_reg_2642 : empty_34_reg_2648);

assign select_ln86_1_fu_2136_p3 = ((icmp_ln86_2_fu_2094_p2[0:0] == 1'b1) ? tmp_fu_2100_p4 : buffer_row_data_M_elems_2_reg_471);

assign select_ln86_2_fu_2144_p3 = ((icmp_ln86_2_fu_2094_p2[0:0] == 1'b1) ? sub_ln86_1_fu_2116_p2 : tmp_21_fu_2080_p3);

assign select_ln86_fu_2128_p3 = ((icmp_ln86_2_fu_2094_p2[0:0] == 1'b1) ? sub_ln86_fu_2110_p2 : sub_ln86_2_fu_2122_p2);

assign sext_ln128_fu_691_p1 = $signed(trunc_ln128_1_reg_2617);

assign sext_ln17_fu_1299_p1 = $signed(shl_ln7_fu_1291_p3);

assign sext_ln20_fu_1394_p1 = $signed(shl_ln8_fu_1386_p3);

assign sext_ln44_1_fu_972_p1 = empty_43_fu_960_p1;

assign sext_ln44_fu_969_p1 = j_reg_2763;

assign sext_ln90_fu_2240_p1 = $signed(shl_ln2_fu_2232_p3);

assign sext_ln91_fu_2331_p1 = $signed(shl_ln3_fu_2323_p3);

assign shl_ln11_fu_1171_p2 = k_reg_481 << 3'd2;

assign shl_ln128_fu_685_p2 = 8'd15 << zext_ln128_fu_682_p1;

assign shl_ln1_fu_2364_p3 = {{indvars_iv_next277_reg_2706}, {2'd0}};

assign shl_ln21_1_fu_1618_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 << zext_ln21_2_fu_1596_p1;

assign shl_ln21_fu_1519_p2 = zext_ln21_fu_1484_p1 << zext_ln21_1_fu_1515_p1;

assign shl_ln29_fu_1544_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 << zext_ln29_fu_1530_p1;

assign shl_ln2_fu_2232_p3 = {{ap_phi_mux_inc67_i_phi_fu_581_p4}, {2'd0}};

assign shl_ln3_fu_2323_p3 = {{inc67_i_reg_578}, {3'd0}};

assign shl_ln46_fu_1011_p2 = j_1_reg_493 << 64'd2;

assign shl_ln49_fu_1090_p2 = j_1_reg_493 << 64'd3;

assign shl_ln4_fu_1430_p3 = {{i_1_reg_503_pp2_iter1_reg}, {6'd0}};

assign shl_ln6_fu_1159_p3 = {{k_reg_481}, {2'd0}};

assign shl_ln71_1_fu_2453_p3 = {{idx289_reg_600}, {6'd0}};

assign shl_ln71_2_fu_1741_p3 = {{idx287_reg_537}, {6'd0}};

assign shl_ln71_3_fu_2506_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 << zext_ln71_2_fu_2492_p1;

assign shl_ln71_4_fu_1803_p2 = zext_ln71_4_fu_1767_p1 << zext_ln71_5_fu_1791_p1;

assign shl_ln71_5_fu_1826_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 << zext_ln71_6_fu_1795_p1;

assign shl_ln71_fu_764_p2 = 320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 << zext_ln71_fu_749_p1;

assign shl_ln7_fu_1291_p3 = {{ap_phi_mux_j_3_phi_fu_518_p4}, {2'd0}};

assign shl_ln8_fu_1386_p3 = {{j_3_reg_515}, {3'd0}};

assign shl_ln96_fu_2375_p2 = indvars_iv_next277_reg_2706 << 3'd2;

assign shl_ln9_fu_1464_p3 = {{i_1_reg_503_pp2_iter1_reg}, {6'd0}};

assign shl_ln_fu_713_p3 = {{idx283_reg_448}, {6'd0}};

assign sub_ln21_1_fu_1509_p2 = ($signed(9'd319) - $signed(select_ln21_fu_1493_p3));

assign sub_ln21_fu_1487_p2 = ($signed(9'd319) - $signed(shl_ln9_fu_1464_p3));

assign sub_ln29_fu_1458_p2 = ($signed(9'd319) - $signed(select_ln29_fu_1450_p3));

assign sub_ln71_1_fu_2481_p2 = ($signed(9'd319) - $signed(select_ln71_3_fu_2473_p3));

assign sub_ln71_2_fu_1761_p2 = ($signed(9'd319) - $signed(shl_ln71_2_fu_1741_p3));

assign sub_ln71_3_fu_1785_p2 = ($signed(9'd319) - $signed(select_ln71_6_fu_1770_p3));

assign sub_ln71_fu_743_p2 = ($signed(9'd319) - $signed(select_ln71_fu_733_p3));

assign sub_ln86_1_fu_2116_p2 = ($signed(9'd319) - $signed(tmp_21_fu_2080_p3));

assign sub_ln86_2_fu_2122_p2 = (empty_66_fu_2088_p2 - tmp_21_fu_2080_p3);

assign sub_ln86_3_fu_2152_p2 = ($signed(9'd319) - $signed(select_ln86_fu_2128_p3));

assign sub_ln86_fu_2110_p2 = (tmp_21_fu_2080_p3 - empty_66_fu_2088_p2);

assign tmp_10_fu_943_p3 = {{empty_40_fu_938_p2}, {3'd0}};

assign tmp_11_fu_1951_p4 = {{buffer_row_data_M_elems_2_reg_471[127:64]}};

assign tmp_12_fu_1966_p4 = {{buffer_row_data_M_elems_2_reg_471[191:128]}};

assign tmp_13_fu_1981_p4 = {{buffer_row_data_M_elems_2_reg_471[255:192]}};

assign tmp_14_fu_1996_p4 = {{buffer_row_data_M_elems_2_reg_471[319:256]}};

assign tmp_15_fu_2192_p4 = {{and_ln86_1_fu_2183_p2[62:52]}};

assign tmp_19_fu_2054_p3 = {{empty_62_reg_3208}, {3'd0}};

assign tmp_1_fu_843_p3 = {{i_3_reg_459}, {2'd0}};

assign tmp_20_fu_2394_p3 = {{empty_72_fu_2389_p2}, {3'd0}};

assign tmp_21_fu_2080_p3 = {{ap_phi_mux_i_phi_fu_570_p4}, {6'd0}};

assign tmp_22_fu_2296_p3 = {{empty_67_reg_3262}, {3'd0}};

assign tmp_23_fu_1058_p3 = {{empty_45_fu_1053_p2}, {3'd0}};

assign tmp_24_fu_1233_p3 = {{empty_48_reg_2891}, {3'd0}};

assign tmp_25_fu_1258_p3 = {{empty_51_fu_1253_p2}, {3'd0}};

assign tmp_26_fu_1354_p3 = {{empty_55_fu_1349_p2}, {3'd0}};

integer ap_tvar_int_0;

always @ (shl_ln21_reg_3026) begin
    for (ap_tvar_int_0 = 320 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 319 - 0) begin
            tmp_27_fu_1603_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_27_fu_1603_p4[ap_tvar_int_0] = shl_ln21_reg_3026[319 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln71_4_fu_1803_p2) begin
    for (ap_tvar_int_1 = 320 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 319 - 0) begin
            tmp_28_fu_1809_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_28_fu_1809_p4[ap_tvar_int_1] = shl_ln71_4_fu_1803_p2[319 - ap_tvar_int_1];
        end
    end
end

assign tmp_2_fu_1673_p4 = {{out_row_data_M_elems_fu_220[127:64]}};

assign tmp_3_fu_1687_p4 = {{out_row_data_M_elems_fu_220[191:128]}};

assign tmp_4_fu_1701_p4 = {{out_row_data_M_elems_fu_220[255:192]}};

assign tmp_5_fu_1715_p4 = {{out_row_data_M_elems_fu_220[319:256]}};

assign tmp_6_fu_1912_p4 = {{p_range_M_elems_071_fu_216[255:192]}};

assign tmp_7_fu_1927_p4 = {{p_range_M_elems_071_fu_216[319:256]}};

assign tmp_8_fu_917_p3 = {{empty_38_fu_912_p2}, {3'd0}};

assign tmp_9_fu_1882_p4 = {{p_range_M_elems_071_fu_216[127:64]}};

integer ap_tvar_int_2;

always @ (buffer_row_data_M_elems_2_reg_471) begin
    for (ap_tvar_int_2 = 320 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 319 - 0) begin
            tmp_fu_2100_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_fu_2100_p4[ap_tvar_int_2] = buffer_row_data_M_elems_2_reg_471[319 - ap_tvar_int_2];
        end
    end
end

assign tmp_s_fu_1897_p4 = {{p_range_M_elems_071_fu_216[191:128]}};

assign trunc_ln11_fu_817_p1 = y_rowptr_read_reg_2587[2:0];

assign trunc_ln128_fu_668_p1 = z_rowptr[2:0];

assign trunc_ln137_fu_1942_p1 = buffer_row_data_M_elems_2_reg_471[63:0];

assign trunc_ln139_fu_1873_p1 = p_range_M_elems_071_fu_216[63:0];

assign trunc_ln140_fu_1131_p1 = csr_x_RDATA[51:0];

assign trunc_ln142_fu_1665_p1 = out_row_data_M_elems_fu_220[63:0];

assign trunc_ln17_1_fu_1341_p3 = {{trunc_ln17_2_fu_1337_p1}, {2'd0}};

assign trunc_ln17_2_fu_1337_p1 = j_3_reg_515[0:0];

assign trunc_ln17_fu_820_p1 = y_colind_read_reg_2581[2:0];

assign trunc_ln46_1_fu_1046_p3 = {{trunc_ln46_2_reg_2811}, {2'd0}};

assign trunc_ln46_2_fu_1017_p1 = j_1_reg_493[0:0];

assign trunc_ln46_fu_814_p1 = x_colind_read_reg_2598[2:0];

assign trunc_ln86_1_fu_2202_p1 = and_ln86_1_fu_2183_p2[51:0];

assign trunc_ln86_fu_2188_p1 = and_ln86_1_fu_2183_p2[63:0];

assign trunc_ln90_1_fu_2248_p3 = {{trunc_ln90_2_fu_2244_p1}, {2'd0}};

assign trunc_ln90_2_fu_2244_p1 = ap_phi_mux_inc67_i_phi_fu_581_p4[0:0];

assign trunc_ln90_fu_823_p1 = z_colind_read_reg_2564[2:0];

assign xor_ln21_fu_1636_p2 = (320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 ^ and_ln21_fu_1630_p2);

assign xor_ln29_fu_1562_p2 = (320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 ^ and_ln29_fu_1556_p2);

assign xor_ln71_1_fu_2524_p2 = (320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 ^ and_ln71_3_fu_2518_p2);

assign xor_ln71_2_fu_1844_p2 = (320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 ^ and_ln71_6_fu_1838_p2);

assign xor_ln71_fu_782_p2 = (320'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936575 ^ and_ln71_fu_776_p2);

assign zext_ln11_fu_1167_p1 = shl_ln6_fu_1159_p3;

assign zext_ln128_fu_682_p1 = trunc_ln128_reg_2610;

assign zext_ln137_fu_988_p1 = k_reg_481;

assign zext_ln21_1_fu_1515_p1 = select_ln21_2_fu_1501_p3;

assign zext_ln21_2_fu_1596_p1 = select_ln21_1_fu_1591_p3;

assign zext_ln21_3_fu_1600_p1 = sub_ln21_1_reg_3021;

assign zext_ln21_fu_1484_p1 = csr_y_addr_3_read_reg_2979;

assign zext_ln29_1_fu_1534_p1 = sub_ln29_reg_3000;

assign zext_ln29_fu_1530_p1 = select_ln29_1_fu_1525_p3;

assign zext_ln71_1_fu_753_p1 = sub_ln71_fu_743_p2;

assign zext_ln71_2_fu_2492_p1 = select_ln71_4_fu_2487_p3;

assign zext_ln71_3_fu_2496_p1 = sub_ln71_1_reg_3355;

assign zext_ln71_4_fu_1767_p1 = csr_x_addr_3_read_reg_2851;

assign zext_ln71_5_fu_1791_p1 = select_ln71_8_fu_1780_p3;

assign zext_ln71_6_fu_1795_p1 = select_ln71_7_fu_1775_p3;

assign zext_ln71_7_fu_1799_p1 = sub_ln71_3_fu_1785_p2;

assign zext_ln71_fu_749_p1 = select_ln71_1_fu_738_p3;

assign zext_ln86_1_fu_2174_p1 = sub_ln86_3_reg_3222;

assign zext_ln86_fu_2158_p1 = select_ln86_2_fu_2144_p3;

assign zext_ln96_fu_2371_p1 = shl_ln1_fu_2364_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_2642[5:0] <= 6'b000000;
    empty_34_reg_2648[5:0] <= 6'b111111;
    p_cast37_reg_2721[1:0] <= 2'b00;
    p_cast37_reg_2721[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    empty_36_reg_2753[1:0] <= 2'b00;
    zext_ln137_reg_2797[31:3] <= 29'b00000000000000000000000000000;
    shl_ln4_reg_2984[5:0] <= 6'b000000;
    empty_59_reg_2989[5:0] <= 6'b111111;
    shl_ln9_reg_3005[5:0] <= 6'b000000;
    empty_58_reg_3010[5:0] <= 6'b111111;
    shl_ln71_2_reg_3066[5:0] <= 6'b000000;
    empty_61_reg_3073[5:0] <= 6'b111111;
    sub_ln71_2_reg_3087[5:0] <= 6'b111111;
    sub_ln86_3_reg_3222[0] <= 1'b0;
    shl_ln71_1_reg_3339[5:0] <= 6'b000000;
    empty_78_reg_3344[5:0] <= 6'b111111;
end

endmodule //row_product
